package randoop_test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    // The following exception was thrown during execution in test generation
    try {
    int i47 = intArrayUtil0.findMinViaRecursion(i_array41);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    int[] i_array19 = new int[] {  };
    int i21 = intArrayUtil18.findKthLargestViaQuickSort(i_array19, (-5));
    int[] i_array25 = new int[] { '4', (byte)0 };
    int i26 = intArrayUtil18.findMinSubArrayLen(0, i_array25);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int i32 = intArrayUtil18.findMinSubArrayLen((-1), i_array29);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    int i43 = intArrayUtil18.threeSumClosest(i_array40, (-1));
    // The following exception was thrown during execution in test generation
    try {
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array40, (int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil19.removeDuplicateElements(i_array52);
    int i58 = intArrayUtil18.findMinViaRecursion(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int i84 = intArrayUtil70.findMinSubArrayLen((-1), i_array81);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i95 = intArrayUtil70.threeSumClosest(i_array92, (-1));
    int i96 = intArrayUtil68.findMinSubArrayLen((int)(short)100, i_array92);
    int i97 = intArrayUtil59.removeDuplicateElements(i_array92);
    intArrayUtil18.getNextPermutationNumber(i_array92);
    int i99 = intArrayUtil0.removeDuplicateElements(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 2);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil0.findMinViaRecursion(i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int[] i_array88 = new int[] { '4', (byte)0 };
    int i89 = intArrayUtil81.findMinSubArrayLen(0, i_array88);
    int i91 = intArrayUtil66.threeSumClosest(i_array88, (-1));
    int i92 = intArrayUtil64.findMinSubArrayLen((int)(short)100, i_array88);
    int i94 = intArrayUtil49.threeSumClosest(i_array88, 10);
    intArrayUtil0.getNextPermutationNumber(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i78 = intArrayUtil42.findMinViaIteration(i_array74);
    intArrayUtil41.getNextPermutationNumber(i_array74);
    intArrayUtil0.getNextPermutationNumber(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    int[] i_array19 = new int[] {  };
    int i21 = intArrayUtil18.findKthLargestViaQuickSort(i_array19, (-5));
    int[] i_array25 = new int[] { '4', (byte)0 };
    int i26 = intArrayUtil18.findMinSubArrayLen(0, i_array25);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int i32 = intArrayUtil18.findMinSubArrayLen((-1), i_array29);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int i49 = intArrayUtil35.findMinSubArrayLen((-1), i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    int i60 = intArrayUtil35.threeSumClosest(i_array57, (-1));
    int i61 = intArrayUtil33.findMinSubArrayLen((int)(short)100, i_array57);
    int i63 = intArrayUtil18.threeSumClosest(i_array57, 10);
    // The following exception was thrown during execution in test generation
    try {
    int i65 = intArrayUtil0.findKthLargestViaQuickSort(i_array57, (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int i42 = intArrayUtil28.findMinSubArrayLen((-1), i_array39);
    int i44 = intArrayUtil27.findKthLargestViaQuickSort(i_array39, (-3));
    // The following exception was thrown during execution in test generation
    try {
    int i45 = intArrayUtil0.findMinViaRecursion(i_array39);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil15.findMinViaIteration(i_array66);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    int i77 = intArrayUtil15.threeSumClosest(i_array74, (int)(byte)-1);
    int i79 = intArrayUtil0.findKthLargestViaQuickSort(i_array74, (int)(short)-1);
    int[] i_array80 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i81 = intArrayUtil0.findMinViaRecursion(i_array80);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil61.findMinSubArrayLen(2, i_array87);
    int i93 = intArrayUtil46.findMinViaIteration(i_array87);
    // The following exception was thrown during execution in test generation
    try {
    int i95 = intArrayUtil0.findKthLargestViaQuickSort(i_array87, (int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil61.findMinSubArrayLen(2, i_array87);
    int i93 = intArrayUtil46.findMinViaIteration(i_array87);
    int i94 = intArrayUtil0.findMinViaIteration(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil42.findKthLargestViaQuickSort(i_array54, (-3));
    int i61 = intArrayUtil41.threeSumClosest(i_array54, 5);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i77 = intArrayUtil41.findMinViaIteration(i_array73);
    // The following exception was thrown during execution in test generation
    try {
    int i79 = intArrayUtil0.findKthLargestViaQuickSort(i_array73, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == (-1));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int[] i_array21 = new int[] { '4', (byte)0 };
    int i22 = intArrayUtil14.findMinSubArrayLen(0, i_array21);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int i28 = intArrayUtil14.findMinSubArrayLen((-1), i_array25);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    int i39 = intArrayUtil14.threeSumClosest(i_array36, (-1));
    int i40 = intArrayUtil12.findMinSubArrayLen((int)(short)100, i_array36);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    int i66 = intArrayUtil41.threeSumClosest(i_array63, (-1));
    int i67 = intArrayUtil12.findMinViaIteration(i_array63);
    // The following exception was thrown during execution in test generation
    try {
    int i69 = intArrayUtil0.findKthLargestViaQuickSort(i_array63, 7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int i83 = intArrayUtil69.findMinSubArrayLen((-1), i_array80);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    int[] i_array85 = new int[] {  };
    int i87 = intArrayUtil84.findKthLargestViaQuickSort(i_array85, (-5));
    int[] i_array91 = new int[] { '4', (byte)0 };
    int i92 = intArrayUtil84.findMinSubArrayLen(0, i_array91);
    int i94 = intArrayUtil69.threeSumClosest(i_array91, (-1));
    int i95 = intArrayUtil67.findMinSubArrayLen((int)(short)100, i_array91);
    int i96 = intArrayUtil58.removeDuplicateElements(i_array91);
    int i97 = intArrayUtil57.findMinViaIteration(i_array91);
    int i98 = intArrayUtil0.findMinSubArrayLen((int)'a', i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int i33 = intArrayUtil19.findMinSubArrayLen((-1), i_array30);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    int i44 = intArrayUtil19.threeSumClosest(i_array41, (-1));
    int i45 = intArrayUtil17.findMinSubArrayLen((int)(short)100, i_array41);
    int i46 = intArrayUtil15.findMinSubArrayLen(2, i_array41);
    int i47 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int i62 = intArrayUtil48.findMinSubArrayLen((-1), i_array59);
    // The following exception was thrown during execution in test generation
    try {
    int i64 = intArrayUtil0.findKthLargestViaQuickSort(i_array59, 3);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i77 = intArrayUtil60.findKthLargestViaQuickSort(i_array72, (-3));
    int i79 = intArrayUtil59.threeSumClosest(i_array72, 5);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array91 = new int[] {  };
    int i93 = intArrayUtil90.findKthLargestViaQuickSort(i_array91, (-5));
    int i94 = intArrayUtil80.findMinSubArrayLen((-1), i_array91);
    int i95 = intArrayUtil59.findMinViaIteration(i_array91);
    intArrayUtil0.getNextPermutationNumber(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i78 = intArrayUtil42.findMinViaIteration(i_array74);
    int i79 = intArrayUtil41.removeDuplicateElements(i_array74);
    int i80 = intArrayUtil0.removeDuplicateElements(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int i46 = intArrayUtil18.findMinSubArrayLen((int)(short)100, i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, 3);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int i81 = intArrayUtil67.findMinSubArrayLen((-1), i_array78);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i92 = intArrayUtil67.threeSumClosest(i_array89, (-1));
    int i93 = intArrayUtil65.findMinSubArrayLen((int)(short)100, i_array89);
    int i95 = intArrayUtil50.threeSumClosest(i_array89, 10);
    int i97 = intArrayUtil0.findKthLargestViaQuickSort(i_array89, (int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 52);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    int i45 = intArrayUtil0.threeSumClosest(i_array39, 10);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    int i72 = intArrayUtil0.removeDuplicateElements(i_array68);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int i89 = intArrayUtil75.findMinSubArrayLen((-1), i_array86);
    int i91 = intArrayUtil74.findKthLargestViaQuickSort(i_array86, (-3));
    int i93 = intArrayUtil73.threeSumClosest(i_array86, 5);
    int i95 = intArrayUtil0.threeSumClosest(i_array86, (int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil27.findMinSubArrayLen((int)(short)100, i_array51);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int i70 = intArrayUtil56.findMinSubArrayLen((-1), i_array67);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    int i81 = intArrayUtil56.threeSumClosest(i_array78, (-1));
    int i82 = intArrayUtil27.findMinViaIteration(i_array78);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array86 = new int[] { (byte)-1, (byte)10 };
    int i87 = intArrayUtil83.removeDuplicateElements(i_array86);
    int i89 = intArrayUtil27.threeSumClosest(i_array86, (int)(byte)-1);
    int i91 = intArrayUtil12.findKthLargestViaQuickSort(i_array86, (int)(short)-1);
    int i92 = intArrayUtil0.findMinViaIteration(i_array86);
    int[] i_array93 = null;
    intArrayUtil0.getNextPermutationNumber(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array62 = new int[] { (byte)-1, (byte)10 };
    int i63 = intArrayUtil59.removeDuplicateElements(i_array62);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    int i82 = intArrayUtil65.findKthLargestViaQuickSort(i_array77, (-3));
    int i84 = intArrayUtil64.threeSumClosest(i_array77, 5);
    int i85 = intArrayUtil59.removeDuplicateElements(i_array77);
    int i86 = intArrayUtil0.removeDuplicateElements(i_array77);
    int[] i_array87 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i89 = intArrayUtil0.threeSumClosest(i_array87, (int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i42 = intArrayUtil0.findMinViaRecursion(i_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    int i68 = intArrayUtil43.threeSumClosest(i_array65, (-1));
    int i69 = intArrayUtil41.findMinSubArrayLen((int)(short)100, i_array65);
    intArrayUtil0.getNextPermutationNumber(i_array65);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i94 = intArrayUtil77.findKthLargestViaQuickSort(i_array89, (-3));
    int i96 = intArrayUtil76.threeSumClosest(i_array89, 5);
    int i97 = intArrayUtil71.removeDuplicateElements(i_array89);
    intArrayUtil0.getNextPermutationNumber(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int i56 = intArrayUtil42.findMinSubArrayLen((-1), i_array53);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    int i67 = intArrayUtil42.threeSumClosest(i_array64, (-1));
    int i68 = intArrayUtil40.findMinSubArrayLen((int)(short)100, i_array64);
    int i69 = intArrayUtil31.removeDuplicateElements(i_array64);
    int i70 = intArrayUtil30.findMinViaRecursion(i_array64);
    int i71 = intArrayUtil26.removeDuplicateElements(i_array64);
    // The following exception was thrown during execution in test generation
    try {
    int i73 = intArrayUtil0.findKthLargestViaQuickSort(i_array64, 3);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 2);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int i40 = intArrayUtil0.findMinViaIteration(i_array34);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int[] i_array67 = new int[] { '4', (byte)0 };
    int i68 = intArrayUtil60.findMinSubArrayLen(0, i_array67);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int i74 = intArrayUtil60.findMinSubArrayLen((-1), i_array71);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i85 = intArrayUtil60.threeSumClosest(i_array82, (-1));
    int i86 = intArrayUtil58.findMinSubArrayLen((int)(short)100, i_array82);
    int i87 = intArrayUtil56.findMinSubArrayLen(2, i_array82);
    int i88 = intArrayUtil41.findMinViaIteration(i_array82);
    int i89 = intArrayUtil0.findMinViaRecursion(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    int i68 = intArrayUtil43.threeSumClosest(i_array65, (-1));
    int i69 = intArrayUtil41.findMinSubArrayLen((int)(short)100, i_array65);
    intArrayUtil0.getNextPermutationNumber(i_array65);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i94 = intArrayUtil77.findKthLargestViaQuickSort(i_array89, (-3));
    int i96 = intArrayUtil76.threeSumClosest(i_array89, 5);
    int i97 = intArrayUtil71.removeDuplicateElements(i_array89);
    // The following exception was thrown during execution in test generation
    try {
    int i98 = intArrayUtil0.findMinViaRecursion(i_array89);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int i56 = intArrayUtil42.findMinSubArrayLen((-1), i_array53);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    int i67 = intArrayUtil42.threeSumClosest(i_array64, (-1));
    int i68 = intArrayUtil40.findMinSubArrayLen((int)(short)100, i_array64);
    int i69 = intArrayUtil38.findMinSubArrayLen(2, i_array64);
    int i70 = intArrayUtil0.findMinSubArrayLen(4, i_array64);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    util.IntArrayUtil intArrayUtil86 = new util.IntArrayUtil();
    int[] i_array87 = new int[] {  };
    int i89 = intArrayUtil86.findKthLargestViaQuickSort(i_array87, (-5));
    int[] i_array93 = new int[] { '4', (byte)0 };
    int i94 = intArrayUtil86.findMinSubArrayLen(0, i_array93);
    int i96 = intArrayUtil71.threeSumClosest(i_array93, (-1));
    intArrayUtil0.getNextPermutationNumber(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i78 = intArrayUtil61.findKthLargestViaQuickSort(i_array73, (-3));
    int i80 = intArrayUtil60.threeSumClosest(i_array73, 5);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int[] i_array88 = new int[] { '4', (byte)0 };
    int i89 = intArrayUtil81.findMinSubArrayLen(0, i_array88);
    util.IntArrayUtil intArrayUtil91 = new util.IntArrayUtil();
    int[] i_array92 = new int[] {  };
    int i94 = intArrayUtil91.findKthLargestViaQuickSort(i_array92, (-5));
    int i95 = intArrayUtil81.findMinSubArrayLen((-1), i_array92);
    int i96 = intArrayUtil60.findMinViaIteration(i_array92);
    int i97 = intArrayUtil59.removeDuplicateElements(i_array92);
    int i98 = intArrayUtil0.findMinViaIteration(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == (-1));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int[] i_array40 = null;
    intArrayUtil1.getNextPermutationNumber(i_array40);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int i68 = intArrayUtil54.findMinSubArrayLen((-1), i_array65);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    int i79 = intArrayUtil54.threeSumClosest(i_array76, (-1));
    int i80 = intArrayUtil52.findMinSubArrayLen((int)(short)100, i_array76);
    int i81 = intArrayUtil43.removeDuplicateElements(i_array76);
    int i82 = intArrayUtil42.findMinViaRecursion(i_array76);
    intArrayUtil1.getNextPermutationNumber(i_array76);
    int i84 = intArrayUtil0.removeDuplicateElements(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 2);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i70 = intArrayUtil59.findMinSubArrayLen(1, i_array68);
    int i72 = intArrayUtil0.threeSumClosest(i_array68, (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    int i28 = intArrayUtil11.findKthLargestViaQuickSort(i_array23, (-3));
    int i30 = intArrayUtil10.threeSumClosest(i_array23, 5);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i46 = intArrayUtil10.findMinViaIteration(i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, (int)' ');
    int[] i_array50 = null;
    int i51 = intArrayUtil0.findMinViaIteration(i_array50);
    int[] i_array58 = new int[] { (short)0, '#', (byte)0, (short)0, '#', '#' };
    intArrayUtil0.getNextPermutationNumber(i_array58);
    int[] i_array60 = null;
    intArrayUtil0.getNextPermutationNumber(i_array60);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    int i80 = intArrayUtil63.findKthLargestViaQuickSort(i_array75, (-3));
    int i82 = intArrayUtil62.threeSumClosest(i_array75, 5);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    util.IntArrayUtil intArrayUtil93 = new util.IntArrayUtil();
    int[] i_array94 = new int[] {  };
    int i96 = intArrayUtil93.findKthLargestViaQuickSort(i_array94, (-5));
    int i97 = intArrayUtil83.findMinSubArrayLen((-1), i_array94);
    int i98 = intArrayUtil62.findMinViaIteration(i_array94);
    // The following exception was thrown during execution in test generation
    try {
    int i99 = intArrayUtil0.findMinViaRecursion(i_array94);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == (-1));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    int i26 = intArrayUtil1.threeSumClosest(i_array23, (-1));
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    int i56 = intArrayUtil31.threeSumClosest(i_array53, (-1));
    int i57 = intArrayUtil29.findMinSubArrayLen((int)(short)100, i_array53);
    int i58 = intArrayUtil27.findMinSubArrayLen(2, i_array53);
    int i59 = intArrayUtil1.removeDuplicateElements(i_array53);
    int i61 = intArrayUtil0.threeSumClosest(i_array53, 0);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    int i87 = intArrayUtil62.threeSumClosest(i_array84, (-1));
    int[] i_array90 = new int[] { (byte)1, (short)0 };
    int i91 = intArrayUtil62.findMinViaRecursion(i_array90);
    // The following exception was thrown during execution in test generation
    try {
    int i93 = intArrayUtil0.findKthLargestViaQuickSort(i_array90, (int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int i68 = intArrayUtil54.findMinSubArrayLen((-1), i_array65);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    int i79 = intArrayUtil54.threeSumClosest(i_array76, (-1));
    int i80 = intArrayUtil52.findMinSubArrayLen((int)(short)100, i_array76);
    int i81 = intArrayUtil43.removeDuplicateElements(i_array76);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i91 = intArrayUtil43.findMinViaRecursion(i_array89);
    int i93 = intArrayUtil0.findKthLargestViaQuickSort(i_array89, (-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    int i94 = intArrayUtil56.removeDuplicateElements(i_array89);
    int i96 = intArrayUtil47.threeSumClosest(i_array89, (int)' ');
    int i97 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    int i11 = intArrayUtil0.threeSumClosest(i_array8, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil27.findMinSubArrayLen((int)(short)100, i_array51);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int i70 = intArrayUtil56.findMinSubArrayLen((-1), i_array67);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    int i81 = intArrayUtil56.threeSumClosest(i_array78, (-1));
    int i82 = intArrayUtil27.findMinViaIteration(i_array78);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array86 = new int[] { (byte)-1, (byte)10 };
    int i87 = intArrayUtil83.removeDuplicateElements(i_array86);
    int i89 = intArrayUtil27.threeSumClosest(i_array86, (int)(byte)-1);
    int i91 = intArrayUtil12.findKthLargestViaQuickSort(i_array86, (int)(short)-1);
    util.IntArrayUtil intArrayUtil92 = new util.IntArrayUtil();
    int[] i_array95 = new int[] { (byte)-1, (byte)10 };
    int i96 = intArrayUtil92.removeDuplicateElements(i_array95);
    int i97 = intArrayUtil12.removeDuplicateElements(i_array95);
    int i99 = intArrayUtil0.findKthLargestViaQuickSort(i_array95, (int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    int i28 = intArrayUtil11.findKthLargestViaQuickSort(i_array23, (-3));
    int i30 = intArrayUtil10.threeSumClosest(i_array23, 5);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i46 = intArrayUtil10.findMinViaIteration(i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, (int)' ');
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    int i69 = intArrayUtil52.findKthLargestViaQuickSort(i_array64, (-3));
    int i71 = intArrayUtil51.threeSumClosest(i_array64, 5);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int[] i_array81 = new int[] { '4', (byte)0 };
    int i82 = intArrayUtil74.findMinSubArrayLen(0, i_array81);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    int[] i_array85 = new int[] {  };
    int i87 = intArrayUtil84.findKthLargestViaQuickSort(i_array85, (-5));
    int i88 = intArrayUtil74.findMinSubArrayLen((-1), i_array85);
    int i90 = intArrayUtil73.findKthLargestViaQuickSort(i_array85, (-3));
    int i92 = intArrayUtil72.threeSumClosest(i_array85, 5);
    int i94 = intArrayUtil51.threeSumClosest(i_array85, 2);
    int i95 = intArrayUtil0.findMinSubArrayLen((int)'a', i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array18 = new int[] { (byte)-1, (byte)10 };
    int i19 = intArrayUtil15.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i47 = intArrayUtil30.findKthLargestViaQuickSort(i_array42, (-3));
    int i49 = intArrayUtil29.threeSumClosest(i_array42, 5);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    int i65 = intArrayUtil29.findMinViaIteration(i_array61);
    int i66 = intArrayUtil20.removeDuplicateElements(i_array61);
    int i68 = intArrayUtil15.findKthLargestViaQuickSort(i_array61, 0);
    // The following exception was thrown during execution in test generation
    try {
    int i70 = intArrayUtil0.findKthLargestViaQuickSort(i_array61, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    int i43 = intArrayUtil0.threeSumClosest(i_array34, 2);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i80 = intArrayUtil55.threeSumClosest(i_array77, (-1));
    int i81 = intArrayUtil53.findMinSubArrayLen((int)(short)100, i_array77);
    int i82 = intArrayUtil44.removeDuplicateElements(i_array77);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    int i92 = intArrayUtil44.findMinViaRecursion(i_array90);
    intArrayUtil0.getNextPermutationNumber(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int[] i_array40 = new int[] { (byte)1, (short)0 };
    int i41 = intArrayUtil12.findMinViaRecursion(i_array40);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    int i64 = intArrayUtil12.threeSumClosest(i_array55, 1);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int i83 = intArrayUtil69.findMinSubArrayLen((-1), i_array80);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    int[] i_array85 = new int[] {  };
    int i87 = intArrayUtil84.findKthLargestViaQuickSort(i_array85, (-5));
    int[] i_array91 = new int[] { '4', (byte)0 };
    int i92 = intArrayUtil84.findMinSubArrayLen(0, i_array91);
    int i94 = intArrayUtil69.threeSumClosest(i_array91, (-1));
    int i95 = intArrayUtil67.findMinSubArrayLen((int)(short)100, i_array91);
    int i96 = intArrayUtil65.findMinSubArrayLen(2, i_array91);
    int i97 = intArrayUtil12.findMinViaRecursion(i_array91);
    int i99 = intArrayUtil0.threeSumClosest(i_array91, (int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int[] i_array81 = new int[] { '4', (byte)0 };
    int i82 = intArrayUtil74.findMinSubArrayLen(0, i_array81);
    int i84 = intArrayUtil59.threeSumClosest(i_array81, (-1));
    int i85 = intArrayUtil57.findMinSubArrayLen((int)(short)100, i_array81);
    int i86 = intArrayUtil0.findMinSubArrayLen((-1), i_array81);
    int[] i_array88 = null;
    int i89 = intArrayUtil0.findMinSubArrayLen((int)(short)-1, i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil15.findMinViaIteration(i_array66);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    int i77 = intArrayUtil15.threeSumClosest(i_array74, (int)(byte)-1);
    int i79 = intArrayUtil0.findKthLargestViaQuickSort(i_array74, (int)(short)-1);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array83 = new int[] { (byte)-1, (byte)10 };
    int i84 = intArrayUtil80.removeDuplicateElements(i_array83);
    int i85 = intArrayUtil0.removeDuplicateElements(i_array83);
    int[] i_array86 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i87 = intArrayUtil0.findMinViaRecursion(i_array86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    int i37 = intArrayUtil26.findMinSubArrayLen(1, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i75 = intArrayUtil50.threeSumClosest(i_array72, (-1));
    int i76 = intArrayUtil48.findMinSubArrayLen((int)(short)100, i_array72);
    int i77 = intArrayUtil39.removeDuplicateElements(i_array72);
    int i78 = intArrayUtil38.findMinViaRecursion(i_array72);
    int i79 = intArrayUtil26.findMinViaIteration(i_array72);
    intArrayUtil5.getNextPermutationNumber(i_array72);
    int i82 = intArrayUtil0.findKthLargestViaQuickSort(i_array72, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    int i81 = intArrayUtil45.findMinViaIteration(i_array77);
    int i83 = intArrayUtil41.findKthLargestViaQuickSort(i_array77, 0);
    intArrayUtil0.getNextPermutationNumber(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i55 = intArrayUtil0.findKthLargestViaQuickSort(i_array50, (int)(short)0);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    int i94 = intArrayUtil56.removeDuplicateElements(i_array89);
    int i96 = intArrayUtil0.threeSumClosest(i_array89, (int)(short)-1);
    int[] i_array97 = null;
    intArrayUtil0.getNextPermutationNumber(i_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    int i49 = intArrayUtil0.findMinSubArrayLen((int)(byte)0, i_array41);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int i66 = intArrayUtil52.findMinSubArrayLen((-1), i_array63);
    int i68 = intArrayUtil51.findKthLargestViaQuickSort(i_array63, (-3));
    int i70 = intArrayUtil50.threeSumClosest(i_array63, 5);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int i87 = intArrayUtil73.findMinSubArrayLen((-1), i_array84);
    int i89 = intArrayUtil72.findKthLargestViaQuickSort(i_array84, (-3));
    int i91 = intArrayUtil71.threeSumClosest(i_array84, 5);
    int i93 = intArrayUtil50.threeSumClosest(i_array84, 2);
    int i95 = intArrayUtil0.threeSumClosest(i_array84, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int i56 = intArrayUtil42.findMinSubArrayLen((-1), i_array53);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    int i67 = intArrayUtil42.threeSumClosest(i_array64, (-1));
    int i68 = intArrayUtil40.findMinSubArrayLen((int)(short)100, i_array64);
    int i69 = intArrayUtil38.findMinSubArrayLen(2, i_array64);
    int i70 = intArrayUtil0.findMinSubArrayLen(4, i_array64);
    int[] i_array71 = null;
    int i72 = intArrayUtil0.findMinViaIteration(i_array71);
    int[] i_array73 = null;
    int i74 = intArrayUtil0.removeDuplicateElements(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int i46 = intArrayUtil18.findMinSubArrayLen((int)(short)100, i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int[] i_array48 = null;
    intArrayUtil9.getNextPermutationNumber(i_array48);
    int[] i_array50 = null;
    int i51 = intArrayUtil9.findMinViaIteration(i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    int i63 = intArrayUtil52.findMinSubArrayLen(1, i_array61);
    int i65 = intArrayUtil9.findKthLargestViaQuickSort(i_array61, 1);
    int i67 = intArrayUtil0.findKthLargestViaQuickSort(i_array61, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 52);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int[] i_array44 = new int[] { '4', (byte)0 };
    int i45 = intArrayUtil37.findMinSubArrayLen(0, i_array44);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    int i65 = intArrayUtil48.findKthLargestViaQuickSort(i_array60, (-3));
    int i67 = intArrayUtil47.threeSumClosest(i_array60, 5);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int i82 = intArrayUtil68.findMinSubArrayLen((-1), i_array79);
    int i83 = intArrayUtil47.findMinViaIteration(i_array79);
    int i84 = intArrayUtil46.removeDuplicateElements(i_array79);
    int i86 = intArrayUtil37.threeSumClosest(i_array79, (int)' ');
    intArrayUtil0.getNextPermutationNumber(i_array79);
    int[] i_array88 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i89 = intArrayUtil0.findMinViaRecursion(i_array88);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array45 = new int[] { (byte)-1, (byte)10 };
    int i46 = intArrayUtil42.removeDuplicateElements(i_array45);
    int i47 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array45);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    int i94 = intArrayUtil48.removeDuplicateElements(i_array89);
    intArrayUtil0.getNextPermutationNumber(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    int i37 = intArrayUtil26.findMinSubArrayLen(1, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int i52 = intArrayUtil38.findMinSubArrayLen((-1), i_array49);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i78 = intArrayUtil53.threeSumClosest(i_array75, (-1));
    int[] i_array81 = new int[] { (byte)1, (short)0 };
    int i82 = intArrayUtil53.findMinViaRecursion(i_array81);
    int i84 = intArrayUtil38.threeSumClosest(i_array81, 5);
    int i85 = intArrayUtil26.findMinViaRecursion(i_array81);
    int i86 = intArrayUtil0.findMinViaRecursion(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    int[] i_array27 = null;
    int i28 = intArrayUtil0.findMinViaIteration(i_array27);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int[] i_array67 = new int[] { '4', (byte)0 };
    int i68 = intArrayUtil60.findMinSubArrayLen(0, i_array67);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int i74 = intArrayUtil60.findMinSubArrayLen((-1), i_array71);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i85 = intArrayUtil60.threeSumClosest(i_array82, (-1));
    int i86 = intArrayUtil58.findMinSubArrayLen((int)(short)100, i_array82);
    int i87 = intArrayUtil56.findMinSubArrayLen(2, i_array82);
    int i88 = intArrayUtil30.removeDuplicateElements(i_array82);
    int i90 = intArrayUtil29.threeSumClosest(i_array82, 0);
    intArrayUtil0.getNextPermutationNumber(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil15.findMinViaIteration(i_array66);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    int i77 = intArrayUtil15.threeSumClosest(i_array74, (int)(byte)-1);
    int i79 = intArrayUtil0.findKthLargestViaQuickSort(i_array74, (int)(short)-1);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array83 = new int[] { (byte)-1, (byte)10 };
    int i84 = intArrayUtil80.removeDuplicateElements(i_array83);
    int i85 = intArrayUtil0.removeDuplicateElements(i_array83);
    util.IntArrayUtil intArrayUtil86 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil87 = new util.IntArrayUtil();
    int[] i_array88 = new int[] {  };
    int i90 = intArrayUtil87.findKthLargestViaQuickSort(i_array88, (-5));
    int[] i_array94 = new int[] { '4', (byte)0 };
    int i95 = intArrayUtil87.findMinSubArrayLen(0, i_array94);
    int i97 = intArrayUtil86.threeSumClosest(i_array94, (int)(byte)-1);
    int i98 = intArrayUtil0.findMinViaIteration(i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array76 = null;
    int i78 = intArrayUtil0.findKthLargestViaQuickSort(i_array76, (int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int i51 = intArrayUtil0.findMinSubArrayLen(6, i_array48);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i79 = intArrayUtil62.findKthLargestViaQuickSort(i_array74, (-3));
    int i81 = intArrayUtil61.threeSumClosest(i_array74, 5);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    util.IntArrayUtil intArrayUtil92 = new util.IntArrayUtil();
    int[] i_array93 = new int[] {  };
    int i95 = intArrayUtil92.findKthLargestViaQuickSort(i_array93, (-5));
    int i96 = intArrayUtil82.findMinSubArrayLen((-1), i_array93);
    int i97 = intArrayUtil61.findMinViaIteration(i_array93);
    int i98 = intArrayUtil52.removeDuplicateElements(i_array93);
    int i99 = intArrayUtil0.removeDuplicateElements(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    int i72 = intArrayUtil44.findMinSubArrayLen((int)(short)100, i_array68);
    int i73 = intArrayUtil42.findMinSubArrayLen(2, i_array68);
    int i74 = intArrayUtil16.removeDuplicateElements(i_array68);
    int i76 = intArrayUtil15.threeSumClosest(i_array68, 0);
    int i77 = intArrayUtil0.findMinViaRecursion(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    int i50 = intArrayUtil39.findMinSubArrayLen(1, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i88 = intArrayUtil63.threeSumClosest(i_array85, (-1));
    int i89 = intArrayUtil61.findMinSubArrayLen((int)(short)100, i_array85);
    int i90 = intArrayUtil52.removeDuplicateElements(i_array85);
    int i91 = intArrayUtil51.findMinViaRecursion(i_array85);
    int i92 = intArrayUtil39.findMinViaIteration(i_array85);
    intArrayUtil18.getNextPermutationNumber(i_array85);
    int i94 = intArrayUtil0.findMinViaRecursion(i_array85);
    int[] i_array95 = null;
    int i97 = intArrayUtil0.findKthLargestViaQuickSort(i_array95, (int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array59 = new int[] { (byte)-1, (byte)10 };
    int i60 = intArrayUtil56.removeDuplicateElements(i_array59);
    int i62 = intArrayUtil0.threeSumClosest(i_array59, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    // The following exception was thrown during execution in test generation
    try {
    int i76 = intArrayUtil0.findKthLargestViaQuickSort(i_array72, 6);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i80 = intArrayUtil55.threeSumClosest(i_array77, (-1));
    int i81 = intArrayUtil53.findMinSubArrayLen((int)(short)100, i_array77);
    int i82 = intArrayUtil44.removeDuplicateElements(i_array77);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    int i92 = intArrayUtil44.findMinViaRecursion(i_array90);
    int i93 = intArrayUtil5.findMinViaIteration(i_array90);
    int i94 = intArrayUtil0.findMinSubArrayLen((-5), i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int i33 = intArrayUtil19.findMinSubArrayLen((-1), i_array30);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    int i44 = intArrayUtil19.threeSumClosest(i_array41, (-1));
    int i45 = intArrayUtil17.findMinSubArrayLen((int)(short)100, i_array41);
    int i46 = intArrayUtil15.findMinSubArrayLen(2, i_array41);
    int i47 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array51 = new int[] { (byte)-1, (byte)10 };
    int i52 = intArrayUtil48.removeDuplicateElements(i_array51);
    int i53 = intArrayUtil0.findMinViaIteration(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int i40 = intArrayUtil26.findMinSubArrayLen((-1), i_array37);
    int i41 = intArrayUtil5.findMinViaIteration(i_array37);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i54 = intArrayUtil43.findMinSubArrayLen(1, i_array52);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int i81 = intArrayUtil67.findMinSubArrayLen((-1), i_array78);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i92 = intArrayUtil67.threeSumClosest(i_array89, (-1));
    int i93 = intArrayUtil65.findMinSubArrayLen((int)(short)100, i_array89);
    int i94 = intArrayUtil56.removeDuplicateElements(i_array89);
    int i95 = intArrayUtil55.findMinViaRecursion(i_array89);
    int i96 = intArrayUtil43.findMinViaIteration(i_array89);
    int i97 = intArrayUtil5.findMinSubArrayLen(0, i_array89);
    int i99 = intArrayUtil0.threeSumClosest(i_array89, 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    int i68 = intArrayUtil43.threeSumClosest(i_array65, (-1));
    int i69 = intArrayUtil41.findMinSubArrayLen((int)(short)100, i_array65);
    int i70 = intArrayUtil39.findMinSubArrayLen(2, i_array65);
    int i71 = intArrayUtil1.findMinSubArrayLen(4, i_array65);
    int i72 = intArrayUtil0.removeDuplicateElements(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 2);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil19.removeDuplicateElements(i_array52);
    int i58 = intArrayUtil18.findMinViaIteration(i_array52);
    int i59 = intArrayUtil0.removeDuplicateElements(i_array52);
    int[] i_array62 = new int[] { (-1), (short)1 };
    // The following exception was thrown during execution in test generation
    try {
    int i64 = intArrayUtil0.findKthLargestViaQuickSort(i_array62, 52);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    int i20 = intArrayUtil3.findKthLargestViaQuickSort(i_array15, (-3));
    int i22 = intArrayUtil2.threeSumClosest(i_array15, 5);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i38 = intArrayUtil2.findMinViaIteration(i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil42.findKthLargestViaQuickSort(i_array54, (-3));
    int i61 = intArrayUtil41.threeSumClosest(i_array54, 5);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i77 = intArrayUtil41.findMinViaIteration(i_array73);
    intArrayUtil40.getNextPermutationNumber(i_array73);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int[] i_array86 = new int[] { '4', (byte)0 };
    int i87 = intArrayUtil79.findMinSubArrayLen(0, i_array86);
    util.IntArrayUtil intArrayUtil89 = new util.IntArrayUtil();
    int[] i_array90 = new int[] {  };
    int i92 = intArrayUtil89.findKthLargestViaQuickSort(i_array90, (-5));
    int i93 = intArrayUtil79.findMinSubArrayLen((-1), i_array90);
    int i95 = intArrayUtil40.findKthLargestViaQuickSort(i_array90, (int)(short)0);
    int i96 = intArrayUtil1.removeDuplicateElements(i_array90);
    intArrayUtil0.getNextPermutationNumber(i_array90);
    int[] i_array98 = null;
    int i99 = intArrayUtil0.findMinViaIteration(i_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == (-1));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i40 = intArrayUtil29.findMinSubArrayLen(1, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    int i68 = intArrayUtil43.threeSumClosest(i_array65, (-1));
    int i69 = intArrayUtil41.findMinSubArrayLen((int)(short)100, i_array65);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int i84 = intArrayUtil70.findMinSubArrayLen((-1), i_array81);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i95 = intArrayUtil70.threeSumClosest(i_array92, (-1));
    int i96 = intArrayUtil41.findMinViaIteration(i_array92);
    int i98 = intArrayUtil29.findKthLargestViaQuickSort(i_array92, (-4));
    int i99 = intArrayUtil0.findMinViaRecursion(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i55 = intArrayUtil0.findKthLargestViaQuickSort(i_array50, (int)(short)0);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    intArrayUtil56.getNextPermutationNumber(i_array89);
    // The following exception was thrown during execution in test generation
    try {
    int i95 = intArrayUtil0.findMinViaRecursion(i_array89);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    int[] i_array43 = null;
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array43, (-3));
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    int i87 = intArrayUtil62.threeSumClosest(i_array84, (-1));
    int i88 = intArrayUtil60.findMinSubArrayLen((int)(short)100, i_array84);
    int i89 = intArrayUtil51.removeDuplicateElements(i_array84);
    int i90 = intArrayUtil50.findMinViaRecursion(i_array84);
    int i91 = intArrayUtil46.removeDuplicateElements(i_array84);
    util.IntArrayUtil intArrayUtil93 = new util.IntArrayUtil();
    int[] i_array94 = new int[] {  };
    int i96 = intArrayUtil93.findKthLargestViaQuickSort(i_array94, (-5));
    int i97 = intArrayUtil46.findMinSubArrayLen(6, i_array94);
    int i99 = intArrayUtil0.threeSumClosest(i_array94, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    int[] i_array9 = null;
    intArrayUtil0.getNextPermutationNumber(i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int i41 = intArrayUtil27.findMinSubArrayLen((-1), i_array38);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil42.findMinSubArrayLen((int)(short)100, i_array66);
    int i72 = intArrayUtil27.threeSumClosest(i_array66, 10);
    int i73 = intArrayUtil11.findMinSubArrayLen((-5), i_array66);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array83 = new int[] { '4', (byte)0 };
    int i84 = intArrayUtil76.findMinSubArrayLen(0, i_array83);
    util.IntArrayUtil intArrayUtil86 = new util.IntArrayUtil();
    int[] i_array87 = new int[] {  };
    int i89 = intArrayUtil86.findKthLargestViaQuickSort(i_array87, (-5));
    int i90 = intArrayUtil76.findMinSubArrayLen((-1), i_array87);
    int i92 = intArrayUtil75.findKthLargestViaQuickSort(i_array87, (-3));
    int i93 = intArrayUtil11.findMinSubArrayLen(0, i_array87);
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    int[] i_array21 = null;
    intArrayUtil12.getNextPermutationNumber(i_array21);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int i48 = intArrayUtil34.findMinSubArrayLen((-1), i_array45);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    int i59 = intArrayUtil34.threeSumClosest(i_array56, (-1));
    int i60 = intArrayUtil32.findMinSubArrayLen((int)(short)100, i_array56);
    int i61 = intArrayUtil23.removeDuplicateElements(i_array56);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    int i71 = intArrayUtil23.findMinViaRecursion(i_array69);
    intArrayUtil12.getNextPermutationNumber(i_array69);
    int i74 = intArrayUtil0.findKthLargestViaQuickSort(i_array69, (int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 52);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    int i50 = intArrayUtil39.findMinSubArrayLen(1, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i88 = intArrayUtil63.threeSumClosest(i_array85, (-1));
    int i89 = intArrayUtil61.findMinSubArrayLen((int)(short)100, i_array85);
    int i90 = intArrayUtil52.removeDuplicateElements(i_array85);
    int i91 = intArrayUtil51.findMinViaRecursion(i_array85);
    int i92 = intArrayUtil39.findMinViaIteration(i_array85);
    intArrayUtil0.getNextPermutationNumber(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array76 = null;
    intArrayUtil0.getNextPermutationNumber(i_array76);
    int[] i_array78 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i80 = intArrayUtil0.threeSumClosest(i_array78, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    int i64 = intArrayUtil39.threeSumClosest(i_array61, (-1));
    int i65 = intArrayUtil37.findMinSubArrayLen((int)(short)100, i_array61);
    int i67 = intArrayUtil0.findKthLargestViaQuickSort(i_array61, (int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int i19 = intArrayUtil5.findMinSubArrayLen((-1), i_array16);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    int i30 = intArrayUtil5.threeSumClosest(i_array27, (-1));
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int i49 = intArrayUtil35.findMinSubArrayLen((-1), i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    int i60 = intArrayUtil35.threeSumClosest(i_array57, (-1));
    int i61 = intArrayUtil33.findMinSubArrayLen((int)(short)100, i_array57);
    int i62 = intArrayUtil31.findMinSubArrayLen(2, i_array57);
    int i63 = intArrayUtil5.removeDuplicateElements(i_array57);
    int i65 = intArrayUtil4.threeSumClosest(i_array57, 0);
    int i66 = intArrayUtil0.findMinViaIteration(i_array57);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int i82 = intArrayUtil68.findMinSubArrayLen((-1), i_array79);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    int i93 = intArrayUtil68.threeSumClosest(i_array90, (-1));
    int i94 = intArrayUtil0.findMinSubArrayLen((-5), i_array90);
    int[] i_array95 = null;
    int i97 = intArrayUtil0.findKthLargestViaQuickSort(i_array95, (int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array45 = new int[] { (byte)-1, (byte)10 };
    int i46 = intArrayUtil42.removeDuplicateElements(i_array45);
    int i47 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array45);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int i62 = intArrayUtil48.findMinSubArrayLen((-1), i_array59);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    int i73 = intArrayUtil48.threeSumClosest(i_array70, (-1));
    int i75 = intArrayUtil0.findKthLargestViaQuickSort(i_array70, (int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 52);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i59 = intArrayUtil0.findMinSubArrayLen((int)(short)1, i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    int i29 = intArrayUtil4.threeSumClosest(i_array26, (-1));
    int i30 = intArrayUtil2.findMinSubArrayLen((int)(short)100, i_array26);
    int i31 = intArrayUtil0.findMinSubArrayLen(2, i_array26);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    int i74 = intArrayUtil49.threeSumClosest(i_array71, (-1));
    int i75 = intArrayUtil47.findMinSubArrayLen((int)(short)100, i_array71);
    int i76 = intArrayUtil38.removeDuplicateElements(i_array71);
    int i77 = intArrayUtil37.findMinViaRecursion(i_array71);
    int i78 = intArrayUtil33.removeDuplicateElements(i_array71);
    int i79 = intArrayUtil0.findMinSubArrayLen(0, i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    int i43 = intArrayUtil0.threeSumClosest(i_array34, 2);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i80 = intArrayUtil55.threeSumClosest(i_array77, (-1));
    int i81 = intArrayUtil53.findMinSubArrayLen((int)(short)100, i_array77);
    int i82 = intArrayUtil44.removeDuplicateElements(i_array77);
    int i84 = intArrayUtil0.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array86 = null;
    int i87 = intArrayUtil0.findMinSubArrayLen(1, i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil0.threeSumClosest(i_array54, (int)(short)100);
    int[] i_array61 = null;
    int i62 = intArrayUtil0.findMinSubArrayLen(10, i_array61);
    int[] i_array63 = null;
    int i64 = intArrayUtil0.removeDuplicateElements(i_array63);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int i81 = intArrayUtil67.findMinSubArrayLen((-1), i_array78);
    int i83 = intArrayUtil66.findKthLargestViaQuickSort(i_array78, (-3));
    int i85 = intArrayUtil65.threeSumClosest(i_array78, 5);
    int i87 = intArrayUtil0.threeSumClosest(i_array78, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array42 = new int[] { (byte)-1, (byte)10 };
    int i43 = intArrayUtil39.removeDuplicateElements(i_array42);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    int i62 = intArrayUtil45.findKthLargestViaQuickSort(i_array57, (-3));
    int i64 = intArrayUtil44.threeSumClosest(i_array57, 5);
    int i65 = intArrayUtil39.removeDuplicateElements(i_array57);
    int i66 = intArrayUtil0.findMinViaIteration(i_array57);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int i71 = intArrayUtil0.findMinViaIteration(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i55 = intArrayUtil0.findKthLargestViaQuickSort(i_array50, (int)(short)0);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i78 = intArrayUtil61.findKthLargestViaQuickSort(i_array73, (-3));
    int i80 = intArrayUtil60.threeSumClosest(i_array73, 5);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int[] i_array88 = new int[] { '4', (byte)0 };
    int i89 = intArrayUtil81.findMinSubArrayLen(0, i_array88);
    util.IntArrayUtil intArrayUtil91 = new util.IntArrayUtil();
    int[] i_array92 = new int[] {  };
    int i94 = intArrayUtil91.findKthLargestViaQuickSort(i_array92, (-5));
    int i95 = intArrayUtil81.findMinSubArrayLen((-1), i_array92);
    int i96 = intArrayUtil60.findMinViaIteration(i_array92);
    int i98 = intArrayUtil56.findKthLargestViaQuickSort(i_array92, 0);
    int i99 = intArrayUtil0.findMinViaIteration(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == (-1));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    int i81 = intArrayUtil45.findMinViaIteration(i_array77);
    int i82 = intArrayUtil44.removeDuplicateElements(i_array77);
    int i83 = intArrayUtil0.findMinSubArrayLen((-4), i_array77);
    int[] i_array84 = null;
    int i85 = intArrayUtil0.findMinViaIteration(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == (-1));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil42.findKthLargestViaQuickSort(i_array54, (-3));
    int i61 = intArrayUtil41.threeSumClosest(i_array54, 5);
    int i63 = intArrayUtil0.findKthLargestViaQuickSort(i_array54, 0);
    int[] i_array64 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i66 = intArrayUtil0.threeSumClosest(i_array64, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int i56 = intArrayUtil42.findMinSubArrayLen((-1), i_array53);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    int i67 = intArrayUtil42.threeSumClosest(i_array64, (-1));
    int i68 = intArrayUtil40.findMinSubArrayLen((int)(short)100, i_array64);
    int i69 = intArrayUtil38.findMinSubArrayLen(2, i_array64);
    int i70 = intArrayUtil0.findMinSubArrayLen(4, i_array64);
    int[] i_array71 = null;
    int i72 = intArrayUtil0.removeDuplicateElements(i_array71);
    int[] i_array73 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i74 = intArrayUtil0.findMinViaRecursion(i_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int i59 = intArrayUtil45.findMinSubArrayLen((-1), i_array56);
    int i61 = intArrayUtil44.findKthLargestViaQuickSort(i_array56, (-3));
    int i63 = intArrayUtil43.threeSumClosest(i_array56, 5);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    int i79 = intArrayUtil43.findMinViaIteration(i_array75);
    int i80 = intArrayUtil42.removeDuplicateElements(i_array75);
    int i81 = intArrayUtil0.findMinSubArrayLen((-1), i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array32 = new int[] { (byte)-1, (byte)10 };
    int i33 = intArrayUtil29.removeDuplicateElements(i_array32);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int i50 = intArrayUtil36.findMinSubArrayLen((-1), i_array47);
    int i52 = intArrayUtil35.findKthLargestViaQuickSort(i_array47, (-3));
    int i54 = intArrayUtil34.threeSumClosest(i_array47, 5);
    int i55 = intArrayUtil29.removeDuplicateElements(i_array47);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    intArrayUtil56.getNextPermutationNumber(i_array89);
    int i96 = intArrayUtil29.threeSumClosest(i_array89, (int)(short)1);
    int i97 = intArrayUtil0.removeDuplicateElements(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    int i48 = intArrayUtil31.findKthLargestViaQuickSort(i_array43, (-3));
    int i50 = intArrayUtil30.threeSumClosest(i_array43, 5);
    int i52 = intArrayUtil0.threeSumClosest(i_array43, 1);
    int[] i_array54 = null;
    int i55 = intArrayUtil0.findMinSubArrayLen(5, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array59 = new int[] { (byte)-1, (byte)10 };
    int i60 = intArrayUtil56.removeDuplicateElements(i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i79 = intArrayUtil62.findKthLargestViaQuickSort(i_array74, (-3));
    int i81 = intArrayUtil61.threeSumClosest(i_array74, 5);
    int i82 = intArrayUtil56.removeDuplicateElements(i_array74);
    int i83 = intArrayUtil0.findMinViaIteration(i_array74);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i95 = intArrayUtil84.threeSumClosest(i_array92, (int)(byte)-1);
    intArrayUtil0.getNextPermutationNumber(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i38 = intArrayUtil21.findKthLargestViaQuickSort(i_array33, (-3));
    int i40 = intArrayUtil20.threeSumClosest(i_array33, 5);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    int i56 = intArrayUtil20.findMinViaIteration(i_array52);
    int i58 = intArrayUtil16.findKthLargestViaQuickSort(i_array52, 0);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array62 = new int[] { (byte)-1, (byte)10 };
    int i63 = intArrayUtil59.removeDuplicateElements(i_array62);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    int i82 = intArrayUtil65.findKthLargestViaQuickSort(i_array77, (-3));
    int i84 = intArrayUtil64.threeSumClosest(i_array77, 5);
    int i85 = intArrayUtil59.removeDuplicateElements(i_array77);
    int i86 = intArrayUtil16.removeDuplicateElements(i_array77);
    int i87 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array77);
    int[] i_array90 = new int[] { 10, (short)10 };
    int i92 = intArrayUtil0.threeSumClosest(i_array90, (-3));
    int[] i_array93 = null;
    int i95 = intArrayUtil0.findKthLargestViaQuickSort(i_array93, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int i48 = intArrayUtil34.findMinSubArrayLen((-1), i_array45);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    int i59 = intArrayUtil34.threeSumClosest(i_array56, (-1));
    int i60 = intArrayUtil32.findMinSubArrayLen((int)(short)100, i_array56);
    int i61 = intArrayUtil30.findMinSubArrayLen(2, i_array56);
    int i62 = intArrayUtil0.findMinViaRecursion(i_array56);
    int[] i_array63 = null;
    int i64 = intArrayUtil0.removeDuplicateElements(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int i59 = intArrayUtil45.findMinSubArrayLen((-1), i_array56);
    int i61 = intArrayUtil44.findKthLargestViaQuickSort(i_array56, (-3));
    int i63 = intArrayUtil43.threeSumClosest(i_array56, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i65 = intArrayUtil0.findKthLargestViaQuickSort(i_array56, (int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int[] i_array93 = new int[] { (byte)1, (short)0 };
    int i94 = intArrayUtil65.findMinViaRecursion(i_array93);
    int i95 = intArrayUtil46.findMinSubArrayLen(100, i_array93);
    int i97 = intArrayUtil0.threeSumClosest(i_array93, (int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    int i49 = intArrayUtil0.findMinSubArrayLen((int)(byte)0, i_array41);
    int[] i_array51 = null;
    int i52 = intArrayUtil0.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array56 = new int[] { (byte)-1, (byte)10 };
    int i57 = intArrayUtil53.removeDuplicateElements(i_array56);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i77 = intArrayUtil60.findKthLargestViaQuickSort(i_array72, (-3));
    int i79 = intArrayUtil59.threeSumClosest(i_array72, 5);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array91 = new int[] {  };
    int i93 = intArrayUtil90.findKthLargestViaQuickSort(i_array91, (-5));
    int i94 = intArrayUtil80.findMinSubArrayLen((-1), i_array91);
    int i95 = intArrayUtil59.findMinViaIteration(i_array91);
    int i96 = intArrayUtil58.removeDuplicateElements(i_array91);
    int i97 = intArrayUtil53.removeDuplicateElements(i_array91);
    int i99 = intArrayUtil0.threeSumClosest(i_array91, 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i77 = intArrayUtil0.findMinViaIteration(i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array81 = new int[] { (byte)-1, (byte)10 };
    int i82 = intArrayUtil78.removeDuplicateElements(i_array81);
    intArrayUtil0.getNextPermutationNumber(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int i29 = intArrayUtil15.findMinSubArrayLen((-1), i_array26);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    int i40 = intArrayUtil15.threeSumClosest(i_array37, (-1));
    int[] i_array43 = new int[] { (byte)1, (short)0 };
    int i44 = intArrayUtil15.findMinViaRecursion(i_array43);
    int i46 = intArrayUtil0.threeSumClosest(i_array43, 5);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    int i72 = intArrayUtil47.threeSumClosest(i_array69, (-1));
    int i73 = intArrayUtil0.findMinViaRecursion(i_array69);
    int[] i_array74 = null;
    intArrayUtil0.getNextPermutationNumber(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    intArrayUtil0.getNextPermutationNumber(i_array68);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array76 = new int[] { (byte)-1, (byte)10 };
    int i77 = intArrayUtil73.removeDuplicateElements(i_array76);
    int i78 = intArrayUtil0.findMinViaRecursion(i_array76);
    int[] i_array79 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i81 = intArrayUtil0.threeSumClosest(i_array79, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    int i49 = intArrayUtil0.findMinSubArrayLen((int)(byte)0, i_array41);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    int i61 = intArrayUtil50.threeSumClosest(i_array58, (int)(byte)-1);
    int i62 = intArrayUtil0.removeDuplicateElements(i_array58);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i68 = intArrayUtil0.findKthLargestViaQuickSort(i_array64, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil37.findMinSubArrayLen(1, i_array46);
    intArrayUtil0.getNextPermutationNumber(i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int i66 = intArrayUtil52.findMinSubArrayLen((-1), i_array63);
    int i68 = intArrayUtil51.findKthLargestViaQuickSort(i_array63, (-3));
    int i70 = intArrayUtil50.threeSumClosest(i_array63, 5);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    int i86 = intArrayUtil50.findMinViaIteration(i_array82);
    // The following exception was thrown during execution in test generation
    try {
    int i87 = intArrayUtil0.findMinViaRecursion(i_array82);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array7 = new int[] { (byte)-1, (byte)10 };
    int i8 = intArrayUtil4.removeDuplicateElements(i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i54 = intArrayUtil18.findMinViaIteration(i_array50);
    int i55 = intArrayUtil9.removeDuplicateElements(i_array50);
    int i57 = intArrayUtil4.findKthLargestViaQuickSort(i_array50, 0);
    int i59 = intArrayUtil0.threeSumClosest(i_array50, (int)(byte)100);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i78 = intArrayUtil61.findKthLargestViaQuickSort(i_array73, (-3));
    int i80 = intArrayUtil60.threeSumClosest(i_array73, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i81 = intArrayUtil0.findMinViaRecursion(i_array73);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    int i66 = intArrayUtil41.threeSumClosest(i_array63, (-1));
    int i67 = intArrayUtil39.findMinSubArrayLen((int)(short)100, i_array63);
    int i68 = intArrayUtil30.removeDuplicateElements(i_array63);
    int[] i_array69 = null;
    intArrayUtil30.getNextPermutationNumber(i_array69);
    int[] i_array71 = null;
    int i72 = intArrayUtil30.findMinViaIteration(i_array71);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int i87 = intArrayUtil73.findMinSubArrayLen((-1), i_array84);
    int i89 = intArrayUtil30.threeSumClosest(i_array84, (int)(short)100);
    int i91 = intArrayUtil0.threeSumClosest(i_array84, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i77 = intArrayUtil60.findKthLargestViaQuickSort(i_array72, (-3));
    int i79 = intArrayUtil59.threeSumClosest(i_array72, 5);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array91 = new int[] {  };
    int i93 = intArrayUtil90.findKthLargestViaQuickSort(i_array91, (-5));
    int i94 = intArrayUtil80.findMinSubArrayLen((-1), i_array91);
    int i95 = intArrayUtil59.findMinViaIteration(i_array91);
    // The following exception was thrown during execution in test generation
    try {
    int i97 = intArrayUtil0.findKthLargestViaQuickSort(i_array91, 3);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int[] i_array21 = new int[] { '4', (byte)0 };
    int i22 = intArrayUtil14.findMinSubArrayLen(0, i_array21);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int i28 = intArrayUtil14.findMinSubArrayLen((-1), i_array25);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    int i39 = intArrayUtil14.threeSumClosest(i_array36, (-1));
    int i40 = intArrayUtil12.findMinSubArrayLen((int)(short)100, i_array36);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    int i66 = intArrayUtil41.threeSumClosest(i_array63, (-1));
    int i67 = intArrayUtil12.findMinViaIteration(i_array63);
    int i69 = intArrayUtil0.findKthLargestViaQuickSort(i_array63, (-4));
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i79 = intArrayUtil0.findMinViaIteration(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int i65 = intArrayUtil51.findMinSubArrayLen((-1), i_array62);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    int i76 = intArrayUtil51.threeSumClosest(i_array73, (-1));
    int i77 = intArrayUtil49.findMinSubArrayLen((int)(short)100, i_array73);
    int i78 = intArrayUtil40.removeDuplicateElements(i_array73);
    int i79 = intArrayUtil39.findMinViaRecursion(i_array73);
    int i80 = intArrayUtil0.findMinViaRecursion(i_array73);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i91 = intArrayUtil0.findMinSubArrayLen(1, i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int i23 = intArrayUtil9.findMinSubArrayLen((-1), i_array20);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    int i34 = intArrayUtil9.threeSumClosest(i_array31, (-1));
    int i35 = intArrayUtil7.findMinSubArrayLen((int)(short)100, i_array31);
    int i36 = intArrayUtil5.findMinSubArrayLen(2, i_array31);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i78 = intArrayUtil53.threeSumClosest(i_array75, (-1));
    int i79 = intArrayUtil51.findMinSubArrayLen((int)(short)100, i_array75);
    int i80 = intArrayUtil42.removeDuplicateElements(i_array75);
    int i81 = intArrayUtil41.findMinViaRecursion(i_array75);
    int i82 = intArrayUtil37.removeDuplicateElements(i_array75);
    int i84 = intArrayUtil5.findKthLargestViaQuickSort(i_array75, (-3));
    int i85 = intArrayUtil0.findMinViaIteration(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil26.findMinSubArrayLen(2, i_array52);
    int i58 = intArrayUtil0.removeDuplicateElements(i_array52);
    int[] i_array59 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i60 = intArrayUtil0.findMinViaRecursion(i_array59);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    int[] i_array19 = new int[] {  };
    int i21 = intArrayUtil18.findKthLargestViaQuickSort(i_array19, (-5));
    int[] i_array25 = new int[] { '4', (byte)0 };
    int i26 = intArrayUtil18.findMinSubArrayLen(0, i_array25);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int i32 = intArrayUtil18.findMinSubArrayLen((-1), i_array29);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int i49 = intArrayUtil35.findMinSubArrayLen((-1), i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    int i60 = intArrayUtil35.threeSumClosest(i_array57, (-1));
    int i61 = intArrayUtil33.findMinSubArrayLen((int)(short)100, i_array57);
    int i63 = intArrayUtil18.threeSumClosest(i_array57, 10);
    int i64 = intArrayUtil0.findMinViaRecursion(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    int i50 = intArrayUtil39.findMinSubArrayLen(1, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i88 = intArrayUtil63.threeSumClosest(i_array85, (-1));
    int i89 = intArrayUtil61.findMinSubArrayLen((int)(short)100, i_array85);
    int i90 = intArrayUtil52.removeDuplicateElements(i_array85);
    int i91 = intArrayUtil51.findMinViaRecursion(i_array85);
    int i92 = intArrayUtil39.findMinViaIteration(i_array85);
    intArrayUtil18.getNextPermutationNumber(i_array85);
    int i94 = intArrayUtil0.findMinViaRecursion(i_array85);
    int[] i_array95 = null;
    int i97 = intArrayUtil0.findKthLargestViaQuickSort(i_array95, (-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    int i43 = intArrayUtil0.threeSumClosest(i_array34, 2);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    int i81 = intArrayUtil45.findMinViaIteration(i_array77);
    int i83 = intArrayUtil44.findKthLargestViaQuickSort(i_array77, (int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    int i85 = intArrayUtil0.findKthLargestViaQuickSort(i_array77, 5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array45 = new int[] { (byte)-1, (byte)10 };
    int i46 = intArrayUtil42.removeDuplicateElements(i_array45);
    int i47 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array45);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array51 = new int[] { (byte)-1, (byte)10 };
    int i52 = intArrayUtil48.removeDuplicateElements(i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    int i71 = intArrayUtil54.findKthLargestViaQuickSort(i_array66, (-3));
    int i73 = intArrayUtil53.threeSumClosest(i_array66, 5);
    int i74 = intArrayUtil48.removeDuplicateElements(i_array66);
    intArrayUtil0.getNextPermutationNumber(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    int i20 = intArrayUtil3.findKthLargestViaQuickSort(i_array15, (-3));
    int i22 = intArrayUtil2.threeSumClosest(i_array15, 5);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i38 = intArrayUtil2.findMinViaIteration(i_array34);
    int i40 = intArrayUtil1.findKthLargestViaQuickSort(i_array34, (int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    int i41 = intArrayUtil0.findMinViaRecursion(i_array34);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    int i45 = intArrayUtil0.threeSumClosest(i_array39, 10);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int i71 = intArrayUtil57.findMinSubArrayLen((-1), i_array68);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int[] i_array79 = new int[] { '4', (byte)0 };
    int i80 = intArrayUtil72.findMinSubArrayLen(0, i_array79);
    int i82 = intArrayUtil57.threeSumClosest(i_array79, (-1));
    int i83 = intArrayUtil55.findMinSubArrayLen((int)(short)100, i_array79);
    int i84 = intArrayUtil46.removeDuplicateElements(i_array79);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i94 = intArrayUtil46.findMinViaRecursion(i_array92);
    int i96 = intArrayUtil0.findKthLargestViaQuickSort(i_array92, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int i29 = intArrayUtil15.findMinSubArrayLen((-1), i_array26);
    int i31 = intArrayUtil14.findKthLargestViaQuickSort(i_array26, (-3));
    int i33 = intArrayUtil13.threeSumClosest(i_array26, 5);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    int i45 = intArrayUtil34.findMinSubArrayLen(1, i_array43);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    int i83 = intArrayUtil58.threeSumClosest(i_array80, (-1));
    int i84 = intArrayUtil56.findMinSubArrayLen((int)(short)100, i_array80);
    int i85 = intArrayUtil47.removeDuplicateElements(i_array80);
    int i86 = intArrayUtil46.findMinViaRecursion(i_array80);
    int i87 = intArrayUtil34.findMinViaIteration(i_array80);
    intArrayUtil13.getNextPermutationNumber(i_array80);
    int i90 = intArrayUtil4.threeSumClosest(i_array80, (int)(byte)10);
    int i91 = intArrayUtil0.findMinViaIteration(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int i38 = intArrayUtil24.findMinSubArrayLen((-1), i_array35);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i49 = intArrayUtil24.threeSumClosest(i_array46, (-1));
    int i50 = intArrayUtil22.findMinSubArrayLen((int)(short)100, i_array46);
    int i51 = intArrayUtil13.removeDuplicateElements(i_array46);
    int[] i_array52 = null;
    intArrayUtil13.getNextPermutationNumber(i_array52);
    int[] i_array54 = null;
    int i55 = intArrayUtil13.findMinViaIteration(i_array54);
    int[] i_array56 = null;
    int i58 = intArrayUtil13.findKthLargestViaQuickSort(i_array56, (-3));
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array83 = new int[] { '4', (byte)0 };
    int i84 = intArrayUtil76.findMinSubArrayLen(0, i_array83);
    int i86 = intArrayUtil61.threeSumClosest(i_array83, (-1));
    int i87 = intArrayUtil59.findMinSubArrayLen((int)(short)100, i_array83);
    int i89 = intArrayUtil13.threeSumClosest(i_array83, 3);
    int i90 = intArrayUtil0.findMinSubArrayLen(0, i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int i19 = intArrayUtil5.findMinSubArrayLen((-1), i_array16);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int[] i_array48 = new int[] { (byte)1, (short)0 };
    int i49 = intArrayUtil20.findMinViaRecursion(i_array48);
    int i51 = intArrayUtil5.threeSumClosest(i_array48, 5);
    int i52 = intArrayUtil0.findMinViaRecursion(i_array48);
    int[] i_array53 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i54 = intArrayUtil0.findMinViaRecursion(i_array53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    int[] i_array43 = null;
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array43, (-3));
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int i62 = intArrayUtil48.findMinSubArrayLen((-1), i_array59);
    int i64 = intArrayUtil47.findKthLargestViaQuickSort(i_array59, (-3));
    int i66 = intArrayUtil46.threeSumClosest(i_array59, 5);
    int i67 = intArrayUtil0.removeDuplicateElements(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil8 = new util.IntArrayUtil();
    int[] i_array9 = new int[] {  };
    int i11 = intArrayUtil8.findKthLargestViaQuickSort(i_array9, (-5));
    int[] i_array15 = new int[] { '4', (byte)0 };
    int i16 = intArrayUtil8.findMinSubArrayLen(0, i_array15);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    int[] i_array19 = new int[] {  };
    int i21 = intArrayUtil18.findKthLargestViaQuickSort(i_array19, (-5));
    int i22 = intArrayUtil8.findMinSubArrayLen((-1), i_array19);
    int i24 = intArrayUtil7.findKthLargestViaQuickSort(i_array19, (-3));
    int i26 = intArrayUtil6.threeSumClosest(i_array19, 5);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int i41 = intArrayUtil27.findMinSubArrayLen((-1), i_array38);
    int i42 = intArrayUtil6.findMinViaIteration(i_array38);
    int i44 = intArrayUtil5.findKthLargestViaQuickSort(i_array38, (int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    int i45 = intArrayUtil0.findMinViaRecursion(i_array38);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array77 = null;
    int i78 = intArrayUtil0.findMinSubArrayLen((int)(byte)-1, i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    int i46 = intArrayUtil21.threeSumClosest(i_array43, (-1));
    int[] i_array49 = new int[] { (byte)1, (short)0 };
    int i50 = intArrayUtil21.findMinViaRecursion(i_array49);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    int i69 = intArrayUtil52.findKthLargestViaQuickSort(i_array64, (-3));
    int i71 = intArrayUtil51.threeSumClosest(i_array64, 5);
    int i73 = intArrayUtil21.threeSumClosest(i_array64, 1);
    int i74 = intArrayUtil0.removeDuplicateElements(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    int i64 = intArrayUtil28.findMinViaIteration(i_array60);
    intArrayUtil27.getNextPermutationNumber(i_array60);
    int i67 = intArrayUtil0.threeSumClosest(i_array60, (int)(short)1);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i79 = intArrayUtil68.findMinSubArrayLen(1, i_array77);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array91 = new int[] {  };
    int i93 = intArrayUtil90.findKthLargestViaQuickSort(i_array91, (-5));
    int i94 = intArrayUtil80.findMinSubArrayLen((-1), i_array91);
    int i95 = intArrayUtil68.findMinViaIteration(i_array91);
    // The following exception was thrown during execution in test generation
    try {
    int i96 = intArrayUtil0.findMinViaRecursion(i_array91);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == (-1));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    int[] i_array46 = null;
    int i48 = intArrayUtil0.findKthLargestViaQuickSort(i_array46, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    int i83 = intArrayUtil58.threeSumClosest(i_array80, (-1));
    int i84 = intArrayUtil56.findMinSubArrayLen((int)(short)100, i_array80);
    int i85 = intArrayUtil47.removeDuplicateElements(i_array80);
    int[] i_array86 = null;
    intArrayUtil47.getNextPermutationNumber(i_array86);
    util.IntArrayUtil intArrayUtil89 = new util.IntArrayUtil();
    int[] i_array92 = new int[] { (byte)-1, (byte)10 };
    int i93 = intArrayUtil89.removeDuplicateElements(i_array92);
    int i94 = intArrayUtil47.findMinSubArrayLen((int)(byte)100, i_array92);
    int i95 = intArrayUtil0.findMinSubArrayLen(0, i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 1);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int i48 = intArrayUtil34.findMinSubArrayLen((-1), i_array45);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    int i59 = intArrayUtil34.threeSumClosest(i_array56, (-1));
    int i60 = intArrayUtil32.findMinSubArrayLen((int)(short)100, i_array56);
    int i61 = intArrayUtil30.findMinSubArrayLen(2, i_array56);
    int i62 = intArrayUtil0.findMinViaRecursion(i_array56);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    int i81 = intArrayUtil64.findKthLargestViaQuickSort(i_array76, (-3));
    int i83 = intArrayUtil63.threeSumClosest(i_array76, 5);
    int i84 = intArrayUtil0.removeDuplicateElements(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i77 = intArrayUtil0.findMinViaIteration(i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array91 = new int[] {  };
    int i93 = intArrayUtil90.findKthLargestViaQuickSort(i_array91, (-5));
    int i94 = intArrayUtil80.findMinSubArrayLen((-1), i_array91);
    int i96 = intArrayUtil79.findKthLargestViaQuickSort(i_array91, (-3));
    int i98 = intArrayUtil78.threeSumClosest(i_array91, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i99 = intArrayUtil0.findMinViaRecursion(i_array91);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    intArrayUtil0.getNextPermutationNumber(i_array68);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array77 = new int[] { (byte)-1, (byte)10 };
    int i78 = intArrayUtil74.removeDuplicateElements(i_array77);
    int i79 = intArrayUtil0.findMinSubArrayLen((int)'4', i_array77);
    int[] i_array80 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i81 = intArrayUtil0.findMinViaRecursion(i_array80);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array83 = new int[] { '4', (byte)0 };
    int i84 = intArrayUtil76.findMinSubArrayLen(0, i_array83);
    int i86 = intArrayUtil61.threeSumClosest(i_array83, (-1));
    int i87 = intArrayUtil59.findMinSubArrayLen((int)(short)100, i_array83);
    int i89 = intArrayUtil44.threeSumClosest(i_array83, 10);
    int i90 = intArrayUtil0.findMinSubArrayLen(10, i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil27.findMinSubArrayLen((int)(short)100, i_array51);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int i70 = intArrayUtil56.findMinSubArrayLen((-1), i_array67);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    int i81 = intArrayUtil56.threeSumClosest(i_array78, (-1));
    int i82 = intArrayUtil27.findMinViaIteration(i_array78);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array86 = new int[] { (byte)-1, (byte)10 };
    int i87 = intArrayUtil83.removeDuplicateElements(i_array86);
    int i89 = intArrayUtil27.threeSumClosest(i_array86, (int)(byte)-1);
    int i91 = intArrayUtil12.findKthLargestViaQuickSort(i_array86, (int)(short)-1);
    int i92 = intArrayUtil0.removeDuplicateElements(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 2);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array46 = new int[] { (byte)-1, (byte)10 };
    int i47 = intArrayUtil43.removeDuplicateElements(i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    int i66 = intArrayUtil49.findKthLargestViaQuickSort(i_array61, (-3));
    int i68 = intArrayUtil48.threeSumClosest(i_array61, 5);
    int i69 = intArrayUtil43.removeDuplicateElements(i_array61);
    int i70 = intArrayUtil0.removeDuplicateElements(i_array61);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int[] i_array79 = new int[] { '4', (byte)0 };
    int i80 = intArrayUtil72.findMinSubArrayLen(0, i_array79);
    int i82 = intArrayUtil71.threeSumClosest(i_array79, (int)(byte)-1);
    int i83 = intArrayUtil0.findMinViaIteration(i_array79);
    int[] i_array84 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i85 = intArrayUtil0.findMinViaRecursion(i_array84);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    intArrayUtil0.getNextPermutationNumber(i_array5);
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int i33 = intArrayUtil19.findMinSubArrayLen((-1), i_array30);
    int i35 = intArrayUtil18.findKthLargestViaQuickSort(i_array30, (-3));
    int i37 = intArrayUtil17.threeSumClosest(i_array30, 5);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int i52 = intArrayUtil38.findMinSubArrayLen((-1), i_array49);
    int i53 = intArrayUtil17.findMinViaIteration(i_array49);
    int i54 = intArrayUtil16.removeDuplicateElements(i_array49);
    int i56 = intArrayUtil7.threeSumClosest(i_array49, (int)' ');
    int i57 = intArrayUtil0.findMinViaIteration(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array7 = new int[] { (byte)-1, (byte)10 };
    int i8 = intArrayUtil4.removeDuplicateElements(i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i54 = intArrayUtil18.findMinViaIteration(i_array50);
    int i55 = intArrayUtil9.removeDuplicateElements(i_array50);
    int i57 = intArrayUtil4.findKthLargestViaQuickSort(i_array50, 0);
    int i59 = intArrayUtil0.threeSumClosest(i_array50, (int)(byte)100);
    int[] i_array60 = null;
    int i61 = intArrayUtil0.removeDuplicateElements(i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    int i80 = intArrayUtil63.findKthLargestViaQuickSort(i_array75, (-3));
    int i81 = intArrayUtil0.findMinSubArrayLen(52, i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array77 = null;
    int i78 = intArrayUtil0.findMinSubArrayLen((int)' ', i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int i42 = intArrayUtil28.findMinSubArrayLen((-1), i_array39);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    int i53 = intArrayUtil28.threeSumClosest(i_array50, (-1));
    int i54 = intArrayUtil26.findMinSubArrayLen((int)(short)100, i_array50);
    int i55 = intArrayUtil0.removeDuplicateElements(i_array50);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array58);
    int[] i_array62 = null;
    int i63 = intArrayUtil0.removeDuplicateElements(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    int[] i_array43 = null;
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array43, (-3));
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int i80 = intArrayUtil66.findMinSubArrayLen((-1), i_array77);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int[] i_array88 = new int[] { '4', (byte)0 };
    int i89 = intArrayUtil81.findMinSubArrayLen(0, i_array88);
    int i91 = intArrayUtil66.threeSumClosest(i_array88, (-1));
    int i92 = intArrayUtil64.findMinSubArrayLen((int)(short)100, i_array88);
    int i93 = intArrayUtil55.removeDuplicateElements(i_array88);
    int i95 = intArrayUtil46.threeSumClosest(i_array88, 3);
    intArrayUtil0.getNextPermutationNumber(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int i65 = intArrayUtil51.findMinSubArrayLen((-1), i_array62);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    int i76 = intArrayUtil51.threeSumClosest(i_array73, (-1));
    int i77 = intArrayUtil49.findMinSubArrayLen((int)(short)100, i_array73);
    int i78 = intArrayUtil40.removeDuplicateElements(i_array73);
    int i79 = intArrayUtil39.findMinViaIteration(i_array73);
    int i80 = intArrayUtil0.findMinViaRecursion(i_array73);
    int[] i_array86 = new int[] { 10, 10, 10, 100, 10 };
    int i87 = intArrayUtil0.findMinViaRecursion(i_array86);
    int[] i_array89 = null;
    int i90 = intArrayUtil0.findMinSubArrayLen((int)'#', i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    int i48 = intArrayUtil31.findKthLargestViaQuickSort(i_array43, (-3));
    int i50 = intArrayUtil30.threeSumClosest(i_array43, 5);
    int i52 = intArrayUtil0.threeSumClosest(i_array43, 1);
    int[] i_array53 = null;
    intArrayUtil0.getNextPermutationNumber(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    int i43 = intArrayUtil0.threeSumClosest(i_array34, 2);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil0.findMinViaRecursion(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    int i20 = intArrayUtil3.findKthLargestViaQuickSort(i_array15, (-3));
    int i22 = intArrayUtil2.threeSumClosest(i_array15, 5);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i38 = intArrayUtil2.findMinViaIteration(i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int[] i_array67 = new int[] { '4', (byte)0 };
    int i68 = intArrayUtil60.findMinSubArrayLen(0, i_array67);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int i74 = intArrayUtil60.findMinSubArrayLen((-1), i_array71);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i85 = intArrayUtil60.threeSumClosest(i_array82, (-1));
    int i86 = intArrayUtil58.findMinSubArrayLen((int)(short)100, i_array82);
    int i87 = intArrayUtil49.removeDuplicateElements(i_array82);
    int i89 = intArrayUtil40.threeSumClosest(i_array82, 3);
    intArrayUtil1.getNextPermutationNumber(i_array82);
    int i91 = intArrayUtil0.findMinViaRecursion(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int i40 = intArrayUtil0.findMinViaIteration(i_array34);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i78 = intArrayUtil42.findMinViaIteration(i_array74);
    int i79 = intArrayUtil0.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    int i92 = intArrayUtil81.findMinSubArrayLen(1, i_array90);
    int i93 = intArrayUtil0.findMinSubArrayLen((-3), i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i88 = intArrayUtil63.threeSumClosest(i_array85, (-1));
    int i89 = intArrayUtil61.findMinSubArrayLen((int)(short)100, i_array85);
    int i90 = intArrayUtil52.removeDuplicateElements(i_array85);
    int i92 = intArrayUtil43.threeSumClosest(i_array85, 3);
    intArrayUtil0.getNextPermutationNumber(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    int i11 = intArrayUtil0.threeSumClosest(i_array8, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    int[] i_array22 = null;
    intArrayUtil13.getNextPermutationNumber(i_array22);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int i50 = intArrayUtil36.findMinSubArrayLen((-1), i_array47);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    int i61 = intArrayUtil36.threeSumClosest(i_array58, (-1));
    int i62 = intArrayUtil34.findMinSubArrayLen((int)(short)100, i_array58);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i88 = intArrayUtil63.threeSumClosest(i_array85, (-1));
    int i89 = intArrayUtil34.findMinViaIteration(i_array85);
    util.IntArrayUtil intArrayUtil90 = new util.IntArrayUtil();
    int[] i_array93 = new int[] { (byte)-1, (byte)10 };
    int i94 = intArrayUtil90.removeDuplicateElements(i_array93);
    int i96 = intArrayUtil34.threeSumClosest(i_array93, (int)(byte)-1);
    int i97 = intArrayUtil24.findMinSubArrayLen((int)(short)10, i_array93);
    int i98 = intArrayUtil13.findMinViaIteration(i_array93);
    int i99 = intArrayUtil0.findMinSubArrayLen((-4), i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 1);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array7 = new int[] { (byte)-1, (byte)10 };
    int i8 = intArrayUtil4.removeDuplicateElements(i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i54 = intArrayUtil18.findMinViaIteration(i_array50);
    int i55 = intArrayUtil9.removeDuplicateElements(i_array50);
    int i57 = intArrayUtil4.findKthLargestViaQuickSort(i_array50, 0);
    int i59 = intArrayUtil0.threeSumClosest(i_array50, (int)(byte)100);
    int[] i_array60 = null;
    int i61 = intArrayUtil0.removeDuplicateElements(i_array60);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    int i73 = intArrayUtil62.findMinSubArrayLen(1, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int[] i_array81 = new int[] { '4', (byte)0 };
    int i82 = intArrayUtil74.findMinSubArrayLen(0, i_array81);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    int[] i_array85 = new int[] {  };
    int i87 = intArrayUtil84.findKthLargestViaQuickSort(i_array85, (-5));
    int i88 = intArrayUtil74.findMinSubArrayLen((-1), i_array85);
    int i89 = intArrayUtil62.findMinViaIteration(i_array85);
    // The following exception was thrown during execution in test generation
    try {
    int i90 = intArrayUtil0.findMinViaRecursion(i_array85);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == (-1));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int i65 = intArrayUtil51.findMinSubArrayLen((-1), i_array62);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    int i76 = intArrayUtil51.threeSumClosest(i_array73, (-1));
    int i77 = intArrayUtil49.findMinSubArrayLen((int)(short)100, i_array73);
    int i78 = intArrayUtil40.removeDuplicateElements(i_array73);
    int i79 = intArrayUtil39.findMinViaIteration(i_array73);
    int i80 = intArrayUtil0.findMinViaRecursion(i_array73);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i92 = intArrayUtil81.threeSumClosest(i_array89, (int)(byte)-1);
    intArrayUtil0.getNextPermutationNumber(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    intArrayUtil0.getNextPermutationNumber(i_array68);
    int[] i_array73 = null;
    int i74 = intArrayUtil0.removeDuplicateElements(i_array73);
    int[] i_array75 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i77 = intArrayUtil0.threeSumClosest(i_array75, 2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    int i45 = intArrayUtil28.findKthLargestViaQuickSort(i_array40, (-3));
    int i47 = intArrayUtil27.threeSumClosest(i_array40, 5);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int[] i_array67 = new int[] { '4', (byte)0 };
    int i68 = intArrayUtil60.findMinSubArrayLen(0, i_array67);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int i74 = intArrayUtil60.findMinSubArrayLen((-1), i_array71);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i85 = intArrayUtil60.threeSumClosest(i_array82, (-1));
    int i86 = intArrayUtil58.findMinSubArrayLen((int)(short)100, i_array82);
    int i87 = intArrayUtil49.removeDuplicateElements(i_array82);
    int i88 = intArrayUtil48.findMinViaRecursion(i_array82);
    int i89 = intArrayUtil27.removeDuplicateElements(i_array82);
    int i91 = intArrayUtil0.threeSumClosest(i_array82, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    int i11 = intArrayUtil0.threeSumClosest(i_array8, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int i38 = intArrayUtil24.findMinSubArrayLen((-1), i_array35);
    int i40 = intArrayUtil23.findKthLargestViaQuickSort(i_array35, (-3));
    int i42 = intArrayUtil22.threeSumClosest(i_array35, 5);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i58 = intArrayUtil22.findMinViaIteration(i_array54);
    int i59 = intArrayUtil21.removeDuplicateElements(i_array54);
    int i61 = intArrayUtil12.threeSumClosest(i_array54, (int)' ');
    int[] i_array62 = null;
    int i63 = intArrayUtil12.findMinViaIteration(i_array62);
    int[] i_array70 = new int[] { (short)0, '#', (byte)0, (short)0, '#', '#' };
    intArrayUtil12.getNextPermutationNumber(i_array70);
    int[] i_array72 = null;
    intArrayUtil12.getNextPermutationNumber(i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i84 = intArrayUtil12.findMinSubArrayLen((int)'4', i_array82);
    int i86 = intArrayUtil0.findKthLargestViaQuickSort(i_array82, (-1));
    int[] i_array87 = null;
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int i27 = intArrayUtil13.findMinSubArrayLen((-1), i_array24);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    int i38 = intArrayUtil13.threeSumClosest(i_array35, (-1));
    int i39 = intArrayUtil11.findMinSubArrayLen((int)(short)100, i_array35);
    int i40 = intArrayUtil2.removeDuplicateElements(i_array35);
    int i41 = intArrayUtil1.findMinViaIteration(i_array35);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array45 = new int[] { (byte)-1, (byte)10 };
    int i46 = intArrayUtil42.removeDuplicateElements(i_array45);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    int i74 = intArrayUtil57.findKthLargestViaQuickSort(i_array69, (-3));
    int i76 = intArrayUtil56.threeSumClosest(i_array69, 5);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    util.IntArrayUtil intArrayUtil87 = new util.IntArrayUtil();
    int[] i_array88 = new int[] {  };
    int i90 = intArrayUtil87.findKthLargestViaQuickSort(i_array88, (-5));
    int i91 = intArrayUtil77.findMinSubArrayLen((-1), i_array88);
    int i92 = intArrayUtil56.findMinViaIteration(i_array88);
    int i93 = intArrayUtil47.removeDuplicateElements(i_array88);
    int i95 = intArrayUtil42.findKthLargestViaQuickSort(i_array88, 0);
    int i96 = intArrayUtil1.findMinViaIteration(i_array88);
    int i97 = intArrayUtil0.findMinViaIteration(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == (-1));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    int i57 = intArrayUtil40.findKthLargestViaQuickSort(i_array52, (-3));
    int i59 = intArrayUtil39.threeSumClosest(i_array52, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i60 = intArrayUtil0.findMinViaRecursion(i_array52);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i54 = intArrayUtil43.findMinSubArrayLen(1, i_array52);
    int i56 = intArrayUtil0.findKthLargestViaQuickSort(i_array52, 1);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    int i74 = intArrayUtil57.findKthLargestViaQuickSort(i_array69, (-3));
    int i75 = intArrayUtil0.removeDuplicateElements(i_array69);
    int[] i_array76 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i77 = intArrayUtil0.findMinViaRecursion(i_array76);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    int[] i_array43 = null;
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array43, (-3));
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array49 = new int[] { (byte)-1, (byte)10 };
    int i50 = intArrayUtil46.removeDuplicateElements(i_array49);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    int i69 = intArrayUtil52.findKthLargestViaQuickSort(i_array64, (-3));
    int i71 = intArrayUtil51.threeSumClosest(i_array64, 5);
    int i72 = intArrayUtil46.removeDuplicateElements(i_array64);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array83 = new int[] { '4', (byte)0 };
    int i84 = intArrayUtil76.findMinSubArrayLen(0, i_array83);
    util.IntArrayUtil intArrayUtil86 = new util.IntArrayUtil();
    int[] i_array87 = new int[] {  };
    int i89 = intArrayUtil86.findKthLargestViaQuickSort(i_array87, (-5));
    int i90 = intArrayUtil76.findMinSubArrayLen((-1), i_array87);
    int i92 = intArrayUtil75.findKthLargestViaQuickSort(i_array87, (-3));
    int i94 = intArrayUtil74.threeSumClosest(i_array87, 5);
    int i95 = intArrayUtil46.findMinSubArrayLen((int)(byte)0, i_array87);
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int[] i_array40 = null;
    intArrayUtil1.getNextPermutationNumber(i_array40);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int i68 = intArrayUtil54.findMinSubArrayLen((-1), i_array65);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    int i79 = intArrayUtil54.threeSumClosest(i_array76, (-1));
    int i80 = intArrayUtil52.findMinSubArrayLen((int)(short)100, i_array76);
    int i81 = intArrayUtil43.removeDuplicateElements(i_array76);
    int i82 = intArrayUtil42.findMinViaRecursion(i_array76);
    intArrayUtil1.getNextPermutationNumber(i_array76);
    int i84 = intArrayUtil0.findMinViaRecursion(i_array76);
    int[] i_array85 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i87 = intArrayUtil0.threeSumClosest(i_array85, 52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i55 = intArrayUtil0.findKthLargestViaQuickSort(i_array50, (int)(short)0);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    int i75 = intArrayUtil58.findKthLargestViaQuickSort(i_array70, (-3));
    int i77 = intArrayUtil57.threeSumClosest(i_array70, 5);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i93 = intArrayUtil57.findMinViaIteration(i_array89);
    int i94 = intArrayUtil56.removeDuplicateElements(i_array89);
    int i96 = intArrayUtil0.findKthLargestViaQuickSort(i_array89, (int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    int i26 = intArrayUtil1.threeSumClosest(i_array23, (-1));
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    int i56 = intArrayUtil31.threeSumClosest(i_array53, (-1));
    int i57 = intArrayUtil29.findMinSubArrayLen((int)(short)100, i_array53);
    int i58 = intArrayUtil27.findMinSubArrayLen(2, i_array53);
    int i59 = intArrayUtil1.removeDuplicateElements(i_array53);
    int i61 = intArrayUtil0.threeSumClosest(i_array53, 0);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    int i73 = intArrayUtil62.threeSumClosest(i_array70, (int)(byte)-1);
    int i74 = intArrayUtil0.findMinViaIteration(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int[] i_array21 = new int[] { '4', (byte)0 };
    int i22 = intArrayUtil14.findMinSubArrayLen(0, i_array21);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int i28 = intArrayUtil14.findMinSubArrayLen((-1), i_array25);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    int i39 = intArrayUtil14.threeSumClosest(i_array36, (-1));
    int i40 = intArrayUtil12.findMinSubArrayLen((int)(short)100, i_array36);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    int i66 = intArrayUtil41.threeSumClosest(i_array63, (-1));
    int i67 = intArrayUtil12.findMinViaIteration(i_array63);
    int i69 = intArrayUtil0.findKthLargestViaQuickSort(i_array63, (-4));
    int[] i_array70 = null;
    int i71 = intArrayUtil0.findMinViaIteration(i_array70);
    int[] i_array72 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i74 = intArrayUtil0.threeSumClosest(i_array72, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == (-1));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    int[] i_array9 = null;
    intArrayUtil0.getNextPermutationNumber(i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int[] i_array44 = new int[] { '4', (byte)0 };
    int i45 = intArrayUtil37.findMinSubArrayLen(0, i_array44);
    int i47 = intArrayUtil22.threeSumClosest(i_array44, (-1));
    int i48 = intArrayUtil20.findMinSubArrayLen((int)(short)100, i_array44);
    int i49 = intArrayUtil11.removeDuplicateElements(i_array44);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i78 = intArrayUtil53.threeSumClosest(i_array75, (-1));
    int i79 = intArrayUtil51.findMinSubArrayLen((int)(short)100, i_array75);
    int i80 = intArrayUtil11.findMinSubArrayLen((int)(byte)10, i_array75);
    intArrayUtil0.getNextPermutationNumber(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i60 = intArrayUtil22.removeDuplicateElements(i_array55);
    int i61 = intArrayUtil21.findMinViaRecursion(i_array55);
    int i62 = intArrayUtil0.removeDuplicateElements(i_array55);
    int[] i_array63 = null;
    intArrayUtil0.getNextPermutationNumber(i_array63);
    int[] i_array65 = null;
    int i66 = intArrayUtil0.removeDuplicateElements(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    int i39 = intArrayUtil0.findKthLargestViaQuickSort(i_array33, (int)(short)-1);
    int[] i_array40 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i41 = intArrayUtil0.findMinViaRecursion(i_array40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int i23 = intArrayUtil9.findMinSubArrayLen((-1), i_array20);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int i42 = intArrayUtil28.findMinSubArrayLen((-1), i_array39);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    int i53 = intArrayUtil28.threeSumClosest(i_array50, (-1));
    int i54 = intArrayUtil26.findMinSubArrayLen((int)(short)100, i_array50);
    int i55 = intArrayUtil24.findMinSubArrayLen(2, i_array50);
    int i56 = intArrayUtil9.findMinViaIteration(i_array50);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    int[] i_array77 = new int[] {  };
    int i79 = intArrayUtil76.findKthLargestViaQuickSort(i_array77, (-5));
    int[] i_array83 = new int[] { '4', (byte)0 };
    int i84 = intArrayUtil76.findMinSubArrayLen(0, i_array83);
    int i86 = intArrayUtil61.threeSumClosest(i_array83, (-1));
    int i87 = intArrayUtil59.findMinSubArrayLen((int)(short)100, i_array83);
    int i88 = intArrayUtil57.findMinSubArrayLen(2, i_array83);
    intArrayUtil9.getNextPermutationNumber(i_array83);
    int i90 = intArrayUtil0.findMinViaIteration(i_array83);
    int[] i_array91 = null;
    int i92 = intArrayUtil0.findMinViaIteration(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    intArrayUtil0.getNextPermutationNumber(i_array5);
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int i23 = intArrayUtil9.findMinSubArrayLen((-1), i_array20);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    int i34 = intArrayUtil9.threeSumClosest(i_array31, (-1));
    int i35 = intArrayUtil7.findMinSubArrayLen((int)(short)100, i_array31);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    int i72 = intArrayUtil47.threeSumClosest(i_array69, (-1));
    int i73 = intArrayUtil45.findMinSubArrayLen((int)(short)100, i_array69);
    int i74 = intArrayUtil36.removeDuplicateElements(i_array69);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int[] i_array82 = new int[] { '4', (byte)0 };
    int i83 = intArrayUtil75.findMinSubArrayLen(0, i_array82);
    int i84 = intArrayUtil36.findMinViaRecursion(i_array82);
    int i85 = intArrayUtil7.findMinViaIteration(i_array82);
    intArrayUtil0.getNextPermutationNumber(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int i40 = intArrayUtil26.findMinSubArrayLen((-1), i_array37);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array37, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    int i50 = intArrayUtil39.threeSumClosest(i_array47, (int)(byte)-1);
    int i51 = intArrayUtil0.findMinViaRecursion(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int i49 = intArrayUtil35.findMinSubArrayLen((-1), i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    int i60 = intArrayUtil35.threeSumClosest(i_array57, (-1));
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil61.findMinSubArrayLen(2, i_array87);
    int i93 = intArrayUtil35.removeDuplicateElements(i_array87);
    int i95 = intArrayUtil34.threeSumClosest(i_array87, 0);
    int i96 = intArrayUtil30.findMinViaIteration(i_array87);
    int i97 = intArrayUtil0.findMinViaIteration(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    int i57 = intArrayUtil32.threeSumClosest(i_array54, (-1));
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    int i87 = intArrayUtil62.threeSumClosest(i_array84, (-1));
    int i88 = intArrayUtil60.findMinSubArrayLen((int)(short)100, i_array84);
    int i89 = intArrayUtil58.findMinSubArrayLen(2, i_array84);
    int i90 = intArrayUtil32.removeDuplicateElements(i_array84);
    int i92 = intArrayUtil31.threeSumClosest(i_array84, 0);
    int i93 = intArrayUtil27.findMinViaIteration(i_array84);
    intArrayUtil0.getNextPermutationNumber(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array42 = new int[] { (byte)-1, (byte)10 };
    int i43 = intArrayUtil39.removeDuplicateElements(i_array42);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    int i62 = intArrayUtil45.findKthLargestViaQuickSort(i_array57, (-3));
    int i64 = intArrayUtil44.threeSumClosest(i_array57, 5);
    int i65 = intArrayUtil39.removeDuplicateElements(i_array57);
    int i66 = intArrayUtil0.findMinViaIteration(i_array57);
    int[] i_array68 = null;
    int i69 = intArrayUtil0.findMinSubArrayLen(0, i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    int i62 = intArrayUtil45.findKthLargestViaQuickSort(i_array57, (-3));
    int i64 = intArrayUtil44.threeSumClosest(i_array57, 5);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    int i80 = intArrayUtil44.findMinViaIteration(i_array76);
    intArrayUtil43.getNextPermutationNumber(i_array76);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    util.IntArrayUtil intArrayUtil92 = new util.IntArrayUtil();
    int[] i_array93 = new int[] {  };
    int i95 = intArrayUtil92.findKthLargestViaQuickSort(i_array93, (-5));
    int i96 = intArrayUtil82.findMinSubArrayLen((-1), i_array93);
    int i98 = intArrayUtil43.findKthLargestViaQuickSort(i_array93, (int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    int i99 = intArrayUtil0.findMinViaRecursion(i_array93);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    intArrayUtil0.getNextPermutationNumber(i_array5);
    util.IntArrayUtil intArrayUtil8 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int[] i_array17 = new int[] { '4', (byte)0 };
    int i18 = intArrayUtil10.findMinSubArrayLen(0, i_array17);
    int i19 = intArrayUtil8.findMinSubArrayLen(1, i_array17);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int[] i_array44 = new int[] { '4', (byte)0 };
    int i45 = intArrayUtil37.findMinSubArrayLen(0, i_array44);
    int i47 = intArrayUtil22.threeSumClosest(i_array44, (-1));
    int i48 = intArrayUtil20.findMinSubArrayLen((int)(short)100, i_array44);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    int i74 = intArrayUtil49.threeSumClosest(i_array71, (-1));
    int i75 = intArrayUtil20.findMinViaIteration(i_array71);
    int i77 = intArrayUtil8.findKthLargestViaQuickSort(i_array71, (-4));
    int i78 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    int i69 = intArrayUtil44.threeSumClosest(i_array66, (-1));
    int i70 = intArrayUtil15.findMinViaIteration(i_array66);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array74 = new int[] { (byte)-1, (byte)10 };
    int i75 = intArrayUtil71.removeDuplicateElements(i_array74);
    int i77 = intArrayUtil15.threeSumClosest(i_array74, (int)(byte)-1);
    int i79 = intArrayUtil0.findKthLargestViaQuickSort(i_array74, (int)(short)-1);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array83 = new int[] { (byte)-1, (byte)10 };
    int i84 = intArrayUtil80.removeDuplicateElements(i_array83);
    int i85 = intArrayUtil0.removeDuplicateElements(i_array83);
    int[] i_array86 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i88 = intArrayUtil0.threeSumClosest(i_array86, 5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i54 = intArrayUtil43.findMinSubArrayLen(1, i_array52);
    int i56 = intArrayUtil0.findKthLargestViaQuickSort(i_array52, 1);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i62 = intArrayUtil0.threeSumClosest(i_array58, (-5));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i47 = intArrayUtil30.findKthLargestViaQuickSort(i_array42, (-3));
    int i49 = intArrayUtil29.threeSumClosest(i_array42, 5);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    int i65 = intArrayUtil29.findMinViaIteration(i_array61);
    int i66 = intArrayUtil0.removeDuplicateElements(i_array61);
    int[] i_array67 = null;
    int i69 = intArrayUtil0.findKthLargestViaQuickSort(i_array67, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    int i39 = intArrayUtil0.findKthLargestViaQuickSort(i_array33, (int)(short)-1);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array44 = new int[] { (byte)-1, (byte)10 };
    int i45 = intArrayUtil41.removeDuplicateElements(i_array44);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    int i65 = intArrayUtil48.findKthLargestViaQuickSort(i_array60, (-3));
    int i67 = intArrayUtil47.threeSumClosest(i_array60, 5);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int i82 = intArrayUtil68.findMinSubArrayLen((-1), i_array79);
    int i83 = intArrayUtil47.findMinViaIteration(i_array79);
    int i84 = intArrayUtil46.removeDuplicateElements(i_array79);
    int i85 = intArrayUtil41.removeDuplicateElements(i_array79);
    int i86 = intArrayUtil0.findMinSubArrayLen((-2), i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i7 = intArrayUtil0.threeSumClosest(i_array5, (-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int i38 = intArrayUtil24.findMinSubArrayLen((-1), i_array35);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i49 = intArrayUtil24.threeSumClosest(i_array46, (-1));
    int i50 = intArrayUtil22.findMinSubArrayLen((int)(short)100, i_array46);
    int i51 = intArrayUtil13.removeDuplicateElements(i_array46);
    int i52 = intArrayUtil12.findMinViaRecursion(i_array46);
    int i53 = intArrayUtil0.findMinViaIteration(i_array46);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    int i87 = intArrayUtil70.findKthLargestViaQuickSort(i_array82, (-3));
    int i89 = intArrayUtil55.threeSumClosest(i_array82, 5);
    int i90 = intArrayUtil0.findMinSubArrayLen(0, i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int i19 = intArrayUtil5.findMinSubArrayLen((-1), i_array16);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    int i30 = intArrayUtil5.threeSumClosest(i_array27, (-1));
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int i49 = intArrayUtil35.findMinSubArrayLen((-1), i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    int i60 = intArrayUtil35.threeSumClosest(i_array57, (-1));
    int i61 = intArrayUtil33.findMinSubArrayLen((int)(short)100, i_array57);
    int i62 = intArrayUtil31.findMinSubArrayLen(2, i_array57);
    int i63 = intArrayUtil5.removeDuplicateElements(i_array57);
    int i64 = intArrayUtil0.removeDuplicateElements(i_array57);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int[] i_array93 = new int[] { (byte)1, (short)0 };
    int i94 = intArrayUtil65.findMinViaRecursion(i_array93);
    // The following exception was thrown during execution in test generation
    try {
    int i96 = intArrayUtil0.findKthLargestViaQuickSort(i_array93, (int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int i41 = intArrayUtil27.findMinSubArrayLen((-1), i_array38);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    int i52 = intArrayUtil27.threeSumClosest(i_array49, (-1));
    int[] i_array55 = new int[] { (byte)1, (short)0 };
    int i56 = intArrayUtil27.findMinViaRecursion(i_array55);
    int i58 = intArrayUtil12.threeSumClosest(i_array55, 5);
    int i59 = intArrayUtil0.findMinViaRecursion(i_array55);
    int[] i_array60 = null;
    intArrayUtil0.getNextPermutationNumber(i_array60);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    int i80 = intArrayUtil63.findKthLargestViaQuickSort(i_array75, (-3));
    int i82 = intArrayUtil62.threeSumClosest(i_array75, 5);
    int i83 = intArrayUtil0.findMinViaIteration(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int i51 = intArrayUtil0.findMinSubArrayLen(6, i_array48);
    int[] i_array52 = null;
    intArrayUtil0.getNextPermutationNumber(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int i56 = intArrayUtil42.findMinSubArrayLen((-1), i_array53);
    int i58 = intArrayUtil41.findKthLargestViaQuickSort(i_array53, (-3));
    int i60 = intArrayUtil40.threeSumClosest(i_array53, 5);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i76 = intArrayUtil40.findMinViaIteration(i_array72);
    int i78 = intArrayUtil39.findKthLargestViaQuickSort(i_array72, (int)(short)-1);
    int i79 = intArrayUtil0.findMinViaIteration(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == (-1));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int i65 = intArrayUtil51.findMinSubArrayLen((-1), i_array62);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    int i76 = intArrayUtil51.threeSumClosest(i_array73, (-1));
    int i77 = intArrayUtil49.findMinSubArrayLen((int)(short)100, i_array73);
    int i78 = intArrayUtil40.removeDuplicateElements(i_array73);
    int i79 = intArrayUtil0.findMinSubArrayLen(2, i_array73);
    int[] i_array80 = null;
    int i81 = intArrayUtil0.removeDuplicateElements(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil0.findMinViaRecursion(i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int i83 = intArrayUtil69.findMinSubArrayLen((-1), i_array80);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    int[] i_array85 = new int[] {  };
    int i87 = intArrayUtil84.findKthLargestViaQuickSort(i_array85, (-5));
    int[] i_array91 = new int[] { '4', (byte)0 };
    int i92 = intArrayUtil84.findMinSubArrayLen(0, i_array91);
    int i94 = intArrayUtil69.threeSumClosest(i_array91, (-1));
    int i95 = intArrayUtil67.findMinSubArrayLen((int)(short)100, i_array91);
    int i96 = intArrayUtil58.removeDuplicateElements(i_array91);
    int i98 = intArrayUtil49.threeSumClosest(i_array91, 3);
    int i99 = intArrayUtil0.removeDuplicateElements(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 2);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int i33 = intArrayUtil19.findMinSubArrayLen((-1), i_array30);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    int i44 = intArrayUtil19.threeSumClosest(i_array41, (-1));
    int[] i_array47 = new int[] { (byte)1, (short)0 };
    int i48 = intArrayUtil19.findMinViaRecursion(i_array47);
    int i49 = intArrayUtil0.findMinSubArrayLen(100, i_array47);
    int[] i_array51 = null;
    int i52 = intArrayUtil0.findMinSubArrayLen(100, i_array51);
    int[] i_array53 = null;
    int i54 = intArrayUtil0.removeDuplicateElements(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int i19 = intArrayUtil5.findMinSubArrayLen((-1), i_array16);
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int[] i_array48 = new int[] { (byte)1, (short)0 };
    int i49 = intArrayUtil20.findMinViaRecursion(i_array48);
    int i51 = intArrayUtil5.threeSumClosest(i_array48, 5);
    int i52 = intArrayUtil0.findMinViaRecursion(i_array48);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i78 = intArrayUtil53.threeSumClosest(i_array75, (-1));
    int[] i_array81 = new int[] { (byte)1, (short)0 };
    int i82 = intArrayUtil53.findMinViaRecursion(i_array81);
    int i83 = intArrayUtil0.removeDuplicateElements(i_array81);
    int[] i_array85 = null;
    int i86 = intArrayUtil0.findMinSubArrayLen(100, i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int i29 = intArrayUtil15.findMinSubArrayLen((-1), i_array26);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    int i40 = intArrayUtil15.threeSumClosest(i_array37, (-1));
    int[] i_array43 = new int[] { (byte)1, (short)0 };
    int i44 = intArrayUtil15.findMinViaRecursion(i_array43);
    int i46 = intArrayUtil0.threeSumClosest(i_array43, 5);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil47.threeSumClosest(i_array55, (int)(byte)-1);
    int i59 = intArrayUtil0.findMinViaRecursion(i_array55);
    int[] i_array63 = new int[] { (-1), (byte)-1, '4' };
    int i64 = intArrayUtil0.findMinViaRecursion(i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int i84 = intArrayUtil70.findMinSubArrayLen((-1), i_array81);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i95 = intArrayUtil70.threeSumClosest(i_array92, (-1));
    int i96 = intArrayUtil68.findMinSubArrayLen((int)(short)100, i_array92);
    int i97 = intArrayUtil66.findMinSubArrayLen(2, i_array92);
    int i98 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i37 = intArrayUtil20.findKthLargestViaQuickSort(i_array32, (-3));
    int i39 = intArrayUtil19.threeSumClosest(i_array32, 5);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int i54 = intArrayUtil40.findMinSubArrayLen((-1), i_array51);
    int i55 = intArrayUtil19.findMinViaIteration(i_array51);
    int i57 = intArrayUtil18.findKthLargestViaQuickSort(i_array51, (int)(short)-1);
    int i59 = intArrayUtil0.threeSumClosest(i_array51, 6);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    int i72 = intArrayUtil61.findMinSubArrayLen(1, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int i87 = intArrayUtil73.findMinSubArrayLen((-1), i_array84);
    int i88 = intArrayUtil61.findMinViaIteration(i_array84);
    int i89 = intArrayUtil0.findMinSubArrayLen((int)(short)1, i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    int i55 = intArrayUtil30.threeSumClosest(i_array52, (-1));
    int i56 = intArrayUtil28.findMinSubArrayLen((int)(short)100, i_array52);
    int i57 = intArrayUtil19.removeDuplicateElements(i_array52);
    int i58 = intArrayUtil18.findMinViaIteration(i_array52);
    int i59 = intArrayUtil0.removeDuplicateElements(i_array52);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    int i78 = intArrayUtil61.findKthLargestViaQuickSort(i_array73, (-3));
    int i80 = intArrayUtil60.threeSumClosest(i_array73, 5);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int[] i_array88 = new int[] { '4', (byte)0 };
    int i89 = intArrayUtil81.findMinSubArrayLen(0, i_array88);
    util.IntArrayUtil intArrayUtil91 = new util.IntArrayUtil();
    int[] i_array92 = new int[] {  };
    int i94 = intArrayUtil91.findKthLargestViaQuickSort(i_array92, (-5));
    int i95 = intArrayUtil81.findMinSubArrayLen((-1), i_array92);
    int i96 = intArrayUtil60.findMinViaIteration(i_array92);
    int i97 = intArrayUtil0.removeDuplicateElements(i_array92);
    int[] i_array98 = null;
    intArrayUtil0.getNextPermutationNumber(i_array98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array76 = null;
    intArrayUtil0.getNextPermutationNumber(i_array76);
    int[] i_array79 = null;
    int i80 = intArrayUtil0.findMinSubArrayLen((-1), i_array79);
    int[] i_array81 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i82 = intArrayUtil0.findMinViaRecursion(i_array81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    int i49 = intArrayUtil0.findMinSubArrayLen((int)(byte)0, i_array41);
    int[] i_array51 = null;
    int i52 = intArrayUtil0.findMinSubArrayLen(0, i_array51);
    int[] i_array53 = new int[] {  };
    int i54 = intArrayUtil0.removeDuplicateElements(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    int i15 = intArrayUtil4.threeSumClosest(i_array12, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int i42 = intArrayUtil28.findMinSubArrayLen((-1), i_array39);
    int i44 = intArrayUtil27.findKthLargestViaQuickSort(i_array39, (-3));
    int i46 = intArrayUtil26.threeSumClosest(i_array39, 5);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i62 = intArrayUtil26.findMinViaIteration(i_array58);
    int i63 = intArrayUtil25.removeDuplicateElements(i_array58);
    int i65 = intArrayUtil16.threeSumClosest(i_array58, (int)' ');
    int[] i_array66 = null;
    int i67 = intArrayUtil16.findMinViaIteration(i_array66);
    int[] i_array74 = new int[] { (short)0, '#', (byte)0, (short)0, '#', '#' };
    intArrayUtil16.getNextPermutationNumber(i_array74);
    int[] i_array76 = null;
    intArrayUtil16.getNextPermutationNumber(i_array76);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int[] i_array86 = new int[] { '4', (byte)0 };
    int i87 = intArrayUtil79.findMinSubArrayLen(0, i_array86);
    int i88 = intArrayUtil16.findMinSubArrayLen((int)'4', i_array86);
    int i90 = intArrayUtil4.findKthLargestViaQuickSort(i_array86, (-1));
    // The following exception was thrown during execution in test generation
    try {
    int i92 = intArrayUtil0.findKthLargestViaQuickSort(i_array86, 5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil0.threeSumClosest(i_array54, (int)(short)100);
    int[] i_array61 = null;
    int i62 = intArrayUtil0.findMinSubArrayLen(10, i_array61);
    int[] i_array63 = null;
    int i64 = intArrayUtil0.removeDuplicateElements(i_array63);
    int[] i_array67 = new int[] { '4', (byte)10 };
    int i69 = intArrayUtil0.threeSumClosest(i_array67, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int i82 = intArrayUtil68.findMinSubArrayLen((-1), i_array79);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int[] i_array90 = new int[] { '4', (byte)0 };
    int i91 = intArrayUtil83.findMinSubArrayLen(0, i_array90);
    int i93 = intArrayUtil68.threeSumClosest(i_array90, (-1));
    int[] i_array96 = new int[] { (byte)1, (short)0 };
    int i97 = intArrayUtil68.findMinViaRecursion(i_array96);
    int i99 = intArrayUtil0.threeSumClosest(i_array96, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == 0);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    int i57 = intArrayUtil32.threeSumClosest(i_array54, (-1));
    int i58 = intArrayUtil30.findMinSubArrayLen((int)(short)100, i_array54);
    int i59 = intArrayUtil21.removeDuplicateElements(i_array54);
    int i61 = intArrayUtil12.threeSumClosest(i_array54, 3);
    int i63 = intArrayUtil0.threeSumClosest(i_array54, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    int i27 = intArrayUtil0.findMinViaIteration(i_array23);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int i44 = intArrayUtil30.findMinSubArrayLen((-1), i_array41);
    int i46 = intArrayUtil29.findKthLargestViaQuickSort(i_array41, (-3));
    int i48 = intArrayUtil28.threeSumClosest(i_array41, 5);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int[] i_array56 = new int[] { '4', (byte)0 };
    int i57 = intArrayUtil49.findMinSubArrayLen(0, i_array56);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int i63 = intArrayUtil49.findMinSubArrayLen((-1), i_array60);
    int i64 = intArrayUtil28.findMinViaIteration(i_array60);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int i84 = intArrayUtil70.findMinSubArrayLen((-1), i_array81);
    util.IntArrayUtil intArrayUtil85 = new util.IntArrayUtil();
    int[] i_array86 = new int[] {  };
    int i88 = intArrayUtil85.findKthLargestViaQuickSort(i_array86, (-5));
    int[] i_array92 = new int[] { '4', (byte)0 };
    int i93 = intArrayUtil85.findMinSubArrayLen(0, i_array92);
    int i95 = intArrayUtil70.threeSumClosest(i_array92, (-1));
    int i96 = intArrayUtil68.findMinSubArrayLen((int)(short)100, i_array92);
    int i97 = intArrayUtil66.findMinSubArrayLen(2, i_array92);
    int i98 = intArrayUtil28.findMinSubArrayLen(4, i_array92);
    intArrayUtil0.getNextPermutationNumber(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 1);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int i41 = intArrayUtil27.findMinSubArrayLen((-1), i_array38);
    int i43 = intArrayUtil26.findKthLargestViaQuickSort(i_array38, (-3));
    int i44 = intArrayUtil0.findMinViaIteration(i_array38);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil54.removeDuplicateElements(i_array87);
    int i94 = intArrayUtil45.threeSumClosest(i_array87, 3);
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    intArrayUtil0.getNextPermutationNumber(i_array5);
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil8 = new util.IntArrayUtil();
    int[] i_array9 = new int[] {  };
    int i11 = intArrayUtil8.findKthLargestViaQuickSort(i_array9, (-5));
    int[] i_array15 = new int[] { '4', (byte)0 };
    int i16 = intArrayUtil8.findMinSubArrayLen(0, i_array15);
    int i18 = intArrayUtil7.threeSumClosest(i_array15, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i37 = intArrayUtil20.findKthLargestViaQuickSort(i_array32, (-3));
    int i39 = intArrayUtil19.threeSumClosest(i_array32, 5);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    int i51 = intArrayUtil40.findMinSubArrayLen(1, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int[] i_array86 = new int[] { '4', (byte)0 };
    int i87 = intArrayUtil79.findMinSubArrayLen(0, i_array86);
    int i89 = intArrayUtil64.threeSumClosest(i_array86, (-1));
    int i90 = intArrayUtil62.findMinSubArrayLen((int)(short)100, i_array86);
    int i91 = intArrayUtil53.removeDuplicateElements(i_array86);
    int i92 = intArrayUtil52.findMinViaRecursion(i_array86);
    int i93 = intArrayUtil40.findMinViaIteration(i_array86);
    intArrayUtil19.getNextPermutationNumber(i_array86);
    int i95 = intArrayUtil7.findMinViaRecursion(i_array86);
    int i96 = intArrayUtil0.findMinViaRecursion(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    int i45 = intArrayUtil0.threeSumClosest(i_array39, 10);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    int i71 = intArrayUtil46.threeSumClosest(i_array68, (-1));
    int[] i_array74 = new int[] { (byte)1, (short)0 };
    int i75 = intArrayUtil46.findMinViaRecursion(i_array74);
    int i76 = intArrayUtil0.removeDuplicateElements(i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    util.IntArrayUtil intArrayUtil87 = new util.IntArrayUtil();
    int[] i_array88 = new int[] {  };
    int i90 = intArrayUtil87.findKthLargestViaQuickSort(i_array88, (-5));
    int i91 = intArrayUtil77.findMinSubArrayLen((-1), i_array88);
    int i93 = intArrayUtil0.findKthLargestViaQuickSort(i_array88, (int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int i31 = intArrayUtil17.findMinSubArrayLen((-1), i_array28);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    int i42 = intArrayUtil17.threeSumClosest(i_array39, (-1));
    int i43 = intArrayUtil15.findMinSubArrayLen((int)(short)100, i_array39);
    int i45 = intArrayUtil0.threeSumClosest(i_array39, 10);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int i60 = intArrayUtil46.findMinSubArrayLen((-1), i_array57);
    int i62 = intArrayUtil0.threeSumClosest(i_array57, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array66 = new int[] { (byte)-1, (byte)10 };
    int i67 = intArrayUtil63.removeDuplicateElements(i_array66);
    int i68 = intArrayUtil0.findMinViaIteration(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == (-1));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int i40 = intArrayUtil26.findMinSubArrayLen((-1), i_array37);
    int i41 = intArrayUtil5.findMinViaIteration(i_array37);
    int i43 = intArrayUtil1.findKthLargestViaQuickSort(i_array37, 0);
    intArrayUtil0.getNextPermutationNumber(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaIteration(i_array38);
    intArrayUtil0.getNextPermutationNumber(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array59 = new int[] { (byte)-1, (byte)10 };
    int i60 = intArrayUtil56.removeDuplicateElements(i_array59);
    int i62 = intArrayUtil0.threeSumClosest(i_array59, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil0.findMinViaRecursion(i_array87);
    int[] i_array93 = null;
    intArrayUtil0.getNextPermutationNumber(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int i41 = intArrayUtil27.findMinSubArrayLen((-1), i_array38);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    int i52 = intArrayUtil27.threeSumClosest(i_array49, (-1));
    int i53 = intArrayUtil25.findMinSubArrayLen((int)(short)100, i_array49);
    int i54 = intArrayUtil16.removeDuplicateElements(i_array49);
    int i55 = intArrayUtil15.findMinViaRecursion(i_array49);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int i81 = intArrayUtil67.findMinSubArrayLen((-1), i_array78);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i92 = intArrayUtil67.threeSumClosest(i_array89, (-1));
    int i93 = intArrayUtil65.findMinSubArrayLen((int)(short)100, i_array89);
    int i94 = intArrayUtil56.removeDuplicateElements(i_array89);
    intArrayUtil15.getNextPermutationNumber(i_array89);
    int i96 = intArrayUtil0.removeDuplicateElements(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 2);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i75 = intArrayUtil50.threeSumClosest(i_array72, (-1));
    int i76 = intArrayUtil48.findMinSubArrayLen((int)(short)100, i_array72);
    int i77 = intArrayUtil39.removeDuplicateElements(i_array72);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i87 = intArrayUtil39.findMinViaRecursion(i_array85);
    int i88 = intArrayUtil0.findMinViaIteration(i_array85);
    int[] i_array89 = null;
    int i90 = intArrayUtil0.findMinViaIteration(i_array89);
    int[] i_array91 = null;
    int i93 = intArrayUtil0.findKthLargestViaQuickSort(i_array91, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    int i39 = intArrayUtil22.findKthLargestViaQuickSort(i_array34, (-3));
    int i41 = intArrayUtil21.threeSumClosest(i_array34, 5);
    int i43 = intArrayUtil0.threeSumClosest(i_array34, 2);
    int[] i_array44 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i45 = intArrayUtil0.findMinViaRecursion(i_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int i23 = intArrayUtil9.findMinSubArrayLen((-1), i_array20);
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int i40 = intArrayUtil26.findMinSubArrayLen((-1), i_array37);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    int i51 = intArrayUtil26.threeSumClosest(i_array48, (-1));
    int i52 = intArrayUtil24.findMinSubArrayLen((int)(short)100, i_array48);
    int i54 = intArrayUtil9.threeSumClosest(i_array48, 10);
    intArrayUtil0.getNextPermutationNumber(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    int[] i_array27 = null;
    int i28 = intArrayUtil0.findMinViaIteration(i_array27);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array41 = new int[] {  };
    int i43 = intArrayUtil40.findKthLargestViaQuickSort(i_array41, (-5));
    int[] i_array47 = new int[] { '4', (byte)0 };
    int i48 = intArrayUtil40.findMinSubArrayLen(0, i_array47);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int i54 = intArrayUtil40.findMinSubArrayLen((-1), i_array51);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    int i65 = intArrayUtil40.threeSumClosest(i_array62, (-1));
    int i66 = intArrayUtil38.findMinSubArrayLen((int)(short)100, i_array62);
    int i67 = intArrayUtil29.removeDuplicateElements(i_array62);
    int i69 = intArrayUtil0.threeSumClosest(i_array62, 0);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    int i87 = intArrayUtil70.findKthLargestViaQuickSort(i_array82, (-3));
    // The following exception was thrown during execution in test generation
    try {
    int i89 = intArrayUtil0.findKthLargestViaQuickSort(i_array82, 5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    int[] i_array68 = null;
    intArrayUtil0.getNextPermutationNumber(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    int i36 = intArrayUtil0.findMinViaIteration(i_array32);
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil37.findMinSubArrayLen(1, i_array46);
    intArrayUtil0.getNextPermutationNumber(i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i75 = intArrayUtil50.threeSumClosest(i_array72, (-1));
    int[] i_array78 = new int[] { (byte)1, (short)0 };
    int i79 = intArrayUtil50.findMinViaRecursion(i_array78);
    int i81 = intArrayUtil0.findKthLargestViaQuickSort(i_array78, (int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int i40 = intArrayUtil0.findMinViaIteration(i_array34);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i78 = intArrayUtil42.findMinViaIteration(i_array74);
    int i79 = intArrayUtil0.findMinSubArrayLen((-1), i_array74);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i91 = intArrayUtil80.findMinSubArrayLen(1, i_array89);
    int i93 = intArrayUtil0.threeSumClosest(i_array89, 100);
    util.IntArrayUtil intArrayUtil94 = new util.IntArrayUtil();
    int[] i_array97 = new int[] { (byte)-1, (byte)10 };
    int i98 = intArrayUtil94.removeDuplicateElements(i_array97);
    int i99 = intArrayUtil0.findMinViaIteration(i_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i99 == (-1));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    int[] i_array9 = null;
    intArrayUtil0.getNextPermutationNumber(i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    int i48 = intArrayUtil23.threeSumClosest(i_array45, (-1));
    int i49 = intArrayUtil21.findMinSubArrayLen((int)(short)100, i_array45);
    int i50 = intArrayUtil12.removeDuplicateElements(i_array45);
    int[] i_array51 = null;
    intArrayUtil12.getNextPermutationNumber(i_array51);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int i91 = intArrayUtil63.findMinSubArrayLen((int)(short)100, i_array87);
    int i92 = intArrayUtil54.removeDuplicateElements(i_array87);
    int i93 = intArrayUtil53.findMinViaRecursion(i_array87);
    intArrayUtil12.getNextPermutationNumber(i_array87);
    int i95 = intArrayUtil11.findMinViaRecursion(i_array87);
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    int i29 = intArrayUtil4.threeSumClosest(i_array26, (-1));
    int i30 = intArrayUtil2.findMinSubArrayLen((int)(short)100, i_array26);
    int i31 = intArrayUtil0.findMinSubArrayLen(2, i_array26);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil37 = new util.IntArrayUtil();
    int[] i_array38 = new int[] {  };
    int i40 = intArrayUtil37.findKthLargestViaQuickSort(i_array38, (-5));
    int[] i_array44 = new int[] { '4', (byte)0 };
    int i45 = intArrayUtil37.findMinSubArrayLen(0, i_array44);
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int i51 = intArrayUtil37.findMinSubArrayLen((-1), i_array48);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    int i62 = intArrayUtil37.threeSumClosest(i_array59, (-1));
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int i81 = intArrayUtil67.findMinSubArrayLen((-1), i_array78);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    int i92 = intArrayUtil67.threeSumClosest(i_array89, (-1));
    int i93 = intArrayUtil65.findMinSubArrayLen((int)(short)100, i_array89);
    int i94 = intArrayUtil63.findMinSubArrayLen(2, i_array89);
    int i95 = intArrayUtil37.removeDuplicateElements(i_array89);
    int i97 = intArrayUtil36.threeSumClosest(i_array89, 0);
    int i98 = intArrayUtil32.findMinViaIteration(i_array89);
    intArrayUtil0.getNextPermutationNumber(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array7 = new int[] { (byte)-1, (byte)10 };
    int i8 = intArrayUtil4.removeDuplicateElements(i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i54 = intArrayUtil18.findMinViaIteration(i_array50);
    int i55 = intArrayUtil9.removeDuplicateElements(i_array50);
    int i57 = intArrayUtil4.findKthLargestViaQuickSort(i_array50, 0);
    int i59 = intArrayUtil0.threeSumClosest(i_array50, (int)(byte)100);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int i76 = intArrayUtil62.findMinSubArrayLen((-1), i_array73);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    int i87 = intArrayUtil62.threeSumClosest(i_array84, (-1));
    int i88 = intArrayUtil60.findMinSubArrayLen((int)(short)100, i_array84);
    int i89 = intArrayUtil0.findMinViaRecursion(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil0.findMinViaRecursion(i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    int i60 = intArrayUtil49.findMinSubArrayLen(1, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i76 = intArrayUtil49.findMinViaIteration(i_array72);
    int i77 = intArrayUtil0.removeDuplicateElements(i_array72);
    int[] i_array78 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i80 = intArrayUtil0.threeSumClosest(i_array78, 52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    int[] i_array7 = new int[] {  };
    int i9 = intArrayUtil6.findKthLargestViaQuickSort(i_array7, (-5));
    int[] i_array13 = new int[] { '4', (byte)0 };
    int i14 = intArrayUtil6.findMinSubArrayLen(0, i_array13);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int i20 = intArrayUtil6.findMinSubArrayLen((-1), i_array17);
    int i22 = intArrayUtil5.findKthLargestViaQuickSort(i_array17, (-3));
    int i24 = intArrayUtil4.threeSumClosest(i_array17, 5);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int[] i_array32 = new int[] { '4', (byte)0 };
    int i33 = intArrayUtil25.findMinSubArrayLen(0, i_array32);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int i39 = intArrayUtil25.findMinSubArrayLen((-1), i_array36);
    int i40 = intArrayUtil4.findMinViaIteration(i_array36);
    int i42 = intArrayUtil0.findKthLargestViaQuickSort(i_array36, 0);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array46 = new int[] { (byte)-1, (byte)10 };
    int i47 = intArrayUtil43.removeDuplicateElements(i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    int i66 = intArrayUtil49.findKthLargestViaQuickSort(i_array61, (-3));
    int i68 = intArrayUtil48.threeSumClosest(i_array61, 5);
    int i69 = intArrayUtil43.removeDuplicateElements(i_array61);
    int i70 = intArrayUtil0.removeDuplicateElements(i_array61);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int[] i_array79 = new int[] { '4', (byte)0 };
    int i80 = intArrayUtil72.findMinSubArrayLen(0, i_array79);
    int i82 = intArrayUtil71.threeSumClosest(i_array79, (int)(byte)-1);
    int i84 = intArrayUtil0.findKthLargestViaQuickSort(i_array79, (-4));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int[] i_array81 = new int[] { '4', (byte)0 };
    int i82 = intArrayUtil74.findMinSubArrayLen(0, i_array81);
    int i84 = intArrayUtil59.threeSumClosest(i_array81, (-1));
    int i85 = intArrayUtil57.findMinSubArrayLen((int)(short)100, i_array81);
    int i86 = intArrayUtil0.findMinSubArrayLen((-1), i_array81);
    int[] i_array87 = null;
    intArrayUtil0.getNextPermutationNumber(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    int i68 = intArrayUtil43.threeSumClosest(i_array65, (-1));
    int i69 = intArrayUtil41.findMinSubArrayLen((int)(short)100, i_array65);
    intArrayUtil0.getNextPermutationNumber(i_array65);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    int i86 = intArrayUtil0.findMinViaIteration(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    int i32 = intArrayUtil15.findKthLargestViaQuickSort(i_array27, (-3));
    int i34 = intArrayUtil0.threeSumClosest(i_array27, 5);
    int[] i_array35 = null;
    int i36 = intArrayUtil0.removeDuplicateElements(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int i46 = intArrayUtil18.findMinSubArrayLen((int)(short)100, i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, 3);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int i67 = intArrayUtil53.findMinSubArrayLen((-1), i_array64);
    int i69 = intArrayUtil52.findKthLargestViaQuickSort(i_array64, (-3));
    int i71 = intArrayUtil51.threeSumClosest(i_array64, 5);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int[] i_array79 = new int[] { '4', (byte)0 };
    int i80 = intArrayUtil72.findMinSubArrayLen(0, i_array79);
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int i86 = intArrayUtil72.findMinSubArrayLen((-1), i_array83);
    int i87 = intArrayUtil51.findMinViaIteration(i_array83);
    intArrayUtil50.getNextPermutationNumber(i_array83);
    int i89 = intArrayUtil0.removeDuplicateElements(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    int i32 = intArrayUtil21.findMinSubArrayLen(1, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int[] i_array41 = new int[] { '4', (byte)0 };
    int i42 = intArrayUtil34.findMinSubArrayLen(0, i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int i59 = intArrayUtil45.findMinSubArrayLen((-1), i_array56);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int[] i_array67 = new int[] { '4', (byte)0 };
    int i68 = intArrayUtil60.findMinSubArrayLen(0, i_array67);
    int i70 = intArrayUtil45.threeSumClosest(i_array67, (-1));
    int i71 = intArrayUtil43.findMinSubArrayLen((int)(short)100, i_array67);
    int i72 = intArrayUtil34.removeDuplicateElements(i_array67);
    int i73 = intArrayUtil33.findMinViaRecursion(i_array67);
    int i74 = intArrayUtil21.findMinViaIteration(i_array67);
    intArrayUtil0.getNextPermutationNumber(i_array67);
    int[] i_array82 = new int[] { (short)-1, 10, (byte)0, 10, (short)-1 };
    int i83 = intArrayUtil0.findMinSubArrayLen((int)(byte)10, i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 1);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    int[] i_array9 = null;
    intArrayUtil0.getNextPermutationNumber(i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int i27 = intArrayUtil13.findMinSubArrayLen((-1), i_array24);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    int i38 = intArrayUtil13.threeSumClosest(i_array35, (-1));
    int i39 = intArrayUtil11.findMinSubArrayLen((int)(short)100, i_array35);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int[] i_array49 = new int[] { '4', (byte)0 };
    int i50 = intArrayUtil42.findMinSubArrayLen(0, i_array49);
    int i51 = intArrayUtil40.findMinSubArrayLen(1, i_array49);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int[] i_array60 = new int[] { '4', (byte)0 };
    int i61 = intArrayUtil53.findMinSubArrayLen(0, i_array60);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int[] i_array71 = new int[] { '4', (byte)0 };
    int i72 = intArrayUtil64.findMinSubArrayLen(0, i_array71);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int i78 = intArrayUtil64.findMinSubArrayLen((-1), i_array75);
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int[] i_array86 = new int[] { '4', (byte)0 };
    int i87 = intArrayUtil79.findMinSubArrayLen(0, i_array86);
    int i89 = intArrayUtil64.threeSumClosest(i_array86, (-1));
    int i90 = intArrayUtil62.findMinSubArrayLen((int)(short)100, i_array86);
    int i91 = intArrayUtil53.removeDuplicateElements(i_array86);
    int i92 = intArrayUtil52.findMinViaRecursion(i_array86);
    int i93 = intArrayUtil40.findMinViaIteration(i_array86);
    int i94 = intArrayUtil11.findMinViaIteration(i_array86);
    intArrayUtil0.getNextPermutationNumber(i_array86);
    int[] i_array96 = null;
    int i98 = intArrayUtil0.findKthLargestViaQuickSort(i_array96, 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    int i45 = intArrayUtil0.removeDuplicateElements(i_array38);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    int i74 = intArrayUtil57.findKthLargestViaQuickSort(i_array69, (-3));
    int i76 = intArrayUtil56.threeSumClosest(i_array69, 5);
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    int[] i_array78 = new int[] {  };
    int i80 = intArrayUtil77.findKthLargestViaQuickSort(i_array78, (-5));
    int[] i_array84 = new int[] { '4', (byte)0 };
    int i85 = intArrayUtil77.findMinSubArrayLen(0, i_array84);
    util.IntArrayUtil intArrayUtil87 = new util.IntArrayUtil();
    int[] i_array88 = new int[] {  };
    int i90 = intArrayUtil87.findKthLargestViaQuickSort(i_array88, (-5));
    int i91 = intArrayUtil77.findMinSubArrayLen((-1), i_array88);
    int i92 = intArrayUtil56.findMinViaIteration(i_array88);
    int i93 = intArrayUtil55.removeDuplicateElements(i_array88);
    int i95 = intArrayUtil46.threeSumClosest(i_array88, (int)' ');
    intArrayUtil0.getNextPermutationNumber(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    int[] i_array63 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i65 = intArrayUtil0.threeSumClosest(i_array63, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int[] i_array75 = new int[] { '4', (byte)0 };
    int i76 = intArrayUtil68.findMinSubArrayLen(0, i_array75);
    int i77 = intArrayUtil0.findMinViaIteration(i_array75);
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil79 = new util.IntArrayUtil();
    int[] i_array80 = new int[] {  };
    int i82 = intArrayUtil79.findKthLargestViaQuickSort(i_array80, (-5));
    int[] i_array86 = new int[] { '4', (byte)0 };
    int i87 = intArrayUtil79.findMinSubArrayLen(0, i_array86);
    int i89 = intArrayUtil78.threeSumClosest(i_array86, (int)(byte)-1);
    int i90 = intArrayUtil0.findMinViaIteration(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int i46 = intArrayUtil18.findMinSubArrayLen((int)(short)100, i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, 3);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    // The following exception was thrown during execution in test generation
    try {
    int i54 = intArrayUtil0.findMinViaRecursion(i_array51);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    int[] i_array27 = null;
    int i28 = intArrayUtil0.findMinViaIteration(i_array27);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i47 = intArrayUtil30.findKthLargestViaQuickSort(i_array42, (-3));
    int i49 = intArrayUtil29.threeSumClosest(i_array42, 5);
    int i50 = intArrayUtil0.findMinViaIteration(i_array42);
    int[] i_array51 = null;
    int i52 = intArrayUtil0.removeDuplicateElements(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array7 = new int[] { (byte)-1, (byte)10 };
    int i8 = intArrayUtil4.removeDuplicateElements(i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil49 = new util.IntArrayUtil();
    int[] i_array50 = new int[] {  };
    int i52 = intArrayUtil49.findKthLargestViaQuickSort(i_array50, (-5));
    int i53 = intArrayUtil39.findMinSubArrayLen((-1), i_array50);
    int i54 = intArrayUtil18.findMinViaIteration(i_array50);
    int i55 = intArrayUtil9.removeDuplicateElements(i_array50);
    int i57 = intArrayUtil4.findKthLargestViaQuickSort(i_array50, 0);
    int i59 = intArrayUtil0.threeSumClosest(i_array50, (int)(byte)100);
    int[] i_array60 = null;
    int i61 = intArrayUtil0.removeDuplicateElements(i_array60);
    int[] i_array62 = null;
    int i64 = intArrayUtil0.findKthLargestViaQuickSort(i_array62, 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    int[] i_array5 = null;
    intArrayUtil0.getNextPermutationNumber(i_array5);
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    int[] i_array19 = new int[] {  };
    int i21 = intArrayUtil18.findKthLargestViaQuickSort(i_array19, (-5));
    int[] i_array25 = new int[] { '4', (byte)0 };
    int i26 = intArrayUtil18.findMinSubArrayLen(0, i_array25);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int i32 = intArrayUtil18.findMinSubArrayLen((-1), i_array29);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    int i43 = intArrayUtil18.threeSumClosest(i_array40, (-1));
    int i44 = intArrayUtil16.findMinSubArrayLen((int)(short)100, i_array40);
    int i45 = intArrayUtil7.removeDuplicateElements(i_array40);
    int[] i_array46 = null;
    intArrayUtil7.getNextPermutationNumber(i_array46);
    int[] i_array48 = null;
    int i49 = intArrayUtil7.findMinViaIteration(i_array48);
    int[] i_array50 = null;
    int i52 = intArrayUtil7.findKthLargestViaQuickSort(i_array50, (-3));
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array57 = new int[] { (byte)-1, (byte)10 };
    int i58 = intArrayUtil54.removeDuplicateElements(i_array57);
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int[] i_array68 = new int[] { '4', (byte)0 };
    int i69 = intArrayUtil61.findMinSubArrayLen(0, i_array68);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int i75 = intArrayUtil61.findMinSubArrayLen((-1), i_array72);
    int i77 = intArrayUtil60.findKthLargestViaQuickSort(i_array72, (-3));
    int i79 = intArrayUtil59.threeSumClosest(i_array72, 5);
    int i80 = intArrayUtil54.removeDuplicateElements(i_array72);
    int i81 = intArrayUtil7.findMinSubArrayLen((int)'#', i_array72);
    util.IntArrayUtil intArrayUtil83 = new util.IntArrayUtil();
    int[] i_array84 = new int[] {  };
    int i86 = intArrayUtil83.findKthLargestViaQuickSort(i_array84, (-5));
    int i87 = intArrayUtil7.findMinSubArrayLen((int)(short)1, i_array84);
    intArrayUtil0.getNextPermutationNumber(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    int i29 = intArrayUtil18.findMinSubArrayLen(1, i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int[] i_array53 = new int[] { '4', (byte)0 };
    int i54 = intArrayUtil46.findMinSubArrayLen(0, i_array53);
    int i56 = intArrayUtil31.threeSumClosest(i_array53, (-1));
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil59 = new util.IntArrayUtil();
    int[] i_array60 = new int[] {  };
    int i62 = intArrayUtil59.findKthLargestViaQuickSort(i_array60, (-5));
    int[] i_array66 = new int[] { '4', (byte)0 };
    int i67 = intArrayUtil59.findMinSubArrayLen(0, i_array66);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int i73 = intArrayUtil59.findMinSubArrayLen((-1), i_array70);
    util.IntArrayUtil intArrayUtil74 = new util.IntArrayUtil();
    int[] i_array75 = new int[] {  };
    int i77 = intArrayUtil74.findKthLargestViaQuickSort(i_array75, (-5));
    int[] i_array81 = new int[] { '4', (byte)0 };
    int i82 = intArrayUtil74.findMinSubArrayLen(0, i_array81);
    int i84 = intArrayUtil59.threeSumClosest(i_array81, (-1));
    int i85 = intArrayUtil57.findMinSubArrayLen((int)(short)100, i_array81);
    int i86 = intArrayUtil31.removeDuplicateElements(i_array81);
    int i87 = intArrayUtil18.findMinSubArrayLen(2, i_array81);
    int i89 = intArrayUtil0.threeSumClosest(i_array81, (-2));
    int[] i_array91 = null;
    int i92 = intArrayUtil0.findMinSubArrayLen(0, i_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    int[] i_array9 = null;
    intArrayUtil0.getNextPermutationNumber(i_array9);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    int i48 = intArrayUtil23.threeSumClosest(i_array45, (-1));
    int i49 = intArrayUtil21.findMinSubArrayLen((int)(short)100, i_array45);
    int i50 = intArrayUtil12.removeDuplicateElements(i_array45);
    int i51 = intArrayUtil11.findMinViaIteration(i_array45);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int[] i_array64 = new int[] { '4', (byte)0 };
    int i65 = intArrayUtil57.findMinSubArrayLen(0, i_array64);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int i71 = intArrayUtil57.findMinSubArrayLen((-1), i_array68);
    util.IntArrayUtil intArrayUtil72 = new util.IntArrayUtil();
    int[] i_array73 = new int[] {  };
    int i75 = intArrayUtil72.findKthLargestViaQuickSort(i_array73, (-5));
    int[] i_array79 = new int[] { '4', (byte)0 };
    int i80 = intArrayUtil72.findMinSubArrayLen(0, i_array79);
    int i82 = intArrayUtil57.threeSumClosest(i_array79, (-1));
    int i83 = intArrayUtil55.findMinSubArrayLen((int)(short)100, i_array79);
    int i84 = intArrayUtil53.findMinSubArrayLen(2, i_array79);
    int i85 = intArrayUtil11.findMinSubArrayLen((int)(byte)100, i_array79);
    int i86 = intArrayUtil0.findMinViaIteration(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    int[] i_array28 = new int[] {  };
    int i30 = intArrayUtil27.findKthLargestViaQuickSort(i_array28, (-5));
    int[] i_array34 = new int[] { '4', (byte)0 };
    int i35 = intArrayUtil27.findMinSubArrayLen(0, i_array34);
    int i37 = intArrayUtil12.threeSumClosest(i_array34, (-1));
    int i38 = intArrayUtil10.findMinSubArrayLen((int)(short)100, i_array34);
    int i39 = intArrayUtil1.removeDuplicateElements(i_array34);
    int[] i_array40 = null;
    intArrayUtil1.getNextPermutationNumber(i_array40);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int i68 = intArrayUtil54.findMinSubArrayLen((-1), i_array65);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    int i79 = intArrayUtil54.threeSumClosest(i_array76, (-1));
    int i80 = intArrayUtil52.findMinSubArrayLen((int)(short)100, i_array76);
    int i81 = intArrayUtil43.removeDuplicateElements(i_array76);
    int i82 = intArrayUtil42.findMinViaRecursion(i_array76);
    intArrayUtil1.getNextPermutationNumber(i_array76);
    int i84 = intArrayUtil0.findMinViaRecursion(i_array76);
    int[] i_array85 = null;
    int i86 = intArrayUtil0.findMinViaIteration(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == (-1));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int[] i_array30 = new int[] { '4', (byte)0 };
    int i31 = intArrayUtil23.findMinSubArrayLen(0, i_array30);
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int i37 = intArrayUtil23.findMinSubArrayLen((-1), i_array34);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int[] i_array45 = new int[] { '4', (byte)0 };
    int i46 = intArrayUtil38.findMinSubArrayLen(0, i_array45);
    int i48 = intArrayUtil23.threeSumClosest(i_array45, (-1));
    int i49 = intArrayUtil21.findMinSubArrayLen((int)(short)100, i_array45);
    int i50 = intArrayUtil12.removeDuplicateElements(i_array45);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    int[] i_array56 = new int[] {  };
    int i58 = intArrayUtil55.findKthLargestViaQuickSort(i_array56, (-5));
    int[] i_array62 = new int[] { '4', (byte)0 };
    int i63 = intArrayUtil55.findMinSubArrayLen(0, i_array62);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int i69 = intArrayUtil55.findMinSubArrayLen((-1), i_array66);
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    int[] i_array71 = new int[] {  };
    int i73 = intArrayUtil70.findKthLargestViaQuickSort(i_array71, (-5));
    int[] i_array77 = new int[] { '4', (byte)0 };
    int i78 = intArrayUtil70.findMinSubArrayLen(0, i_array77);
    int i80 = intArrayUtil55.threeSumClosest(i_array77, (-1));
    int i81 = intArrayUtil53.findMinSubArrayLen((int)(short)100, i_array77);
    int i82 = intArrayUtil51.findMinSubArrayLen(2, i_array77);
    intArrayUtil12.getNextPermutationNumber(i_array77);
    util.IntArrayUtil intArrayUtil84 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil86 = new util.IntArrayUtil();
    int[] i_array87 = new int[] {  };
    int i89 = intArrayUtil86.findKthLargestViaQuickSort(i_array87, (-5));
    int[] i_array93 = new int[] { '4', (byte)0 };
    int i94 = intArrayUtil86.findMinSubArrayLen(0, i_array93);
    int i95 = intArrayUtil84.findMinSubArrayLen(1, i_array93);
    intArrayUtil12.getNextPermutationNumber(i_array93);
    int i98 = intArrayUtil0.threeSumClosest(i_array93, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 0);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int[] i_array19 = new int[] { '4', (byte)0 };
    int i20 = intArrayUtil12.findMinSubArrayLen(0, i_array19);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int i26 = intArrayUtil12.findMinSubArrayLen((-1), i_array23);
    int i28 = intArrayUtil11.findKthLargestViaQuickSort(i_array23, (-3));
    int i30 = intArrayUtil10.threeSumClosest(i_array23, 5);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int i45 = intArrayUtil31.findMinSubArrayLen((-1), i_array42);
    int i46 = intArrayUtil10.findMinViaIteration(i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    int i49 = intArrayUtil0.threeSumClosest(i_array42, (int)' ');
    int[] i_array50 = null;
    int i51 = intArrayUtil0.findMinViaIteration(i_array50);
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int[] i_array61 = new int[] { '4', (byte)0 };
    int i62 = intArrayUtil54.findMinSubArrayLen(0, i_array61);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    int[] i_array65 = new int[] {  };
    int i67 = intArrayUtil64.findKthLargestViaQuickSort(i_array65, (-5));
    int i68 = intArrayUtil54.findMinSubArrayLen((-1), i_array65);
    int i70 = intArrayUtil53.findKthLargestViaQuickSort(i_array65, (-3));
    int i72 = intArrayUtil52.threeSumClosest(i_array65, 5);
    // The following exception was thrown during execution in test generation
    try {
    int i74 = intArrayUtil0.findKthLargestViaQuickSort(i_array65, (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    int i29 = intArrayUtil18.findMinSubArrayLen(1, i_array27);
    int i31 = intArrayUtil0.threeSumClosest(i_array27, (int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    util.IntArrayUtil intArrayUtil25 = new util.IntArrayUtil();
    int[] i_array26 = new int[] {  };
    int i28 = intArrayUtil25.findKthLargestViaQuickSort(i_array26, (-5));
    int i29 = intArrayUtil15.findMinSubArrayLen((-1), i_array26);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    int i40 = intArrayUtil15.threeSumClosest(i_array37, (-1));
    int i41 = intArrayUtil13.findMinSubArrayLen((int)(short)100, i_array37);
    int i42 = intArrayUtil4.removeDuplicateElements(i_array37);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int[] i_array69 = new int[] { '4', (byte)0 };
    int i70 = intArrayUtil62.findMinSubArrayLen(0, i_array69);
    int i72 = intArrayUtil47.threeSumClosest(i_array69, (-1));
    int i73 = intArrayUtil45.findMinSubArrayLen((int)(short)100, i_array69);
    int i74 = intArrayUtil43.findMinSubArrayLen(2, i_array69);
    intArrayUtil4.getNextPermutationNumber(i_array69);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    int i87 = intArrayUtil76.findMinSubArrayLen(1, i_array85);
    intArrayUtil4.getNextPermutationNumber(i_array85);
    int i90 = intArrayUtil0.threeSumClosest(i_array85, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    int i26 = intArrayUtil0.removeDuplicateElements(i_array18);
    int[] i_array27 = null;
    int i28 = intArrayUtil0.findMinViaIteration(i_array27);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    util.IntArrayUtil intArrayUtil55 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int i70 = intArrayUtil56.findMinSubArrayLen((-1), i_array67);
    int i72 = intArrayUtil55.findKthLargestViaQuickSort(i_array67, (-3));
    int i73 = intArrayUtil29.findMinViaIteration(i_array67);
    int i75 = intArrayUtil0.findKthLargestViaQuickSort(i_array67, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil76 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil77 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil78 = new util.IntArrayUtil();
    int[] i_array79 = new int[] {  };
    int i81 = intArrayUtil78.findKthLargestViaQuickSort(i_array79, (-5));
    int[] i_array85 = new int[] { '4', (byte)0 };
    int i86 = intArrayUtil78.findMinSubArrayLen(0, i_array85);
    util.IntArrayUtil intArrayUtil88 = new util.IntArrayUtil();
    int[] i_array89 = new int[] {  };
    int i91 = intArrayUtil88.findKthLargestViaQuickSort(i_array89, (-5));
    int i92 = intArrayUtil78.findMinSubArrayLen((-1), i_array89);
    int i94 = intArrayUtil77.findKthLargestViaQuickSort(i_array89, (-3));
    int i96 = intArrayUtil76.threeSumClosest(i_array89, 5);
    int i97 = intArrayUtil0.removeDuplicateElements(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil27 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    util.IntArrayUtil intArrayUtil38 = new util.IntArrayUtil();
    int[] i_array39 = new int[] {  };
    int i41 = intArrayUtil38.findKthLargestViaQuickSort(i_array39, (-5));
    int i42 = intArrayUtil28.findMinSubArrayLen((-1), i_array39);
    int i44 = intArrayUtil27.findKthLargestViaQuickSort(i_array39, (-3));
    int i46 = intArrayUtil26.threeSumClosest(i_array39, 5);
    int i48 = intArrayUtil0.findKthLargestViaQuickSort(i_array39, (int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil24 = new util.IntArrayUtil();
    int[] i_array25 = new int[] {  };
    int i27 = intArrayUtil24.findKthLargestViaQuickSort(i_array25, (-5));
    int[] i_array31 = new int[] { '4', (byte)0 };
    int i32 = intArrayUtil24.findMinSubArrayLen(0, i_array31);
    util.IntArrayUtil intArrayUtil34 = new util.IntArrayUtil();
    int[] i_array35 = new int[] {  };
    int i37 = intArrayUtil34.findKthLargestViaQuickSort(i_array35, (-5));
    int i38 = intArrayUtil24.findMinSubArrayLen((-1), i_array35);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i49 = intArrayUtil24.threeSumClosest(i_array46, (-1));
    int i50 = intArrayUtil22.findMinSubArrayLen((int)(short)100, i_array46);
    int i51 = intArrayUtil13.removeDuplicateElements(i_array46);
    int i52 = intArrayUtil12.findMinViaRecursion(i_array46);
    int i53 = intArrayUtil0.findMinViaIteration(i_array46);
    int[] i_array54 = null;
    int i55 = intArrayUtil0.removeDuplicateElements(i_array54);
    int[] i_array56 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i57 = intArrayUtil0.findMinViaRecursion(i_array56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    int[] i_array27 = new int[] { (-1), 1, (short)10, (short)1, (byte)0, '4' };
    int i29 = intArrayUtil0.findKthLargestViaQuickSort(i_array27, (int)(byte)-1);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int[] i_array37 = new int[] { '4', (byte)0 };
    int i38 = intArrayUtil30.findMinSubArrayLen(0, i_array37);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i75 = intArrayUtil50.threeSumClosest(i_array72, (-1));
    int i76 = intArrayUtil48.findMinSubArrayLen((int)(short)100, i_array72);
    int i77 = intArrayUtil39.removeDuplicateElements(i_array72);
    int i79 = intArrayUtil30.threeSumClosest(i_array72, 3);
    int i81 = intArrayUtil0.findKthLargestViaQuickSort(i_array72, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 52);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil15 = new util.IntArrayUtil();
    int[] i_array16 = new int[] {  };
    int i18 = intArrayUtil15.findKthLargestViaQuickSort(i_array16, (-5));
    int[] i_array22 = new int[] { '4', (byte)0 };
    int i23 = intArrayUtil15.findMinSubArrayLen(0, i_array22);
    int i25 = intArrayUtil0.threeSumClosest(i_array22, (-1));
    int[] i_array28 = new int[] { (byte)1, (short)0 };
    int i29 = intArrayUtil0.findMinViaRecursion(i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    int i48 = intArrayUtil31.findKthLargestViaQuickSort(i_array43, (-3));
    int i50 = intArrayUtil30.threeSumClosest(i_array43, 5);
    int i52 = intArrayUtil0.threeSumClosest(i_array43, 1);
    int[] i_array54 = null;
    int i55 = intArrayUtil0.findMinSubArrayLen(5, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array59 = new int[] { (byte)-1, (byte)10 };
    int i60 = intArrayUtil56.removeDuplicateElements(i_array59);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i79 = intArrayUtil62.findKthLargestViaQuickSort(i_array74, (-3));
    int i81 = intArrayUtil61.threeSumClosest(i_array74, 5);
    int i82 = intArrayUtil56.removeDuplicateElements(i_array74);
    int i83 = intArrayUtil0.findMinViaIteration(i_array74);
    int[] i_array84 = null;
    int i86 = intArrayUtil0.findKthLargestViaQuickSort(i_array84, (int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int[] i_array24 = new int[] { '4', (byte)0 };
    int i25 = intArrayUtil17.findMinSubArrayLen(0, i_array24);
    int i27 = intArrayUtil2.threeSumClosest(i_array24, (-1));
    int i28 = intArrayUtil0.findMinSubArrayLen((int)(short)100, i_array24);
    util.IntArrayUtil intArrayUtil29 = new util.IntArrayUtil();
    int[] i_array30 = new int[] {  };
    int i32 = intArrayUtil29.findKthLargestViaQuickSort(i_array30, (-5));
    int[] i_array36 = new int[] { '4', (byte)0 };
    int i37 = intArrayUtil29.findMinSubArrayLen(0, i_array36);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int i43 = intArrayUtil29.findMinSubArrayLen((-1), i_array40);
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    int i54 = intArrayUtil29.threeSumClosest(i_array51, (-1));
    int i55 = intArrayUtil0.findMinViaIteration(i_array51);
    int[] i_array58 = new int[] { (byte)0, '#' };
    int i60 = intArrayUtil0.threeSumClosest(i_array58, (-1));
    int[] i_array61 = null;
    int i62 = intArrayUtil0.removeDuplicateElements(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    int i48 = intArrayUtil0.findMinViaRecursion(i_array46);
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    util.IntArrayUtil intArrayUtil75 = new util.IntArrayUtil();
    int[] i_array76 = new int[] {  };
    int i78 = intArrayUtil75.findKthLargestViaQuickSort(i_array76, (-5));
    int i79 = intArrayUtil65.findMinSubArrayLen((-1), i_array76);
    util.IntArrayUtil intArrayUtil80 = new util.IntArrayUtil();
    int[] i_array81 = new int[] {  };
    int i83 = intArrayUtil80.findKthLargestViaQuickSort(i_array81, (-5));
    int[] i_array87 = new int[] { '4', (byte)0 };
    int i88 = intArrayUtil80.findMinSubArrayLen(0, i_array87);
    int i90 = intArrayUtil65.threeSumClosest(i_array87, (-1));
    int[] i_array93 = new int[] { (byte)1, (short)0 };
    int i94 = intArrayUtil65.findMinViaRecursion(i_array93);
    int i96 = intArrayUtil50.threeSumClosest(i_array93, 5);
    int i97 = intArrayUtil0.findMinSubArrayLen((int)(byte)100, i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil10 = new util.IntArrayUtil();
    int[] i_array11 = new int[] {  };
    int i13 = intArrayUtil10.findKthLargestViaQuickSort(i_array11, (-5));
    int i14 = intArrayUtil0.findMinSubArrayLen((-1), i_array11);
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil33 = new util.IntArrayUtil();
    int[] i_array34 = new int[] {  };
    int i36 = intArrayUtil33.findKthLargestViaQuickSort(i_array34, (-5));
    int[] i_array40 = new int[] { '4', (byte)0 };
    int i41 = intArrayUtil33.findMinSubArrayLen(0, i_array40);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int i47 = intArrayUtil33.findMinSubArrayLen((-1), i_array44);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    int[] i_array49 = new int[] {  };
    int i51 = intArrayUtil48.findKthLargestViaQuickSort(i_array49, (-5));
    int[] i_array55 = new int[] { '4', (byte)0 };
    int i56 = intArrayUtil48.findMinSubArrayLen(0, i_array55);
    int i58 = intArrayUtil33.threeSumClosest(i_array55, (-1));
    int i59 = intArrayUtil31.findMinSubArrayLen((int)(short)100, i_array55);
    int i61 = intArrayUtil16.threeSumClosest(i_array55, 10);
    int i62 = intArrayUtil0.findMinSubArrayLen((-5), i_array55);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i74 = intArrayUtil63.findMinSubArrayLen(1, i_array72);
    int i75 = intArrayUtil0.findMinViaIteration(i_array72);
    int[] i_array76 = null;
    intArrayUtil0.getNextPermutationNumber(i_array76);
    int[] i_array79 = null;
    int i80 = intArrayUtil0.findMinSubArrayLen((-1), i_array79);
    int[] i_array82 = null;
    int i83 = intArrayUtil0.findMinSubArrayLen(5, i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array3 = new int[] { (byte)-1, (byte)10 };
    int i4 = intArrayUtil0.removeDuplicateElements(i_array3);
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil6 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil7 = new util.IntArrayUtil();
    int[] i_array8 = new int[] {  };
    int i10 = intArrayUtil7.findKthLargestViaQuickSort(i_array8, (-5));
    int[] i_array14 = new int[] { '4', (byte)0 };
    int i15 = intArrayUtil7.findMinSubArrayLen(0, i_array14);
    util.IntArrayUtil intArrayUtil17 = new util.IntArrayUtil();
    int[] i_array18 = new int[] {  };
    int i20 = intArrayUtil17.findKthLargestViaQuickSort(i_array18, (-5));
    int i21 = intArrayUtil7.findMinSubArrayLen((-1), i_array18);
    int i23 = intArrayUtil6.findKthLargestViaQuickSort(i_array18, (-3));
    int i25 = intArrayUtil5.threeSumClosest(i_array18, 5);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int i40 = intArrayUtil26.findMinSubArrayLen((-1), i_array37);
    int i41 = intArrayUtil5.findMinViaIteration(i_array37);
    int i42 = intArrayUtil0.removeDuplicateElements(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    int[] i_array5 = new int[] {  };
    int i7 = intArrayUtil4.findKthLargestViaQuickSort(i_array5, (-5));
    int[] i_array11 = new int[] { '4', (byte)0 };
    int i12 = intArrayUtil4.findMinSubArrayLen(0, i_array11);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    int[] i_array15 = new int[] {  };
    int i17 = intArrayUtil14.findKthLargestViaQuickSort(i_array15, (-5));
    int i18 = intArrayUtil4.findMinSubArrayLen((-1), i_array15);
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    int[] i_array20 = new int[] {  };
    int i22 = intArrayUtil19.findKthLargestViaQuickSort(i_array20, (-5));
    int[] i_array26 = new int[] { '4', (byte)0 };
    int i27 = intArrayUtil19.findMinSubArrayLen(0, i_array26);
    int i29 = intArrayUtil4.threeSumClosest(i_array26, (-1));
    int i30 = intArrayUtil2.findMinSubArrayLen((int)(short)100, i_array26);
    int i31 = intArrayUtil0.findMinSubArrayLen(2, i_array26);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil44 = new util.IntArrayUtil();
    int[] i_array45 = new int[] {  };
    int i47 = intArrayUtil44.findKthLargestViaQuickSort(i_array45, (-5));
    int[] i_array51 = new int[] { '4', (byte)0 };
    int i52 = intArrayUtil44.findMinSubArrayLen(0, i_array51);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    int[] i_array55 = new int[] {  };
    int i57 = intArrayUtil54.findKthLargestViaQuickSort(i_array55, (-5));
    int i58 = intArrayUtil44.findMinSubArrayLen((-1), i_array55);
    int i60 = intArrayUtil43.findKthLargestViaQuickSort(i_array55, (-3));
    int i62 = intArrayUtil42.threeSumClosest(i_array55, 5);
    util.IntArrayUtil intArrayUtil63 = new util.IntArrayUtil();
    int[] i_array64 = new int[] {  };
    int i66 = intArrayUtil63.findKthLargestViaQuickSort(i_array64, (-5));
    int[] i_array70 = new int[] { '4', (byte)0 };
    int i71 = intArrayUtil63.findMinSubArrayLen(0, i_array70);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int i77 = intArrayUtil63.findMinSubArrayLen((-1), i_array74);
    int i78 = intArrayUtil42.findMinViaIteration(i_array74);
    int i79 = intArrayUtil41.removeDuplicateElements(i_array74);
    int i81 = intArrayUtil32.threeSumClosest(i_array74, (int)' ');
    util.IntArrayUtil intArrayUtil82 = new util.IntArrayUtil();
    int[] i_array83 = new int[] {  };
    int i85 = intArrayUtil82.findKthLargestViaQuickSort(i_array83, (-5));
    int[] i_array89 = new int[] { '4', (byte)0 };
    int i90 = intArrayUtil82.findMinSubArrayLen(0, i_array89);
    util.IntArrayUtil intArrayUtil92 = new util.IntArrayUtil();
    int[] i_array93 = new int[] {  };
    int i95 = intArrayUtil92.findKthLargestViaQuickSort(i_array93, (-5));
    int i96 = intArrayUtil82.findMinSubArrayLen((-1), i_array93);
    int i97 = intArrayUtil32.removeDuplicateElements(i_array93);
    // The following exception was thrown during execution in test generation
    try {
    int i99 = intArrayUtil0.findKthLargestViaQuickSort(i_array93, 10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i97 == 0);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    util.IntArrayUtil intArrayUtil4 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil5 = new util.IntArrayUtil();
    int[] i_array6 = new int[] {  };
    int i8 = intArrayUtil5.findKthLargestViaQuickSort(i_array6, (-5));
    int[] i_array12 = new int[] { '4', (byte)0 };
    int i13 = intArrayUtil5.findMinSubArrayLen(0, i_array12);
    util.IntArrayUtil intArrayUtil14 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array17 = new int[] {  };
    int i19 = intArrayUtil16.findKthLargestViaQuickSort(i_array17, (-5));
    int[] i_array23 = new int[] { '4', (byte)0 };
    int i24 = intArrayUtil16.findMinSubArrayLen(0, i_array23);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int i30 = intArrayUtil16.findMinSubArrayLen((-1), i_array27);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int[] i_array38 = new int[] { '4', (byte)0 };
    int i39 = intArrayUtil31.findMinSubArrayLen(0, i_array38);
    int i41 = intArrayUtil16.threeSumClosest(i_array38, (-1));
    int i42 = intArrayUtil14.findMinSubArrayLen((int)(short)100, i_array38);
    int i43 = intArrayUtil5.removeDuplicateElements(i_array38);
    int i44 = intArrayUtil4.findMinViaRecursion(i_array38);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    int[] i_array46 = new int[] {  };
    int i48 = intArrayUtil45.findKthLargestViaQuickSort(i_array46, (-5));
    int[] i_array52 = new int[] { '4', (byte)0 };
    int i53 = intArrayUtil45.findMinSubArrayLen(0, i_array52);
    util.IntArrayUtil intArrayUtil54 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int i70 = intArrayUtil56.findMinSubArrayLen((-1), i_array67);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    int i81 = intArrayUtil56.threeSumClosest(i_array78, (-1));
    int i82 = intArrayUtil54.findMinSubArrayLen((int)(short)100, i_array78);
    int i83 = intArrayUtil45.removeDuplicateElements(i_array78);
    intArrayUtil4.getNextPermutationNumber(i_array78);
    int i85 = intArrayUtil0.findMinViaRecursion(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int[] i_array20 = new int[] { '4', (byte)0 };
    int i21 = intArrayUtil13.findMinSubArrayLen(0, i_array20);
    util.IntArrayUtil intArrayUtil23 = new util.IntArrayUtil();
    int[] i_array24 = new int[] {  };
    int i26 = intArrayUtil23.findKthLargestViaQuickSort(i_array24, (-5));
    int i27 = intArrayUtil13.findMinSubArrayLen((-1), i_array24);
    util.IntArrayUtil intArrayUtil28 = new util.IntArrayUtil();
    int[] i_array29 = new int[] {  };
    int i31 = intArrayUtil28.findKthLargestViaQuickSort(i_array29, (-5));
    int[] i_array35 = new int[] { '4', (byte)0 };
    int i36 = intArrayUtil28.findMinSubArrayLen(0, i_array35);
    int i38 = intArrayUtil13.threeSumClosest(i_array35, (-1));
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    int[] i_array57 = new int[] {  };
    int i59 = intArrayUtil56.findKthLargestViaQuickSort(i_array57, (-5));
    int[] i_array63 = new int[] { '4', (byte)0 };
    int i64 = intArrayUtil56.findMinSubArrayLen(0, i_array63);
    int i66 = intArrayUtil41.threeSumClosest(i_array63, (-1));
    int i67 = intArrayUtil39.findMinSubArrayLen((int)(short)100, i_array63);
    int i68 = intArrayUtil13.removeDuplicateElements(i_array63);
    int i69 = intArrayUtil0.findMinSubArrayLen(2, i_array63);
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    int i80 = intArrayUtil0.findMinSubArrayLen((int)'a', i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    int i16 = intArrayUtil2.findMinSubArrayLen((-1), i_array13);
    int i18 = intArrayUtil1.findKthLargestViaQuickSort(i_array13, (-3));
    int i20 = intArrayUtil0.threeSumClosest(i_array13, 5);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    int[] i_array32 = new int[] {  };
    int i34 = intArrayUtil31.findKthLargestViaQuickSort(i_array32, (-5));
    int i35 = intArrayUtil21.findMinSubArrayLen((-1), i_array32);
    util.IntArrayUtil intArrayUtil36 = new util.IntArrayUtil();
    int[] i_array37 = new int[] {  };
    int i39 = intArrayUtil36.findKthLargestViaQuickSort(i_array37, (-5));
    int[] i_array43 = new int[] { '4', (byte)0 };
    int i44 = intArrayUtil36.findMinSubArrayLen(0, i_array43);
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    int[] i_array47 = new int[] {  };
    int i49 = intArrayUtil46.findKthLargestViaQuickSort(i_array47, (-5));
    int i50 = intArrayUtil36.findMinSubArrayLen((-1), i_array47);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    int i61 = intArrayUtil36.threeSumClosest(i_array58, (-1));
    int[] i_array64 = new int[] { (byte)1, (short)0 };
    int i65 = intArrayUtil36.findMinViaRecursion(i_array64);
    int i67 = intArrayUtil21.threeSumClosest(i_array64, 5);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    int[] i_array70 = new int[] {  };
    int i72 = intArrayUtil69.findKthLargestViaQuickSort(i_array70, (-5));
    int[] i_array76 = new int[] { '4', (byte)0 };
    int i77 = intArrayUtil69.findMinSubArrayLen(0, i_array76);
    int i79 = intArrayUtil68.threeSumClosest(i_array76, (int)(byte)-1);
    int i80 = intArrayUtil21.findMinViaRecursion(i_array76);
    int[] i_array84 = new int[] { (-1), (byte)-1, '4' };
    int i85 = intArrayUtil21.findMinViaRecursion(i_array84);
    int i87 = intArrayUtil0.threeSumClosest(i_array84, (int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    int[] i_array43 = new int[] { (byte)-1, (byte)10 };
    int i44 = intArrayUtil40.removeDuplicateElements(i_array43);
    util.IntArrayUtil intArrayUtil45 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil57 = new util.IntArrayUtil();
    int[] i_array58 = new int[] {  };
    int i60 = intArrayUtil57.findKthLargestViaQuickSort(i_array58, (-5));
    int i61 = intArrayUtil47.findMinSubArrayLen((-1), i_array58);
    int i63 = intArrayUtil46.findKthLargestViaQuickSort(i_array58, (-3));
    int i65 = intArrayUtil45.threeSumClosest(i_array58, 5);
    int i66 = intArrayUtil40.removeDuplicateElements(i_array58);
    int i67 = intArrayUtil0.findMinSubArrayLen((-2), i_array58);
    util.IntArrayUtil intArrayUtil69 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil70 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil71 = new util.IntArrayUtil();
    int[] i_array72 = new int[] {  };
    int i74 = intArrayUtil71.findKthLargestViaQuickSort(i_array72, (-5));
    int[] i_array78 = new int[] { '4', (byte)0 };
    int i79 = intArrayUtil71.findMinSubArrayLen(0, i_array78);
    util.IntArrayUtil intArrayUtil81 = new util.IntArrayUtil();
    int[] i_array82 = new int[] {  };
    int i84 = intArrayUtil81.findKthLargestViaQuickSort(i_array82, (-5));
    int i85 = intArrayUtil71.findMinSubArrayLen((-1), i_array82);
    int i87 = intArrayUtil70.findKthLargestViaQuickSort(i_array82, (-3));
    int i89 = intArrayUtil69.threeSumClosest(i_array82, 5);
    int i90 = intArrayUtil0.findMinSubArrayLen((int)'a', i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 0);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    util.IntArrayUtil intArrayUtil43 = new util.IntArrayUtil();
    int[] i_array44 = new int[] {  };
    int i46 = intArrayUtil43.findKthLargestViaQuickSort(i_array44, (-5));
    int[] i_array50 = new int[] { '4', (byte)0 };
    int i51 = intArrayUtil43.findMinSubArrayLen(0, i_array50);
    util.IntArrayUtil intArrayUtil53 = new util.IntArrayUtil();
    int[] i_array54 = new int[] {  };
    int i56 = intArrayUtil53.findKthLargestViaQuickSort(i_array54, (-5));
    int i57 = intArrayUtil43.findMinSubArrayLen((-1), i_array54);
    int i59 = intArrayUtil0.threeSumClosest(i_array54, (int)(short)100);
    int[] i_array61 = null;
    int i62 = intArrayUtil0.findMinSubArrayLen(10, i_array61);
    int[] i_array63 = null;
    int i64 = intArrayUtil0.removeDuplicateElements(i_array63);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    int i76 = intArrayUtil65.findMinSubArrayLen(1, i_array74);
    int i77 = intArrayUtil0.findMinViaIteration(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    int[] i_array2 = new int[] {  };
    int i4 = intArrayUtil1.findKthLargestViaQuickSort(i_array2, (-5));
    int[] i_array8 = new int[] { '4', (byte)0 };
    int i9 = intArrayUtil1.findMinSubArrayLen(0, i_array8);
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int i15 = intArrayUtil1.findMinSubArrayLen((-1), i_array12);
    int i17 = intArrayUtil0.findKthLargestViaQuickSort(i_array12, (-3));
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil19 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    int i36 = intArrayUtil19.findKthLargestViaQuickSort(i_array31, (-3));
    int i38 = intArrayUtil18.threeSumClosest(i_array31, 5);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil40 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil41 = new util.IntArrayUtil();
    int[] i_array42 = new int[] {  };
    int i44 = intArrayUtil41.findKthLargestViaQuickSort(i_array42, (-5));
    int[] i_array48 = new int[] { '4', (byte)0 };
    int i49 = intArrayUtil41.findMinSubArrayLen(0, i_array48);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int i55 = intArrayUtil41.findMinSubArrayLen((-1), i_array52);
    int i57 = intArrayUtil40.findKthLargestViaQuickSort(i_array52, (-3));
    int i59 = intArrayUtil39.threeSumClosest(i_array52, 5);
    int i61 = intArrayUtil18.threeSumClosest(i_array52, 2);
    int i62 = intArrayUtil0.findMinViaIteration(i_array52);
    util.IntArrayUtil intArrayUtil64 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil66 = new util.IntArrayUtil();
    int[] i_array67 = new int[] {  };
    int i69 = intArrayUtil66.findKthLargestViaQuickSort(i_array67, (-5));
    int[] i_array73 = new int[] { '4', (byte)0 };
    int i74 = intArrayUtil66.findMinSubArrayLen(0, i_array73);
    int i75 = intArrayUtil64.findMinSubArrayLen(1, i_array73);
    int i76 = intArrayUtil0.findMinSubArrayLen(0, i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 1);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    int[] i_array3 = new int[] {  };
    int i5 = intArrayUtil2.findKthLargestViaQuickSort(i_array3, (-5));
    int[] i_array9 = new int[] { '4', (byte)0 };
    int i10 = intArrayUtil2.findMinSubArrayLen(0, i_array9);
    int i11 = intArrayUtil0.findMinSubArrayLen(1, i_array9);
    util.IntArrayUtil intArrayUtil12 = new util.IntArrayUtil();
    int[] i_array13 = new int[] {  };
    int i15 = intArrayUtil12.findKthLargestViaQuickSort(i_array13, (-5));
    util.IntArrayUtil intArrayUtil16 = new util.IntArrayUtil();
    int[] i_array19 = new int[] { (byte)-1, (byte)10 };
    int i20 = intArrayUtil16.removeDuplicateElements(i_array19);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int[] i_array28 = new int[] { '4', (byte)0 };
    int i29 = intArrayUtil21.findMinSubArrayLen(0, i_array28);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil31 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int[] i_array39 = new int[] { '4', (byte)0 };
    int i40 = intArrayUtil32.findMinSubArrayLen(0, i_array39);
    util.IntArrayUtil intArrayUtil42 = new util.IntArrayUtil();
    int[] i_array43 = new int[] {  };
    int i45 = intArrayUtil42.findKthLargestViaQuickSort(i_array43, (-5));
    int i46 = intArrayUtil32.findMinSubArrayLen((-1), i_array43);
    int i48 = intArrayUtil31.findKthLargestViaQuickSort(i_array43, (-3));
    int i50 = intArrayUtil30.threeSumClosest(i_array43, 5);
    util.IntArrayUtil intArrayUtil51 = new util.IntArrayUtil();
    int[] i_array52 = new int[] {  };
    int i54 = intArrayUtil51.findKthLargestViaQuickSort(i_array52, (-5));
    int[] i_array58 = new int[] { '4', (byte)0 };
    int i59 = intArrayUtil51.findMinSubArrayLen(0, i_array58);
    util.IntArrayUtil intArrayUtil61 = new util.IntArrayUtil();
    int[] i_array62 = new int[] {  };
    int i64 = intArrayUtil61.findKthLargestViaQuickSort(i_array62, (-5));
    int i65 = intArrayUtil51.findMinSubArrayLen((-1), i_array62);
    int i66 = intArrayUtil30.findMinViaIteration(i_array62);
    int i67 = intArrayUtil21.removeDuplicateElements(i_array62);
    int i69 = intArrayUtil16.findKthLargestViaQuickSort(i_array62, 0);
    int i71 = intArrayUtil12.threeSumClosest(i_array62, (int)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    int i72 = intArrayUtil0.findMinViaRecursion(i_array62);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    int[] i_array10 = new int[] {  };
    int i12 = intArrayUtil9.findKthLargestViaQuickSort(i_array10, (-5));
    int[] i_array16 = new int[] { '4', (byte)0 };
    int i17 = intArrayUtil9.findMinSubArrayLen(0, i_array16);
    util.IntArrayUtil intArrayUtil18 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil20 = new util.IntArrayUtil();
    int[] i_array21 = new int[] {  };
    int i23 = intArrayUtil20.findKthLargestViaQuickSort(i_array21, (-5));
    int[] i_array27 = new int[] { '4', (byte)0 };
    int i28 = intArrayUtil20.findMinSubArrayLen(0, i_array27);
    util.IntArrayUtil intArrayUtil30 = new util.IntArrayUtil();
    int[] i_array31 = new int[] {  };
    int i33 = intArrayUtil30.findKthLargestViaQuickSort(i_array31, (-5));
    int i34 = intArrayUtil20.findMinSubArrayLen((-1), i_array31);
    util.IntArrayUtil intArrayUtil35 = new util.IntArrayUtil();
    int[] i_array36 = new int[] {  };
    int i38 = intArrayUtil35.findKthLargestViaQuickSort(i_array36, (-5));
    int[] i_array42 = new int[] { '4', (byte)0 };
    int i43 = intArrayUtil35.findMinSubArrayLen(0, i_array42);
    int i45 = intArrayUtil20.threeSumClosest(i_array42, (-1));
    int i46 = intArrayUtil18.findMinSubArrayLen((int)(short)100, i_array42);
    int i47 = intArrayUtil9.removeDuplicateElements(i_array42);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil52 = new util.IntArrayUtil();
    int[] i_array53 = new int[] {  };
    int i55 = intArrayUtil52.findKthLargestViaQuickSort(i_array53, (-5));
    int[] i_array59 = new int[] { '4', (byte)0 };
    int i60 = intArrayUtil52.findMinSubArrayLen(0, i_array59);
    util.IntArrayUtil intArrayUtil62 = new util.IntArrayUtil();
    int[] i_array63 = new int[] {  };
    int i65 = intArrayUtil62.findKthLargestViaQuickSort(i_array63, (-5));
    int i66 = intArrayUtil52.findMinSubArrayLen((-1), i_array63);
    util.IntArrayUtil intArrayUtil67 = new util.IntArrayUtil();
    int[] i_array68 = new int[] {  };
    int i70 = intArrayUtil67.findKthLargestViaQuickSort(i_array68, (-5));
    int[] i_array74 = new int[] { '4', (byte)0 };
    int i75 = intArrayUtil67.findMinSubArrayLen(0, i_array74);
    int i77 = intArrayUtil52.threeSumClosest(i_array74, (-1));
    int i78 = intArrayUtil50.findMinSubArrayLen((int)(short)100, i_array74);
    int i79 = intArrayUtil48.findMinSubArrayLen(2, i_array74);
    intArrayUtil9.getNextPermutationNumber(i_array74);
    int i82 = intArrayUtil0.threeSumClosest(i_array74, 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil1 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil2 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil3 = new util.IntArrayUtil();
    int[] i_array4 = new int[] {  };
    int i6 = intArrayUtil3.findKthLargestViaQuickSort(i_array4, (-5));
    int[] i_array10 = new int[] { '4', (byte)0 };
    int i11 = intArrayUtil3.findMinSubArrayLen(0, i_array10);
    util.IntArrayUtil intArrayUtil13 = new util.IntArrayUtil();
    int[] i_array14 = new int[] {  };
    int i16 = intArrayUtil13.findKthLargestViaQuickSort(i_array14, (-5));
    int i17 = intArrayUtil3.findMinSubArrayLen((-1), i_array14);
    int i19 = intArrayUtil2.findKthLargestViaQuickSort(i_array14, (-3));
    int i21 = intArrayUtil1.threeSumClosest(i_array14, 5);
    util.IntArrayUtil intArrayUtil22 = new util.IntArrayUtil();
    int[] i_array23 = new int[] {  };
    int i25 = intArrayUtil22.findKthLargestViaQuickSort(i_array23, (-5));
    int[] i_array29 = new int[] { '4', (byte)0 };
    int i30 = intArrayUtil22.findMinSubArrayLen(0, i_array29);
    util.IntArrayUtil intArrayUtil32 = new util.IntArrayUtil();
    int[] i_array33 = new int[] {  };
    int i35 = intArrayUtil32.findKthLargestViaQuickSort(i_array33, (-5));
    int i36 = intArrayUtil22.findMinSubArrayLen((-1), i_array33);
    int i37 = intArrayUtil1.findMinViaIteration(i_array33);
    intArrayUtil0.getNextPermutationNumber(i_array33);
    util.IntArrayUtil intArrayUtil39 = new util.IntArrayUtil();
    int[] i_array40 = new int[] {  };
    int i42 = intArrayUtil39.findKthLargestViaQuickSort(i_array40, (-5));
    int[] i_array46 = new int[] { '4', (byte)0 };
    int i47 = intArrayUtil39.findMinSubArrayLen(0, i_array46);
    util.IntArrayUtil intArrayUtil48 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil50 = new util.IntArrayUtil();
    int[] i_array51 = new int[] {  };
    int i53 = intArrayUtil50.findKthLargestViaQuickSort(i_array51, (-5));
    int[] i_array57 = new int[] { '4', (byte)0 };
    int i58 = intArrayUtil50.findMinSubArrayLen(0, i_array57);
    util.IntArrayUtil intArrayUtil60 = new util.IntArrayUtil();
    int[] i_array61 = new int[] {  };
    int i63 = intArrayUtil60.findKthLargestViaQuickSort(i_array61, (-5));
    int i64 = intArrayUtil50.findMinSubArrayLen((-1), i_array61);
    util.IntArrayUtil intArrayUtil65 = new util.IntArrayUtil();
    int[] i_array66 = new int[] {  };
    int i68 = intArrayUtil65.findKthLargestViaQuickSort(i_array66, (-5));
    int[] i_array72 = new int[] { '4', (byte)0 };
    int i73 = intArrayUtil65.findMinSubArrayLen(0, i_array72);
    int i75 = intArrayUtil50.threeSumClosest(i_array72, (-1));
    int i76 = intArrayUtil48.findMinSubArrayLen((int)(short)100, i_array72);
    int i77 = intArrayUtil39.removeDuplicateElements(i_array72);
    int i79 = intArrayUtil0.threeSumClosest(i_array72, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    util.IntArrayUtil intArrayUtil0 = new util.IntArrayUtil();
    int[] i_array1 = new int[] {  };
    int i3 = intArrayUtil0.findKthLargestViaQuickSort(i_array1, (-5));
    int[] i_array7 = new int[] { '4', (byte)0 };
    int i8 = intArrayUtil0.findMinSubArrayLen(0, i_array7);
    util.IntArrayUtil intArrayUtil9 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil11 = new util.IntArrayUtil();
    int[] i_array12 = new int[] {  };
    int i14 = intArrayUtil11.findKthLargestViaQuickSort(i_array12, (-5));
    int[] i_array18 = new int[] { '4', (byte)0 };
    int i19 = intArrayUtil11.findMinSubArrayLen(0, i_array18);
    util.IntArrayUtil intArrayUtil21 = new util.IntArrayUtil();
    int[] i_array22 = new int[] {  };
    int i24 = intArrayUtil21.findKthLargestViaQuickSort(i_array22, (-5));
    int i25 = intArrayUtil11.findMinSubArrayLen((-1), i_array22);
    util.IntArrayUtil intArrayUtil26 = new util.IntArrayUtil();
    int[] i_array27 = new int[] {  };
    int i29 = intArrayUtil26.findKthLargestViaQuickSort(i_array27, (-5));
    int[] i_array33 = new int[] { '4', (byte)0 };
    int i34 = intArrayUtil26.findMinSubArrayLen(0, i_array33);
    int i36 = intArrayUtil11.threeSumClosest(i_array33, (-1));
    int i37 = intArrayUtil9.findMinSubArrayLen((int)(short)100, i_array33);
    int i38 = intArrayUtil0.removeDuplicateElements(i_array33);
    int[] i_array39 = null;
    intArrayUtil0.getNextPermutationNumber(i_array39);
    int[] i_array41 = null;
    int i42 = intArrayUtil0.findMinViaIteration(i_array41);
    int[] i_array43 = null;
    int i45 = intArrayUtil0.findKthLargestViaQuickSort(i_array43, (-3));
    util.IntArrayUtil intArrayUtil46 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil47 = new util.IntArrayUtil();
    int[] i_array48 = new int[] {  };
    int i50 = intArrayUtil47.findKthLargestViaQuickSort(i_array48, (-5));
    int[] i_array54 = new int[] { '4', (byte)0 };
    int i55 = intArrayUtil47.findMinSubArrayLen(0, i_array54);
    util.IntArrayUtil intArrayUtil56 = new util.IntArrayUtil();
    util.IntArrayUtil intArrayUtil58 = new util.IntArrayUtil();
    int[] i_array59 = new int[] {  };
    int i61 = intArrayUtil58.findKthLargestViaQuickSort(i_array59, (-5));
    int[] i_array65 = new int[] { '4', (byte)0 };
    int i66 = intArrayUtil58.findMinSubArrayLen(0, i_array65);
    util.IntArrayUtil intArrayUtil68 = new util.IntArrayUtil();
    int[] i_array69 = new int[] {  };
    int i71 = intArrayUtil68.findKthLargestViaQuickSort(i_array69, (-5));
    int i72 = intArrayUtil58.findMinSubArrayLen((-1), i_array69);
    util.IntArrayUtil intArrayUtil73 = new util.IntArrayUtil();
    int[] i_array74 = new int[] {  };
    int i76 = intArrayUtil73.findKthLargestViaQuickSort(i_array74, (-5));
    int[] i_array80 = new int[] { '4', (byte)0 };
    int i81 = intArrayUtil73.findMinSubArrayLen(0, i_array80);
    int i83 = intArrayUtil58.threeSumClosest(i_array80, (-1));
    int i84 = intArrayUtil56.findMinSubArrayLen((int)(short)100, i_array80);
    int i85 = intArrayUtil47.removeDuplicateElements(i_array80);
    int i86 = intArrayUtil46.findMinViaRecursion(i_array80);
    int i88 = intArrayUtil0.findKthLargestViaQuickSort(i_array80, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);

  }

}

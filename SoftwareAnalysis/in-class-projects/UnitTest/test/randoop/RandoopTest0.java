package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 1, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 10, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    demo.Mono var3 = new demo.Mono((-1), 100, 0);
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(-1/100)x^0"+ "'", var4.equals("(-1/100)x^0"));

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 0, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    java.lang.String var2 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var2.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    java.lang.String var29 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 100, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, (-1), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    demo.Mono var3 = new demo.Mono(1, 1, 0);
    demo.Mono var4 = var3.clone();
    java.lang.String var5 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(1/1)x^0"+ "'", var5.equals("(1/1)x^0"));

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    var4.add(var41);
    java.lang.String var47 = var41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    java.lang.String var38 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    demo.Mono var3 = new demo.Mono(1, 1, 0);
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var4.clone();
    demo.Mono var6 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    java.lang.String var65 = var64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 10, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Mono var33 = new demo.Mono(1, 1, 0);
    demo.Poly var34 = var14.sum(var33);
    java.lang.String var35 = var34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, (-1), 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = new demo.Poly();
    java.lang.String var25 = var24.toString();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    java.lang.String var28 = var26.toString();
    demo.Poly var29 = var24.multMono(var26);
    demo.Poly var30 = new demo.Poly();
    demo.Mono var31 = new demo.Mono();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var30.sum(var32);
    demo.Poly var34 = var33.clone();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var33.sum(var37);
    demo.Poly var39 = var29.mult(var38);
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var38.multMono(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var43.clone();
    demo.Poly var46 = new demo.Poly();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    java.lang.String var50 = var48.toString();
    demo.Poly var51 = var46.multMono(var48);
    demo.Poly var52 = var43.multMono(var48);
    demo.Poly var53 = var38.multMono(var48);
    var5.add(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var25.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 0, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    java.lang.String var56 = var54.toString();
    demo.Poly var57 = var52.multMono(var54);
    demo.Poly var58 = var49.multMono(var54);
    demo.Poly var59 = var42.mult(var49);
    demo.Mono var63 = new demo.Mono(1, 1, 0);
    demo.Mono var64 = var63.clone();
    var42.add(var64);
    demo.Poly var66 = var42.clone();
    demo.Mono var70 = new demo.Mono(1, 1, 0);
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var42.multMono(var70);
    demo.Poly var73 = var35.mult(var72);
    demo.Poly var74 = var72.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 100, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 10, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Mono var43 = var41.clone();
    demo.Poly var44 = var38.multMono(var43);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var48.sum(var52);
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Poly var64 = var63.clone();
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Poly var68 = var63.sum(var67);
    demo.Poly var69 = var59.mult(var68);
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var68.multMono(var70);
    demo.Poly var73 = var53.multMono(var70);
    demo.Poly var74 = var38.mult(var53);
    demo.Poly var75 = var53.clone();
    demo.Poly var76 = var13.mult(var75);
    demo.Poly var77 = new demo.Poly();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = new demo.Mono();
    java.lang.String var80 = var79.toString();
    java.lang.String var81 = var79.toString();
    demo.Poly var82 = var77.multMono(var79);
    demo.Poly var83 = new demo.Poly();
    demo.Mono var84 = new demo.Mono();
    demo.Mono var85 = var84.clone();
    demo.Poly var86 = var83.sum(var85);
    demo.Poly var87 = var86.clone();
    demo.Mono var88 = new demo.Mono();
    java.lang.String var89 = var88.toString();
    demo.Mono var90 = var88.clone();
    demo.Poly var91 = var86.sum(var90);
    demo.Poly var92 = var82.mult(var91);
    demo.Poly var93 = new demo.Poly();
    demo.Mono var94 = new demo.Mono();
    demo.Mono var95 = var94.clone();
    demo.Poly var96 = var93.sum(var95);
    demo.Mono var97 = var95.clone();
    demo.Poly var98 = var91.sum(var97);
    demo.Poly var99 = var75.mult(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var78.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(0/1)x^0"+ "'", var80.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0"+ "'", var81.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "(0/1)x^0"+ "'", var89.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 100, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Mono var9 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    demo.Poly var10 = new demo.Poly();
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Poly var13 = var10.sum(var12);
    demo.Poly var14 = var13.clone();
    demo.Mono var15 = new demo.Mono();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = var15.clone();
    demo.Poly var18 = var13.sum(var17);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    demo.Poly var38 = var18.multMono(var35);
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    var38.add(var39);
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = var43.clone();
    demo.Mono var46 = var43.clone();
    demo.Mono var47 = var46.clone();
    var38.add(var47);
    demo.Poly var49 = var9.mult(var38);
    demo.Mono var53 = new demo.Mono(1, 1, 0);
    var38.add(var53);
    java.lang.String var55 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(1/1)x^0"+ "'", var55.equals("(1/1)x^0"));

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 1, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Mono var36 = var34.clone();
    java.lang.String var37 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var33 = var28.clone();
    java.lang.String var34 = var33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = var4.mult(var42);
    demo.Mono var50 = new demo.Mono();
    demo.Mono var51 = var50.clone();
    demo.Mono var52 = var51.clone();
    demo.Mono var53 = var51.clone();
    var4.add(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var5.sum(var8);
    java.lang.String var12 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var12.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    java.lang.String var52 = var50.toString();
    java.lang.String var53 = var50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Mono var19 = var16.clone();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var5.sum(var19);
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Mono var25 = var22.clone();
    demo.Mono var26 = var25.clone();
    var21.add(var25);
    demo.Poly var28 = var21.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    java.lang.String var7 = var0.toString();
    demo.Poly var8 = var0.clone();
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var14.mult(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var27.clone();
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = var27.multMono(var32);
    demo.Poly var37 = var20.mult(var27);
    demo.Poly var38 = var13.mult(var37);
    demo.Poly var39 = var10.mult(var13);
    demo.Poly var40 = var8.mult(var10);
    demo.Poly var41 = new demo.Poly();
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = var41.multMono(var46);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Poly var57 = var51.mult(var55);
    demo.Poly var58 = new demo.Poly();
    demo.Mono var59 = new demo.Mono();
    demo.Mono var60 = var59.clone();
    demo.Poly var61 = var58.sum(var60);
    demo.Mono var62 = var60.clone();
    demo.Poly var63 = var57.multMono(var60);
    demo.Poly var64 = new demo.Poly();
    demo.Poly var65 = var64.clone();
    demo.Poly var66 = var64.clone();
    demo.Poly var67 = new demo.Poly();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = new demo.Mono();
    java.lang.String var70 = var69.toString();
    java.lang.String var71 = var69.toString();
    demo.Poly var72 = var67.multMono(var69);
    demo.Poly var73 = var64.multMono(var69);
    demo.Poly var74 = var57.mult(var64);
    demo.Poly var75 = new demo.Poly();
    demo.Mono var76 = new demo.Mono();
    demo.Mono var77 = var76.clone();
    demo.Poly var78 = var75.sum(var77);
    demo.Poly var79 = var78.clone();
    demo.Mono var80 = new demo.Mono();
    java.lang.String var81 = var80.toString();
    demo.Mono var82 = var80.clone();
    demo.Mono var83 = var80.clone();
    demo.Poly var84 = var78.multMono(var83);
    var57.add(var83);
    demo.Poly var86 = var41.sum(var83);
    demo.Mono var87 = var83.clone();
    demo.Poly var88 = var40.sum(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var68.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0"+ "'", var81.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = var6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = var25.clone();
    java.lang.String var30 = var29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var8.clone();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var8.mult(var11);
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Poly var48 = var47.clone();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var47.sum(var51);
    demo.Poly var53 = var43.mult(var52);
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var52.multMono(var54);
    demo.Poly var57 = var11.mult(var56);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var56.sum(var63);
    demo.Poly var69 = var0.mult(var68);
    demo.Mono var73 = new demo.Mono(1, 1, 0);
    demo.Mono var74 = var73.clone();
    demo.Mono var75 = var74.clone();
    demo.Poly var76 = var0.sum(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Mono var19 = var16.clone();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var5.sum(var19);
    demo.Poly var22 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var55.sum(var59);
    demo.Poly var61 = var51.sum(var59);
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Poly var66 = var65.clone();
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = var67.clone();
    demo.Mono var70 = var67.clone();
    demo.Poly var71 = var65.multMono(var70);
    demo.Mono var72 = new demo.Mono();
    java.lang.String var73 = var72.toString();
    demo.Mono var74 = var72.clone();
    demo.Poly var75 = var71.sum(var74);
    var61.add(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var10.mult(var14);
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var16.multMono(var19);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var23.clone();
    demo.Poly var26 = new demo.Poly();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = new demo.Mono();
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    demo.Poly var31 = var26.multMono(var28);
    demo.Poly var32 = var23.multMono(var28);
    demo.Poly var33 = var16.mult(var23);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    demo.Mono var42 = var39.clone();
    demo.Poly var43 = var37.multMono(var42);
    var16.add(var42);
    demo.Poly var45 = var0.sum(var42);
    java.lang.String var46 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var27.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var46.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var63.sum(var64);
    demo.Poly var68 = var0.sum(var64);
    java.lang.String var69 = var68.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var69.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var14.clone();
    demo.Poly var17 = new demo.Poly();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = new demo.Mono();
    java.lang.String var20 = var19.toString();
    java.lang.String var21 = var19.toString();
    demo.Poly var22 = var17.multMono(var19);
    demo.Poly var23 = var14.multMono(var19);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var24.mult(var28);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = var37.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = var37.multMono(var42);
    demo.Poly var47 = var30.mult(var37);
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Poly var52 = var51.clone();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = var53.clone();
    demo.Mono var56 = var53.clone();
    demo.Poly var57 = var51.multMono(var56);
    var30.add(var56);
    demo.Poly var59 = var14.sum(var56);
    demo.Mono var60 = var56.clone();
    var13.add(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var18.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), (-1), 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 1, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Poly var11 = var9.sum(var10);
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var11.multMono(var14);
    demo.Poly var16 = var4.sum(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var35.multMono(var40);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = new demo.Poly();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = var51.multMono(var53);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Mono var62 = new demo.Mono();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var60.sum(var64);
    demo.Poly var66 = var56.mult(var65);
    demo.Mono var67 = new demo.Mono();
    demo.Mono var68 = var67.clone();
    demo.Poly var69 = var65.multMono(var67);
    demo.Poly var70 = var50.multMono(var67);
    demo.Poly var71 = var35.mult(var50);
    demo.Poly var72 = var1.mult(var71);
    demo.Poly var73 = new demo.Poly();
    java.lang.String var74 = var73.toString();
    demo.Mono var75 = new demo.Mono();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    demo.Poly var78 = var73.multMono(var75);
    demo.Poly var79 = var73.clone();
    demo.Mono var80 = new demo.Mono();
    java.lang.String var81 = var80.toString();
    demo.Poly var82 = var79.multMono(var80);
    demo.Poly var83 = var1.multMono(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var74.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(0/1)x^0"+ "'", var76.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0"+ "'", var81.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    demo.Poly var52 = var50.clone();
    demo.Poly var53 = new demo.Poly();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    java.lang.String var57 = var55.toString();
    demo.Poly var58 = var53.multMono(var55);
    demo.Poly var59 = new demo.Poly();
    java.lang.String var60 = var59.toString();
    demo.Mono var61 = new demo.Mono();
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    demo.Poly var64 = var59.multMono(var61);
    demo.Poly var65 = new demo.Poly();
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Poly var68 = var65.sum(var67);
    demo.Poly var69 = var68.clone();
    demo.Mono var70 = new demo.Mono();
    java.lang.String var71 = var70.toString();
    demo.Mono var72 = var70.clone();
    demo.Poly var73 = var68.sum(var72);
    demo.Poly var74 = var64.mult(var73);
    demo.Mono var75 = new demo.Mono();
    demo.Mono var76 = var75.clone();
    demo.Poly var77 = var73.multMono(var75);
    demo.Poly var78 = new demo.Poly();
    demo.Poly var79 = var78.clone();
    demo.Poly var80 = var78.clone();
    demo.Poly var81 = new demo.Poly();
    java.lang.String var82 = var81.toString();
    demo.Mono var83 = new demo.Mono();
    java.lang.String var84 = var83.toString();
    java.lang.String var85 = var83.toString();
    demo.Poly var86 = var81.multMono(var83);
    demo.Poly var87 = var78.multMono(var83);
    demo.Poly var88 = var73.multMono(var83);
    demo.Mono var92 = new demo.Mono(1, 1, 0);
    demo.Poly var93 = var73.sum(var92);
    demo.Poly var94 = var53.sum(var92);
    demo.Poly var95 = var50.multMono(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var82.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(0/1)x^0"+ "'", var84.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0"+ "'", var85.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Mono var20 = var18.clone();
    demo.Poly var21 = var14.sum(var20);
    demo.Poly var22 = new demo.Poly();
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var22.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var22.multMono(var32);
    demo.Poly var35 = new demo.Poly();
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var35.clone();
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = var35.multMono(var40);
    demo.Poly var45 = new demo.Poly();
    demo.Poly var46 = var45.clone();
    demo.Poly var47 = new demo.Poly();
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var47.mult(var51);
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var53.multMono(var56);
    demo.Poly var60 = new demo.Poly();
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = var60.clone();
    demo.Poly var63 = new demo.Poly();
    java.lang.String var64 = var63.toString();
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    java.lang.String var67 = var65.toString();
    demo.Poly var68 = var63.multMono(var65);
    demo.Poly var69 = var60.multMono(var65);
    demo.Poly var70 = var53.mult(var60);
    demo.Poly var71 = var46.mult(var70);
    demo.Poly var72 = var35.mult(var70);
    demo.Poly var73 = var22.mult(var72);
    java.lang.String var74 = var72.toString();
    demo.Mono var78 = new demo.Mono(1, 1, 0);
    var72.add(var78);
    var14.add(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var64.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var74.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 0, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 0, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    java.lang.String var14 = var9.toString();
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = new demo.Poly();
    java.lang.String var19 = var18.toString();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    java.lang.String var22 = var20.toString();
    demo.Poly var23 = var18.multMono(var20);
    demo.Poly var24 = var15.multMono(var20);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = new demo.Poly();
    demo.Mono var29 = new demo.Mono();
    demo.Mono var30 = var29.clone();
    demo.Poly var31 = var28.sum(var30);
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var27.mult(var31);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Mono var38 = var36.clone();
    demo.Poly var39 = var33.multMono(var36);
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var40.clone();
    demo.Poly var43 = new demo.Poly();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    java.lang.String var47 = var45.toString();
    demo.Poly var48 = var43.multMono(var45);
    demo.Poly var49 = var40.multMono(var45);
    demo.Poly var50 = var33.mult(var40);
    demo.Poly var51 = var26.mult(var50);
    demo.Poly var52 = var15.mult(var50);
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    java.lang.String var57 = var56.toString();
    demo.Poly var58 = var56.clone();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var52.mult(var59);
    demo.Mono var64 = new demo.Mono(1, 1, 0);
    demo.Mono var65 = var64.clone();
    var59.add(var65);
    demo.Poly var67 = var9.mult(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var14.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var44.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    demo.Mono var54 = new demo.Mono(1, 1, 0);
    var43.add(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    demo.Mono var0 = new demo.Mono();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = var0.clone();
    demo.Mono var3 = var0.clone();
    demo.Mono var4 = var0.clone();
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0"+ "'", var1.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0/1)x^0"+ "'", var5.equals("(0/1)x^0"));

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Poly var33 = new demo.Poly();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    demo.Poly var38 = var33.multMono(var35);
    demo.Poly var39 = var30.multMono(var35);
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var40.mult(var44);
    demo.Poly var47 = new demo.Poly();
    demo.Mono var48 = new demo.Mono();
    demo.Mono var49 = var48.clone();
    demo.Poly var50 = var47.sum(var49);
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var46.multMono(var49);
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = var53.clone();
    demo.Poly var56 = new demo.Poly();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = new demo.Mono();
    java.lang.String var59 = var58.toString();
    java.lang.String var60 = var58.toString();
    demo.Poly var61 = var56.multMono(var58);
    demo.Poly var62 = var53.multMono(var58);
    demo.Poly var63 = var46.mult(var53);
    demo.Poly var64 = new demo.Poly();
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.sum(var66);
    demo.Poly var68 = var67.clone();
    demo.Mono var69 = new demo.Mono();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = var69.clone();
    demo.Mono var72 = var69.clone();
    demo.Poly var73 = var67.multMono(var72);
    var46.add(var72);
    demo.Poly var75 = var30.sum(var72);
    demo.Poly var76 = var6.mult(var75);
    demo.Poly var77 = new demo.Poly();
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Poly var80 = var77.sum(var79);
    demo.Poly var81 = var80.clone();
    demo.Mono var82 = new demo.Mono();
    java.lang.String var83 = var82.toString();
    demo.Mono var84 = var82.clone();
    demo.Poly var85 = var80.sum(var84);
    demo.Poly var86 = var6.mult(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var34.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0/1)x^0"+ "'", var83.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    java.lang.String var42 = var41.toString();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var37.mult(var44);
    demo.Mono var49 = new demo.Mono(1, 1, 0);
    demo.Mono var50 = var49.clone();
    var44.add(var50);
    java.lang.String var52 = var44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var29.clone();
    demo.Poly var33 = var27.multMono(var32);
    var6.add(var32);
    java.lang.String var35 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Mono var68 = var65.clone();
    demo.Mono var69 = var65.clone();
    var64.add(var69);
    java.lang.String var71 = var69.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Poly var33 = new demo.Poly();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    demo.Poly var38 = var33.multMono(var35);
    demo.Poly var39 = var30.multMono(var35);
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var40.mult(var44);
    demo.Poly var47 = new demo.Poly();
    demo.Mono var48 = new demo.Mono();
    demo.Mono var49 = var48.clone();
    demo.Poly var50 = var47.sum(var49);
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var46.multMono(var49);
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = var53.clone();
    demo.Poly var56 = new demo.Poly();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = new demo.Mono();
    java.lang.String var59 = var58.toString();
    java.lang.String var60 = var58.toString();
    demo.Poly var61 = var56.multMono(var58);
    demo.Poly var62 = var53.multMono(var58);
    demo.Poly var63 = var46.mult(var53);
    demo.Poly var64 = new demo.Poly();
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.sum(var66);
    demo.Poly var68 = var67.clone();
    demo.Mono var69 = new demo.Mono();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = var69.clone();
    demo.Mono var72 = var69.clone();
    demo.Poly var73 = var67.multMono(var72);
    var46.add(var72);
    demo.Poly var75 = var30.sum(var72);
    demo.Poly var76 = var6.mult(var75);
    java.lang.String var77 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var34.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var77.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 0, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    demo.Mono var3 = new demo.Mono((-1), 100, 1);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Mono var43 = var41.clone();
    demo.Poly var44 = var38.multMono(var43);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var48.sum(var52);
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Poly var64 = var63.clone();
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Poly var68 = var63.sum(var67);
    demo.Poly var69 = var59.mult(var68);
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var68.multMono(var70);
    demo.Poly var73 = var53.multMono(var70);
    demo.Poly var74 = var38.mult(var53);
    demo.Poly var75 = var53.clone();
    demo.Poly var76 = var13.mult(var75);
    demo.Poly var77 = new demo.Poly();
    demo.Poly var78 = var77.clone();
    demo.Poly var79 = var77.clone();
    demo.Poly var80 = new demo.Poly();
    java.lang.String var81 = var80.toString();
    demo.Mono var82 = new demo.Mono();
    java.lang.String var83 = var82.toString();
    java.lang.String var84 = var82.toString();
    demo.Poly var85 = var80.multMono(var82);
    demo.Poly var86 = var77.multMono(var82);
    demo.Poly var87 = var13.multMono(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var81.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0/1)x^0"+ "'", var83.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(0/1)x^0"+ "'", var84.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var38.multMono(var48);
    var0.add(var48);
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    demo.Poly var57 = var56.clone();
    demo.Poly var58 = var52.mult(var56);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var59.clone();
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.sum(var62);
    var52.add(var62);
    demo.Poly var67 = new demo.Poly();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = new demo.Mono();
    java.lang.String var70 = var69.toString();
    java.lang.String var71 = var69.toString();
    demo.Poly var72 = var67.multMono(var69);
    demo.Poly var73 = new demo.Poly();
    demo.Mono var74 = new demo.Mono();
    demo.Mono var75 = var74.clone();
    demo.Poly var76 = var73.sum(var75);
    demo.Poly var77 = var76.clone();
    demo.Mono var78 = new demo.Mono();
    java.lang.String var79 = var78.toString();
    demo.Mono var80 = var78.clone();
    demo.Poly var81 = var76.sum(var80);
    demo.Poly var82 = var72.mult(var81);
    demo.Poly var83 = new demo.Poly();
    demo.Mono var84 = new demo.Mono();
    demo.Mono var85 = var84.clone();
    demo.Poly var86 = var83.sum(var85);
    demo.Mono var87 = var85.clone();
    demo.Poly var88 = var81.sum(var87);
    demo.Poly var89 = var52.sum(var87);
    demo.Poly var90 = var0.sum(var87);
    demo.Poly var91 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var68.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(0/1)x^0"+ "'", var79.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 1, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Poly var55 = var30.mult(var54);
    demo.Poly var56 = var8.mult(var54);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var61.multMono(var66);
    java.lang.String var68 = var66.toString();
    demo.Poly var69 = var54.multMono(var66);
    java.lang.String var70 = var66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    demo.Mono var3 = new demo.Mono((-1), 100, 0);
    demo.Mono var4 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    demo.Poly var52 = var50.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = new demo.Poly();
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var55.mult(var59);
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var61.multMono(var64);
    demo.Poly var68 = new demo.Poly();
    demo.Poly var69 = var68.clone();
    demo.Poly var70 = var68.clone();
    demo.Poly var71 = new demo.Poly();
    java.lang.String var72 = var71.toString();
    demo.Mono var73 = new demo.Mono();
    java.lang.String var74 = var73.toString();
    java.lang.String var75 = var73.toString();
    demo.Poly var76 = var71.multMono(var73);
    demo.Poly var77 = var68.multMono(var73);
    demo.Poly var78 = var61.mult(var68);
    demo.Poly var79 = var54.mult(var78);
    demo.Mono var83 = new demo.Mono(1, 1, 0);
    demo.Mono var84 = var83.clone();
    demo.Mono var85 = var84.clone();
    demo.Poly var86 = var54.multMono(var84);
    demo.Poly var87 = var52.multMono(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var72.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var10.mult(var14);
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var16.multMono(var19);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var23.clone();
    demo.Poly var26 = new demo.Poly();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = new demo.Mono();
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    demo.Poly var31 = var26.multMono(var28);
    demo.Poly var32 = var23.multMono(var28);
    demo.Poly var33 = var16.mult(var23);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    demo.Mono var42 = var39.clone();
    demo.Poly var43 = var37.multMono(var42);
    var16.add(var42);
    demo.Poly var45 = var0.sum(var42);
    demo.Poly var46 = var45.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var47.clone();
    demo.Poly var54 = var46.mult(var53);
    java.lang.String var55 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var27.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Mono var28 = new demo.Mono(1, 1, 0);
    demo.Mono var29 = var28.clone();
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var5.multMono(var30);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = new demo.Poly();
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var33.sum(var35);
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var32.mult(var36);
    demo.Poly var39 = var5.mult(var38);
    java.lang.String var40 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var0.sum(var40);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Mono var46 = var44.clone();
    var0.add(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Mono var28 = new demo.Mono(1, 1, 0);
    demo.Mono var29 = var28.clone();
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var5.multMono(var30);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var42);
    demo.Poly var44 = var32.multMono(var42);
    demo.Poly var45 = new demo.Poly();
    demo.Poly var46 = var45.clone();
    demo.Poly var47 = var45.clone();
    demo.Poly var48 = new demo.Poly();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    java.lang.String var52 = var50.toString();
    demo.Poly var53 = var48.multMono(var50);
    demo.Poly var54 = var45.multMono(var50);
    demo.Poly var55 = new demo.Poly();
    demo.Poly var56 = var55.clone();
    demo.Poly var57 = new demo.Poly();
    demo.Poly var58 = new demo.Poly();
    demo.Mono var59 = new demo.Mono();
    demo.Mono var60 = var59.clone();
    demo.Poly var61 = var58.sum(var60);
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var57.mult(var61);
    demo.Poly var64 = new demo.Poly();
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.sum(var66);
    demo.Mono var68 = var66.clone();
    demo.Poly var69 = var63.multMono(var66);
    demo.Poly var70 = new demo.Poly();
    demo.Poly var71 = var70.clone();
    demo.Poly var72 = var70.clone();
    demo.Poly var73 = new demo.Poly();
    java.lang.String var74 = var73.toString();
    demo.Mono var75 = new demo.Mono();
    java.lang.String var76 = var75.toString();
    java.lang.String var77 = var75.toString();
    demo.Poly var78 = var73.multMono(var75);
    demo.Poly var79 = var70.multMono(var75);
    demo.Poly var80 = var63.mult(var70);
    demo.Poly var81 = var56.mult(var80);
    demo.Poly var82 = var45.mult(var80);
    demo.Poly var83 = var32.mult(var82);
    java.lang.String var84 = var82.toString();
    demo.Mono var88 = new demo.Mono(1, 1, 0);
    var82.add(var88);
    java.lang.String var90 = var88.toString();
    var31.add(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var49.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var74.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(0/1)x^0"+ "'", var76.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var84.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(1/1)x^0"+ "'", var90.equals("(1/1)x^0"));

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = new demo.Poly();
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = var32.multMono(var37);
    demo.Poly var42 = var25.mult(var32);
    demo.Poly var43 = var18.mult(var42);
    demo.Poly var44 = var15.mult(var18);
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    demo.Mono var47 = var45.clone();
    demo.Mono var48 = var45.clone();
    demo.Poly var49 = var18.multMono(var48);
    demo.Poly var50 = var9.mult(var18);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var51.clone();
    demo.Mono var54 = new demo.Mono();
    demo.Poly var55 = var53.sum(var54);
    demo.Mono var56 = var54.clone();
    demo.Mono var57 = var54.clone();
    java.lang.String var58 = var57.toString();
    demo.Poly var59 = var9.sum(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var35.clone();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var13.sum(var35);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = new demo.Poly();
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Poly var43 = var40.sum(var42);
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var39.mult(var43);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var45.multMono(var48);
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = var52.clone();
    demo.Poly var54 = var52.clone();
    demo.Poly var55 = new demo.Poly();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    java.lang.String var59 = var57.toString();
    demo.Poly var60 = var55.multMono(var57);
    demo.Poly var61 = var52.multMono(var57);
    demo.Poly var62 = var45.mult(var52);
    java.lang.String var63 = var62.toString();
    demo.Poly var64 = var13.mult(var62);
    demo.Poly var65 = var62.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Mono var9 = var7.clone();
    demo.Poly var10 = var4.multMono(var9);
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Mono var13 = var12.clone();
    demo.Mono var14 = var12.clone();
    demo.Poly var15 = var4.sum(var12);
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = new demo.Poly();
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var21.mult(var25);
    demo.Poly var28 = new demo.Poly();
    demo.Mono var29 = new demo.Mono();
    demo.Mono var30 = var29.clone();
    demo.Poly var31 = var28.sum(var30);
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var27.multMono(var30);
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = var34.clone();
    demo.Poly var37 = new demo.Poly();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    java.lang.String var41 = var39.toString();
    demo.Poly var42 = var37.multMono(var39);
    demo.Poly var43 = var34.multMono(var39);
    demo.Poly var44 = var27.mult(var34);
    demo.Poly var45 = var20.mult(var44);
    demo.Poly var46 = var17.mult(var20);
    demo.Poly var47 = var20.clone();
    demo.Mono var51 = new demo.Mono(1, 1, 0);
    demo.Mono var52 = var51.clone();
    demo.Mono var53 = var51.clone();
    var20.add(var51);
    demo.Poly var55 = var4.sum(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 100, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 1, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var35.clone();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var13.sum(var35);
    java.lang.String var39 = var38.toString();
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var40.clone();
    demo.Mono var43 = new demo.Mono();
    demo.Poly var44 = var42.sum(var43);
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var44.multMono(var47);
    demo.Poly var49 = new demo.Poly();
    demo.Mono var50 = new demo.Mono();
    demo.Mono var51 = var50.clone();
    demo.Poly var52 = var49.sum(var51);
    demo.Poly var53 = var52.clone();
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var53.multMono(var58);
    demo.Poly var60 = var44.multMono(var58);
    demo.Poly var61 = new demo.Poly();
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Poly var64 = var61.sum(var63);
    demo.Poly var65 = var64.clone();
    demo.Mono var66 = new demo.Mono();
    java.lang.String var67 = var66.toString();
    demo.Mono var68 = var66.clone();
    demo.Mono var69 = var66.clone();
    demo.Poly var70 = var64.multMono(var69);
    demo.Mono var71 = new demo.Mono();
    java.lang.String var72 = var71.toString();
    demo.Mono var73 = var71.clone();
    demo.Poly var74 = var70.sum(var73);
    demo.Poly var75 = new demo.Poly();
    java.lang.String var76 = var75.toString();
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    java.lang.String var79 = var77.toString();
    demo.Poly var80 = var75.multMono(var77);
    demo.Poly var81 = new demo.Poly();
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var81.sum(var83);
    demo.Poly var85 = var84.clone();
    demo.Mono var86 = new demo.Mono();
    java.lang.String var87 = var86.toString();
    demo.Mono var88 = var86.clone();
    demo.Poly var89 = var84.sum(var88);
    demo.Poly var90 = var80.mult(var89);
    demo.Mono var91 = new demo.Mono();
    demo.Mono var92 = var91.clone();
    demo.Poly var93 = var89.multMono(var91);
    demo.Poly var94 = var74.sum(var91);
    demo.Poly var95 = var60.sum(var91);
    demo.Poly var96 = var38.multMono(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var76.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(0/1)x^0"+ "'", var79.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0/1)x^0"+ "'", var87.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 10, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var8.clone();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var8.mult(var11);
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Poly var48 = var47.clone();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var47.sum(var51);
    demo.Poly var53 = var43.mult(var52);
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var52.multMono(var54);
    demo.Poly var57 = var11.mult(var56);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var56.sum(var63);
    demo.Poly var69 = var0.mult(var68);
    demo.Poly var70 = var0.clone();
    demo.Poly var71 = var70.clone();
    demo.Poly var72 = new demo.Poly();
    demo.Poly var73 = new demo.Poly();
    demo.Mono var74 = new demo.Mono();
    demo.Mono var75 = var74.clone();
    demo.Poly var76 = var73.sum(var75);
    demo.Poly var77 = var76.clone();
    demo.Poly var78 = var72.mult(var76);
    demo.Poly var79 = new demo.Poly();
    demo.Poly var80 = var79.clone();
    demo.Poly var81 = var79.clone();
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Mono var84 = var82.clone();
    demo.Poly var85 = var79.sum(var82);
    var72.add(var82);
    demo.Poly var87 = var72.clone();
    demo.Mono var91 = new demo.Mono(1, 1, 0);
    demo.Mono var92 = var91.clone();
    demo.Mono var93 = var91.clone();
    demo.Poly var94 = var72.multMono(var93);
    demo.Poly var95 = var71.sum(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = var4.mult(var42);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = new demo.Poly();
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var55.sum(var57);
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var54.multMono(var59);
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Mono var63 = var62.clone();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var54.sum(var62);
    demo.Poly var66 = var4.sum(var62);
    demo.Mono var67 = var62.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    java.lang.String var51 = var43.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    java.lang.String var19 = var18.toString();
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    java.lang.String var40 = var39.toString();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var25.mult(var41);
    demo.Poly var44 = var18.mult(var25);
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    demo.Mono var47 = var45.clone();
    demo.Mono var48 = var45.clone();
    demo.Poly var49 = var44.multMono(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = var3.clone();
    demo.Mono var6 = var3.clone();
    demo.Mono var7 = var3.clone();
    demo.Poly var8 = var2.sum(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var14.mult(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var27.clone();
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = var27.multMono(var32);
    demo.Poly var37 = var20.mult(var27);
    demo.Poly var38 = var13.mult(var37);
    demo.Poly var39 = var10.mult(var13);
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var54.multMono(var56);
    demo.Poly var59 = var13.mult(var58);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.multMono(var62);
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Mono var68 = var66.clone();
    demo.Poly var69 = var59.multMono(var66);
    demo.Poly var70 = var8.mult(var59);
    demo.Poly var71 = new demo.Poly();
    java.lang.String var72 = var71.toString();
    demo.Mono var73 = new demo.Mono();
    java.lang.String var74 = var73.toString();
    java.lang.String var75 = var73.toString();
    demo.Poly var76 = var71.multMono(var73);
    demo.Poly var77 = new demo.Poly();
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Poly var80 = var77.sum(var79);
    demo.Poly var81 = var80.clone();
    demo.Mono var82 = new demo.Mono();
    java.lang.String var83 = var82.toString();
    demo.Mono var84 = var82.clone();
    demo.Poly var85 = var80.sum(var84);
    demo.Poly var86 = var76.mult(var85);
    demo.Poly var87 = new demo.Poly();
    demo.Mono var88 = new demo.Mono();
    demo.Mono var89 = var88.clone();
    demo.Poly var90 = var87.sum(var89);
    java.lang.String var91 = var90.toString();
    demo.Poly var92 = var90.clone();
    demo.Poly var93 = var92.clone();
    demo.Poly var94 = var76.mult(var92);
    demo.Poly var95 = var76.clone();
    demo.Poly var96 = var59.mult(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var72.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0/1)x^0"+ "'", var83.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var91.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = new demo.Poly();
    java.lang.String var25 = var24.toString();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    java.lang.String var28 = var26.toString();
    demo.Poly var29 = var24.multMono(var26);
    demo.Poly var30 = new demo.Poly();
    demo.Mono var31 = new demo.Mono();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var30.sum(var32);
    demo.Poly var34 = var33.clone();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var33.sum(var37);
    demo.Poly var39 = var29.mult(var38);
    demo.Poly var40 = new demo.Poly();
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Poly var43 = var40.sum(var42);
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var38.sum(var44);
    demo.Poly var46 = var23.multMono(var44);
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var50.clone();
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = var52.clone();
    demo.Poly var54 = new demo.Poly();
    demo.Poly var55 = new demo.Poly();
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var55.sum(var57);
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var54.mult(var58);
    demo.Poly var61 = new demo.Poly();
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Poly var64 = var61.sum(var63);
    demo.Mono var65 = var63.clone();
    demo.Poly var66 = var60.multMono(var63);
    demo.Poly var67 = new demo.Poly();
    demo.Poly var68 = var67.clone();
    demo.Poly var69 = var67.clone();
    demo.Poly var70 = new demo.Poly();
    java.lang.String var71 = var70.toString();
    demo.Mono var72 = new demo.Mono();
    java.lang.String var73 = var72.toString();
    java.lang.String var74 = var72.toString();
    demo.Poly var75 = var70.multMono(var72);
    demo.Poly var76 = var67.multMono(var72);
    demo.Poly var77 = var60.mult(var67);
    demo.Poly var78 = var53.mult(var77);
    demo.Poly var79 = var50.mult(var53);
    demo.Mono var80 = new demo.Mono();
    java.lang.String var81 = var80.toString();
    demo.Mono var82 = var80.clone();
    demo.Mono var83 = var80.clone();
    demo.Poly var84 = var53.multMono(var83);
    demo.Poly var85 = var47.multMono(var83);
    demo.Poly var86 = var85.clone();
    java.lang.String var87 = var86.toString();
    demo.Poly var88 = var23.mult(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var25.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var71.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0"+ "'", var81.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var87.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var4.multMono(var7);
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var8.sum(var9);
    java.lang.String var13 = var9.toString();
    java.lang.String var14 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = new demo.Poly();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    java.lang.String var19 = var17.toString();
    demo.Poly var20 = var15.multMono(var17);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Poly var29 = var24.sum(var28);
    demo.Poly var30 = var20.mult(var29);
    demo.Mono var31 = new demo.Mono();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var29.multMono(var31);
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var34.mult(var38);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Mono var45 = var43.clone();
    demo.Poly var46 = var40.multMono(var43);
    var33.add(var43);
    demo.Poly var48 = var33.clone();
    demo.Poly var49 = var0.mult(var33);
    java.lang.String var50 = var49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var16.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Mono var19 = var16.clone();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var5.sum(var19);
    demo.Mono var22 = var19.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Poly var9 = var8.clone();
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var8.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.multMono(var30);
    demo.Poly var34 = var3.mult(var33);
    demo.Poly var35 = var33.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    java.lang.String var56 = var54.toString();
    demo.Poly var57 = var52.multMono(var54);
    demo.Poly var58 = var49.multMono(var54);
    demo.Poly var59 = var42.mult(var49);
    demo.Mono var63 = new demo.Mono(1, 1, 0);
    demo.Mono var64 = var63.clone();
    var42.add(var64);
    demo.Poly var66 = var42.clone();
    demo.Mono var70 = new demo.Mono(1, 1, 0);
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var42.multMono(var70);
    demo.Poly var73 = var35.multMono(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Mono var9 = var7.clone();
    demo.Poly var10 = var4.multMono(var9);
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var14.sum(var18);
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var34.multMono(var36);
    demo.Poly var39 = var19.multMono(var36);
    demo.Poly var40 = var4.mult(var19);
    demo.Poly var41 = var19.clone();
    java.lang.String var42 = var19.toString();
    java.lang.String var43 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = var12.clone();
    demo.Mono var15 = var12.clone();
    demo.Poly var16 = var10.multMono(var15);
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var16.sum(var19);
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = var26.mult(var35);
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var35.multMono(var37);
    demo.Poly var40 = var20.sum(var37);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var20.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Poly var47 = var0.multMono(var42);
    demo.Poly var48 = new demo.Poly();
    demo.Poly var49 = var48.clone();
    demo.Poly var50 = var48.clone();
    demo.Mono var51 = new demo.Mono();
    demo.Poly var52 = var50.sum(var51);
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var52.multMono(var55);
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var56.sum(var57);
    var0.add(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Poly var51 = new demo.Poly();
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var51.sum(var53);
    demo.Mono var55 = var53.clone();
    demo.Poly var56 = var50.multMono(var53);
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var50.multMono(var57);
    demo.Poly var61 = new demo.Poly();
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Poly var66 = var65.clone();
    demo.Poly var67 = var61.mult(var65);
    demo.Poly var68 = new demo.Poly();
    demo.Poly var69 = var68.clone();
    demo.Poly var70 = var68.clone();
    demo.Mono var71 = new demo.Mono();
    demo.Mono var72 = var71.clone();
    demo.Mono var73 = var71.clone();
    demo.Poly var74 = var68.sum(var71);
    var61.add(var71);
    java.lang.String var76 = var71.toString();
    demo.Mono var77 = var71.clone();
    var50.add(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(0/1)x^0"+ "'", var76.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var30.multMono(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var10.mult(var14);
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var16.multMono(var19);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var23.clone();
    demo.Poly var26 = new demo.Poly();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = new demo.Mono();
    java.lang.String var29 = var28.toString();
    java.lang.String var30 = var28.toString();
    demo.Poly var31 = var26.multMono(var28);
    demo.Poly var32 = var23.multMono(var28);
    demo.Poly var33 = var16.mult(var23);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    demo.Mono var42 = var39.clone();
    demo.Poly var43 = var37.multMono(var42);
    var16.add(var42);
    demo.Poly var45 = var0.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Mono var47 = var42.clone();
    demo.Mono var48 = var47.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var27.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = var12.clone();
    demo.Mono var15 = var12.clone();
    demo.Poly var16 = var10.multMono(var15);
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var16.sum(var19);
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = var26.mult(var35);
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var35.multMono(var37);
    demo.Poly var40 = var20.sum(var37);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var20.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Poly var47 = var0.multMono(var42);
    demo.Poly var48 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, (-1), 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var8.clone();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var8.mult(var11);
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Poly var48 = var47.clone();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var47.sum(var51);
    demo.Poly var53 = var43.mult(var52);
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var52.multMono(var54);
    demo.Poly var57 = var11.mult(var56);
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.multMono(var59);
    demo.Poly var61 = var0.sum(var59);
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Mono var64 = var63.clone();
    demo.Mono var65 = var63.clone();
    demo.Mono var66 = var65.clone();
    var61.add(var65);
    java.lang.String var68 = var65.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    demo.Mono var0 = new demo.Mono();
    demo.Mono var1 = var0.clone();
    demo.Mono var2 = var1.clone();
    demo.Mono var3 = var1.clone();
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var36 = new demo.Mono((-1), 100, 0);
    demo.Poly var37 = var18.sum(var36);
    demo.Poly var38 = var18.clone();
    java.lang.String var39 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(-1/100)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(-1/100)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var2.mult(var6);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var8.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = new demo.Poly();
    java.lang.String var19 = var18.toString();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    java.lang.String var22 = var20.toString();
    demo.Poly var23 = var18.multMono(var20);
    demo.Poly var24 = var15.multMono(var20);
    demo.Poly var25 = var8.mult(var15);
    demo.Poly var26 = var1.mult(var25);
    demo.Mono var30 = new demo.Mono(1, 1, 0);
    demo.Mono var31 = var30.clone();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var1.multMono(var31);
    demo.Mono var34 = var31.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var29.clone();
    demo.Poly var33 = var27.multMono(var32);
    var6.add(var32);
    java.lang.String var35 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = var3.clone();
    demo.Mono var6 = var3.clone();
    demo.Mono var7 = var3.clone();
    demo.Poly var8 = var2.sum(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var14.mult(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var27.clone();
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = var27.multMono(var32);
    demo.Poly var37 = var20.mult(var27);
    demo.Poly var38 = var13.mult(var37);
    demo.Poly var39 = var10.mult(var13);
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Mono var43 = var40.clone();
    demo.Poly var44 = var13.multMono(var43);
    demo.Mono var45 = var43.clone();
    var2.add(var43);
    java.lang.String var47 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    demo.Poly var10 = new demo.Poly();
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Poly var13 = var10.sum(var12);
    demo.Poly var14 = var13.clone();
    demo.Mono var15 = new demo.Mono();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = var15.clone();
    demo.Poly var18 = var13.sum(var17);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    demo.Poly var38 = var18.multMono(var35);
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    var38.add(var39);
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = var43.clone();
    demo.Mono var46 = var43.clone();
    demo.Mono var47 = var46.clone();
    var38.add(var47);
    demo.Poly var49 = var9.mult(var38);
    demo.Poly var50 = new demo.Poly();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = new demo.Mono();
    java.lang.String var53 = var52.toString();
    java.lang.String var54 = var52.toString();
    demo.Poly var55 = var50.multMono(var52);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    demo.Poly var60 = var59.clone();
    demo.Mono var61 = new demo.Mono();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = var61.clone();
    demo.Poly var64 = var59.sum(var63);
    demo.Poly var65 = var55.mult(var64);
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Poly var68 = var64.multMono(var66);
    demo.Poly var69 = var38.sum(var66);
    demo.Mono var70 = var66.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0"+ "'", var53.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    java.lang.String var60 = var59.toString();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var45.mult(var61);
    demo.Poly var64 = var39.mult(var63);
    java.lang.String var65 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var24.mult(var28);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = var37.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = var37.multMono(var42);
    demo.Poly var47 = var30.mult(var37);
    demo.Mono var51 = new demo.Mono(1, 1, 0);
    demo.Mono var52 = var51.clone();
    var30.add(var52);
    demo.Poly var54 = var30.clone();
    demo.Poly var55 = var5.mult(var54);
    java.lang.String var56 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = var25.clone();
    demo.Mono var30 = var29.clone();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var29.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var5.sum(var8);
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = new demo.Poly();
    demo.Poly var18 = new demo.Poly();
    demo.Mono var19 = new demo.Mono();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var18.sum(var20);
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var17.mult(var21);
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Mono var28 = var26.clone();
    demo.Poly var29 = var23.multMono(var26);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Poly var33 = new demo.Poly();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    demo.Poly var38 = var33.multMono(var35);
    demo.Poly var39 = var30.multMono(var35);
    demo.Poly var40 = var23.mult(var30);
    demo.Poly var41 = var16.mult(var40);
    demo.Poly var42 = var13.mult(var16);
    demo.Poly var43 = new demo.Poly();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    java.lang.String var47 = var45.toString();
    demo.Poly var48 = var43.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Mono var50 = new demo.Mono();
    demo.Mono var51 = var50.clone();
    demo.Poly var52 = var49.sum(var51);
    demo.Poly var53 = var52.clone();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = var54.clone();
    demo.Poly var57 = var52.sum(var56);
    demo.Poly var58 = var48.mult(var57);
    demo.Mono var59 = new demo.Mono();
    demo.Mono var60 = var59.clone();
    demo.Poly var61 = var57.multMono(var59);
    demo.Poly var62 = var16.mult(var61);
    demo.Poly var63 = var11.mult(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var34.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var44.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 0, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = var4.mult(var42);
    demo.Poly var50 = var4.clone();
    demo.Poly var51 = new demo.Poly();
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var51.sum(var53);
    demo.Poly var55 = var54.clone();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = var56.clone();
    demo.Mono var59 = var56.clone();
    demo.Poly var60 = var54.multMono(var59);
    demo.Mono var61 = new demo.Mono();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = var61.clone();
    demo.Poly var64 = var60.sum(var63);
    demo.Poly var65 = var50.mult(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = var25.clone();
    demo.Mono var30 = var29.clone();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var31.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var9.toString();
    demo.Poly var11 = new demo.Poly();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = new demo.Mono();
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    demo.Poly var16 = var11.multMono(var13);
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Poly var21 = var20.clone();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Poly var25 = var20.sum(var24);
    demo.Poly var26 = var16.mult(var25);
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var25.multMono(var27);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = var30.mult(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Mono var41 = var39.clone();
    demo.Poly var42 = var36.multMono(var39);
    var29.add(var39);
    demo.Mono var44 = var39.clone();
    demo.Poly var45 = var9.multMono(var39);
    java.lang.String var46 = var39.toString();
    java.lang.String var47 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var12.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0"+ "'", var15.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Mono var33 = new demo.Mono(1, 1, 0);
    demo.Poly var34 = var14.sum(var33);
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var42);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var43.multMono(var60);
    demo.Poly var64 = var14.multMono(var60);
    demo.Poly var65 = var14.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    java.lang.String var34 = var30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    java.lang.String var19 = var18.toString();
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    java.lang.String var40 = var39.toString();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var25.mult(var41);
    demo.Poly var44 = var18.mult(var25);
    demo.Poly var45 = var44.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    java.lang.String var56 = var54.toString();
    demo.Poly var57 = var52.multMono(var54);
    demo.Poly var58 = var49.multMono(var54);
    demo.Poly var59 = var42.mult(var49);
    demo.Mono var63 = new demo.Mono(1, 1, 0);
    demo.Mono var64 = var63.clone();
    var42.add(var64);
    demo.Poly var66 = var42.clone();
    demo.Mono var70 = new demo.Mono(1, 1, 0);
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var42.multMono(var70);
    demo.Poly var73 = var35.mult(var72);
    demo.Poly var74 = var73.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var54.multMono(var56);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = new demo.Poly();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    java.lang.String var66 = var64.toString();
    demo.Poly var67 = var62.multMono(var64);
    demo.Poly var68 = var59.multMono(var64);
    demo.Poly var69 = var54.multMono(var64);
    demo.Poly var70 = new demo.Poly();
    demo.Poly var71 = var70.clone();
    demo.Poly var72 = var70.clone();
    demo.Mono var73 = new demo.Mono();
    demo.Poly var74 = var72.sum(var73);
    demo.Mono var75 = var73.clone();
    var69.add(var75);
    demo.Poly var77 = var0.multMono(var75);
    java.lang.String var78 = var77.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var78.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    java.lang.String var37 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = new demo.Poly();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    java.lang.String var19 = var17.toString();
    demo.Poly var20 = var15.multMono(var17);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Poly var29 = var24.sum(var28);
    demo.Poly var30 = var20.mult(var29);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var29.sum(var35);
    demo.Poly var37 = var0.sum(var35);
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var16.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var54 = new demo.Mono(1, 1, 0);
    demo.Mono var55 = var54.clone();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var50.sum(var55);
    demo.Poly var58 = var57.clone();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    demo.Mono var61 = var59.clone();
    demo.Mono var62 = var59.clone();
    demo.Mono var63 = var59.clone();
    demo.Mono var64 = var59.clone();
    demo.Mono var65 = var59.clone();
    demo.Poly var66 = var57.sum(var59);
    java.lang.String var67 = var59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 1, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 1, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    java.lang.String var13 = var12.toString();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var14.mult(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var27.clone();
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = var27.multMono(var32);
    demo.Poly var37 = var20.mult(var27);
    demo.Mono var41 = new demo.Mono(1, 1, 0);
    demo.Mono var42 = var41.clone();
    var20.add(var42);
    demo.Poly var44 = var20.clone();
    demo.Poly var45 = new demo.Poly();
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var45.mult(var49);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Mono var56 = var54.clone();
    demo.Poly var57 = var51.multMono(var54);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var51.mult(var58);
    demo.Mono var72 = new demo.Mono(1, 1, 0);
    demo.Mono var73 = var72.clone();
    var51.add(var73);
    demo.Poly var75 = var51.clone();
    demo.Mono var79 = new demo.Mono(1, 1, 0);
    demo.Mono var80 = var79.clone();
    demo.Poly var81 = var51.multMono(var79);
    demo.Poly var82 = var20.multMono(var79);
    demo.Poly var83 = var12.multMono(var79);
    java.lang.String var84 = var83.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var13.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var84.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var55.sum(var59);
    demo.Poly var61 = var51.sum(var59);
    java.lang.String var62 = var59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.multMono(var52);
    java.lang.String var54 = var50.toString();
    demo.Poly var55 = new demo.Poly();
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var55.sum(var57);
    demo.Poly var59 = var58.clone();
    demo.Mono var60 = new demo.Mono();
    java.lang.String var61 = var60.toString();
    demo.Mono var62 = var60.clone();
    demo.Mono var63 = var60.clone();
    demo.Poly var64 = var58.multMono(var63);
    java.lang.String var65 = var64.toString();
    demo.Poly var66 = var50.mult(var64);
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = var67.clone();
    demo.Mono var70 = var69.clone();
    java.lang.String var71 = var69.toString();
    demo.Mono var72 = var69.clone();
    demo.Poly var73 = var50.sum(var69);
    demo.Poly var74 = var73.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var40.clone();
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Poly var47 = var46.clone();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var46.sum(var50);
    demo.Poly var52 = var40.multMono(var50);
    demo.Poly var53 = var38.multMono(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    var4.add(var41);
    demo.Mono var47 = var41.clone();
    java.lang.String var48 = var47.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var6.mult(var37);
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Mono var41 = var39.clone();
    var37.add(var39);
    java.lang.String var43 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    java.lang.String var13 = var6.toString();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var14.clone();
    demo.Mono var17 = new demo.Mono();
    demo.Poly var18 = var16.sum(var17);
    demo.Mono var19 = var17.clone();
    demo.Mono var20 = var17.clone();
    var6.add(var20);
    demo.Mono var22 = var20.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var13.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    demo.Poly var10 = new demo.Poly();
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Poly var13 = var10.sum(var12);
    demo.Poly var14 = var13.clone();
    demo.Mono var15 = new demo.Mono();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = var15.clone();
    demo.Poly var18 = var13.sum(var17);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    demo.Poly var38 = var18.multMono(var35);
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    var38.add(var39);
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = var43.clone();
    demo.Mono var46 = var43.clone();
    demo.Mono var47 = var46.clone();
    var38.add(var47);
    demo.Poly var49 = var9.mult(var38);
    java.lang.String var50 = var38.toString();
    demo.Poly var51 = var38.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = var3.clone();
    demo.Mono var6 = var3.clone();
    demo.Mono var7 = var3.clone();
    demo.Poly var8 = var2.sum(var7);
    demo.Mono var9 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, 1, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, (-1), 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Mono var19 = var16.clone();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var5.sum(var19);
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Mono var25 = var22.clone();
    demo.Mono var26 = var25.clone();
    var21.add(var25);
    java.lang.String var28 = var25.toString();
    demo.Mono var29 = var25.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Mono var28 = new demo.Mono(1, 1, 0);
    demo.Mono var29 = var28.clone();
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var5.multMono(var30);
    demo.Poly var32 = new demo.Poly();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = new demo.Mono();
    java.lang.String var35 = var34.toString();
    java.lang.String var36 = var34.toString();
    demo.Poly var37 = var32.multMono(var34);
    demo.Poly var38 = var32.clone();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Poly var43 = var42.clone();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = var44.clone();
    demo.Poly var47 = var42.sum(var46);
    demo.Poly var48 = new demo.Poly();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    java.lang.String var52 = var50.toString();
    demo.Poly var53 = var48.multMono(var50);
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    demo.Mono var61 = var59.clone();
    demo.Poly var62 = var57.sum(var61);
    demo.Poly var63 = var53.mult(var62);
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var62.multMono(var64);
    demo.Poly var67 = var47.multMono(var64);
    demo.Mono var68 = var64.clone();
    demo.Mono var69 = var68.clone();
    demo.Poly var70 = var32.multMono(var69);
    demo.Poly var71 = var5.mult(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var33.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var49.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var54 = new demo.Mono(1, 1, 0);
    demo.Mono var55 = var54.clone();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var50.sum(var55);
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = new demo.Poly();
    java.lang.String var60 = var59.toString();
    demo.Mono var61 = new demo.Mono();
    java.lang.String var62 = var61.toString();
    java.lang.String var63 = var61.toString();
    demo.Poly var64 = var59.multMono(var61);
    demo.Poly var65 = new demo.Poly();
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Poly var68 = var65.sum(var67);
    demo.Poly var69 = var68.clone();
    demo.Mono var70 = new demo.Mono();
    java.lang.String var71 = var70.toString();
    demo.Mono var72 = var70.clone();
    demo.Poly var73 = var68.sum(var72);
    demo.Poly var74 = var64.mult(var73);
    demo.Poly var75 = new demo.Poly();
    demo.Mono var76 = new demo.Mono();
    demo.Mono var77 = var76.clone();
    demo.Poly var78 = var75.sum(var77);
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var73.sum(var79);
    demo.Poly var81 = var57.mult(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var36 = new demo.Mono((-1), 100, 0);
    demo.Poly var37 = var18.sum(var36);
    demo.Mono var41 = new demo.Mono(1, 1, 1);
    demo.Poly var42 = var37.sum(var41);
    demo.Poly var43 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var9.toString();
    demo.Poly var11 = var9.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var40);
    demo.Mono var47 = new demo.Mono(1, 1, 1);
    demo.Poly var48 = var43.multMono(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    java.lang.String var65 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var4.multMono(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var18);
    demo.Poly var20 = var4.multMono(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Mono var29 = var26.clone();
    demo.Poly var30 = var24.multMono(var29);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var30.sum(var33);
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var40.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var49.multMono(var51);
    demo.Poly var54 = var34.sum(var51);
    demo.Poly var55 = var20.sum(var51);
    demo.Poly var56 = new demo.Poly();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = new demo.Mono();
    java.lang.String var59 = var58.toString();
    java.lang.String var60 = var58.toString();
    demo.Poly var61 = var56.multMono(var58);
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Poly var66 = var65.clone();
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = var67.clone();
    demo.Poly var70 = var65.sum(var69);
    demo.Poly var71 = var61.mult(var70);
    demo.Mono var72 = new demo.Mono();
    demo.Mono var73 = var72.clone();
    demo.Poly var74 = var70.multMono(var72);
    demo.Poly var75 = new demo.Poly();
    demo.Poly var76 = new demo.Poly();
    demo.Mono var77 = new demo.Mono();
    demo.Mono var78 = var77.clone();
    demo.Poly var79 = var76.sum(var78);
    demo.Poly var80 = var79.clone();
    demo.Poly var81 = var75.mult(var79);
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    demo.Mono var86 = var84.clone();
    demo.Poly var87 = var81.multMono(var84);
    var74.add(var84);
    demo.Mono var89 = var84.clone();
    demo.Poly var90 = var55.sum(var84);
    demo.Poly var91 = var55.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var24.mult(var28);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = var37.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = var37.multMono(var42);
    demo.Poly var47 = var30.mult(var37);
    demo.Mono var51 = new demo.Mono(1, 1, 0);
    demo.Mono var52 = var51.clone();
    var30.add(var52);
    demo.Poly var54 = var30.clone();
    demo.Poly var55 = var5.mult(var54);
    demo.Poly var56 = var54.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = var3.clone();
    demo.Poly var6 = new demo.Poly();
    java.lang.String var7 = var6.toString();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    java.lang.String var10 = var8.toString();
    demo.Poly var11 = var6.multMono(var8);
    demo.Poly var12 = var3.multMono(var8);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = var13.mult(var17);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Mono var24 = var22.clone();
    demo.Poly var25 = var19.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = var26.clone();
    demo.Poly var28 = var26.clone();
    demo.Poly var29 = new demo.Poly();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    java.lang.String var33 = var31.toString();
    demo.Poly var34 = var29.multMono(var31);
    demo.Poly var35 = var26.multMono(var31);
    demo.Poly var36 = var19.mult(var26);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Mono var45 = var42.clone();
    demo.Poly var46 = var40.multMono(var45);
    var19.add(var45);
    demo.Poly var48 = var3.sum(var45);
    demo.Mono var49 = var45.clone();
    demo.Mono var50 = var45.clone();
    demo.Poly var51 = var0.multMono(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var30.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var24.mult(var28);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = var37.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = var37.multMono(var42);
    demo.Poly var47 = var30.mult(var37);
    demo.Mono var51 = new demo.Mono(1, 1, 0);
    demo.Mono var52 = var51.clone();
    var30.add(var52);
    demo.Poly var54 = var30.clone();
    demo.Poly var55 = var5.mult(var54);
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = var56.clone();
    demo.Mono var59 = var58.clone();
    java.lang.String var60 = var58.toString();
    demo.Mono var61 = var58.clone();
    demo.Poly var62 = var5.sum(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 100, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = new demo.Poly();
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var11.clone();
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = var11.multMono(var16);
    demo.Poly var21 = new demo.Poly();
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var21.mult(var25);
    demo.Poly var28 = new demo.Poly();
    demo.Mono var29 = new demo.Mono();
    demo.Mono var30 = var29.clone();
    demo.Poly var31 = var28.sum(var30);
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var27.multMono(var30);
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = var34.clone();
    demo.Poly var37 = new demo.Poly();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    java.lang.String var41 = var39.toString();
    demo.Poly var42 = var37.multMono(var39);
    demo.Poly var43 = var34.multMono(var39);
    demo.Poly var44 = var27.mult(var34);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Mono var53 = var50.clone();
    demo.Poly var54 = var48.multMono(var53);
    var27.add(var53);
    demo.Poly var56 = var11.sum(var53);
    demo.Mono var57 = var53.clone();
    demo.Poly var58 = var10.sum(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    var4.add(var41);
    demo.Mono var47 = var41.clone();
    demo.Mono var48 = var47.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    demo.Mono var3 = new demo.Mono((-1), 1, 0);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var53.mult(var57);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.multMono(var62);
    demo.Poly var66 = new demo.Poly();
    demo.Poly var67 = var66.clone();
    demo.Poly var68 = var66.clone();
    demo.Poly var69 = new demo.Poly();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = new demo.Mono();
    java.lang.String var72 = var71.toString();
    java.lang.String var73 = var71.toString();
    demo.Poly var74 = var69.multMono(var71);
    demo.Poly var75 = var66.multMono(var71);
    demo.Poly var76 = var59.mult(var66);
    demo.Poly var77 = var52.mult(var76);
    demo.Mono var81 = new demo.Mono(1, 1, 0);
    demo.Mono var82 = var81.clone();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var52.multMono(var82);
    demo.Poly var85 = var50.sum(var82);
    demo.Mono var86 = new demo.Mono();
    java.lang.String var87 = var86.toString();
    demo.Mono var88 = var86.clone();
    demo.Mono var89 = var86.clone();
    demo.Mono var90 = var86.clone();
    demo.Mono var91 = var86.clone();
    var50.add(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0/1)x^0"+ "'", var87.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = var4.mult(var42);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = new demo.Poly();
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var55.sum(var57);
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var54.multMono(var59);
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Mono var63 = var62.clone();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var54.sum(var62);
    demo.Poly var66 = var4.sum(var62);
    demo.Poly var67 = new demo.Poly();
    demo.Mono var68 = new demo.Mono();
    demo.Mono var69 = var68.clone();
    demo.Poly var70 = var67.sum(var69);
    demo.Poly var71 = var70.clone();
    demo.Mono var72 = new demo.Mono();
    java.lang.String var73 = var72.toString();
    demo.Mono var74 = var72.clone();
    demo.Poly var75 = var70.sum(var74);
    demo.Poly var76 = new demo.Poly();
    java.lang.String var77 = var76.toString();
    demo.Mono var78 = new demo.Mono();
    java.lang.String var79 = var78.toString();
    java.lang.String var80 = var78.toString();
    demo.Poly var81 = var76.multMono(var78);
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    demo.Poly var86 = var85.clone();
    demo.Mono var87 = new demo.Mono();
    java.lang.String var88 = var87.toString();
    demo.Mono var89 = var87.clone();
    demo.Poly var90 = var85.sum(var89);
    demo.Poly var91 = var81.mult(var90);
    demo.Mono var92 = new demo.Mono();
    demo.Mono var93 = var92.clone();
    demo.Poly var94 = var90.multMono(var92);
    demo.Poly var95 = var75.multMono(var92);
    demo.Mono var96 = var92.clone();
    demo.Poly var97 = var4.multMono(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var77.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(0/1)x^0"+ "'", var79.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(0/1)x^0"+ "'", var80.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(0/1)x^0"+ "'", var88.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    var28.add(var29);
    demo.Poly var33 = new demo.Poly();
    demo.Poly var34 = var33.clone();
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Poly var43 = var42.clone();
    demo.Poly var44 = var38.mult(var42);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var44.multMono(var47);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var51.clone();
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = var51.multMono(var56);
    demo.Poly var61 = var44.mult(var51);
    demo.Poly var62 = var37.mult(var61);
    demo.Poly var63 = var34.mult(var37);
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    demo.Mono var66 = var64.clone();
    demo.Mono var67 = var64.clone();
    demo.Poly var68 = var37.multMono(var67);
    demo.Poly var69 = var28.multMono(var67);
    demo.Mono var70 = new demo.Mono();
    java.lang.String var71 = var70.toString();
    demo.Mono var72 = var70.clone();
    demo.Mono var73 = var70.clone();
    demo.Poly var74 = var69.sum(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    java.lang.String var19 = var18.toString();
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    java.lang.String var40 = var39.toString();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var25.mult(var41);
    demo.Poly var44 = var18.mult(var25);
    java.lang.String var45 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Mono var9 = var7.clone();
    demo.Poly var10 = var4.multMono(var9);
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var14.sum(var18);
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var34.multMono(var36);
    demo.Poly var39 = var19.multMono(var36);
    demo.Poly var40 = var4.mult(var19);
    demo.Poly var41 = var19.clone();
    demo.Poly var42 = var41.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var40);
    java.lang.String var44 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var2.multMono(var6);
    demo.Poly var9 = var2.clone();
    demo.Poly var10 = var2.clone();
    demo.Poly var11 = new demo.Poly();
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var11.clone();
    demo.Mono var14 = new demo.Mono();
    demo.Poly var15 = var13.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Mono var17 = var14.clone();
    java.lang.String var18 = var17.toString();
    var2.add(var17);
    demo.Poly var20 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Poly var25 = var5.clone();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.multMono(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = new demo.Poly();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    java.lang.String var50 = var48.toString();
    demo.Poly var51 = var46.multMono(var48);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var55.sum(var59);
    demo.Poly var61 = var51.mult(var60);
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Poly var64 = var60.multMono(var62);
    demo.Poly var65 = var45.multMono(var62);
    demo.Poly var66 = var30.mult(var45);
    demo.Poly var67 = var45.clone();
    demo.Poly var68 = new demo.Poly();
    demo.Poly var69 = new demo.Poly();
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var69.sum(var71);
    demo.Poly var73 = var72.clone();
    demo.Poly var74 = var68.mult(var72);
    demo.Poly var75 = new demo.Poly();
    demo.Poly var76 = var75.clone();
    demo.Poly var77 = var75.clone();
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Mono var80 = var78.clone();
    demo.Poly var81 = var75.sum(var78);
    var68.add(var78);
    java.lang.String var83 = var78.toString();
    demo.Mono var84 = var78.clone();
    var67.add(var78);
    demo.Poly var86 = var5.sum(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0/1)x^0"+ "'", var83.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var40);
    demo.Poly var44 = var43.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var35.clone();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var13.sum(var35);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = new demo.Poly();
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Poly var43 = var40.sum(var42);
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var39.mult(var43);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var45.multMono(var48);
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = var52.clone();
    demo.Poly var54 = var52.clone();
    demo.Poly var55 = new demo.Poly();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    java.lang.String var59 = var57.toString();
    demo.Poly var60 = var55.multMono(var57);
    demo.Poly var61 = var52.multMono(var57);
    demo.Poly var62 = var45.mult(var52);
    java.lang.String var63 = var62.toString();
    demo.Poly var64 = var13.mult(var62);
    demo.Mono var68 = new demo.Mono(0, 100, 0);
    demo.Mono var69 = var68.clone();
    demo.Poly var70 = var64.sum(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    java.lang.String var24 = var23.toString();
    demo.Poly var25 = var23.clone();
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = var26.clone();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Poly var55 = var30.mult(var54);
    demo.Poly var56 = var27.mult(var30);
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = var57.clone();
    demo.Mono var60 = var57.clone();
    demo.Poly var61 = var30.multMono(var60);
    demo.Poly var62 = new demo.Poly();
    demo.Poly var63 = var62.clone();
    demo.Poly var64 = var62.clone();
    demo.Poly var65 = new demo.Poly();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    java.lang.String var69 = var67.toString();
    demo.Poly var70 = var65.multMono(var67);
    demo.Poly var71 = var62.multMono(var67);
    var30.add(var67);
    demo.Mono var73 = var67.clone();
    demo.Poly var74 = var23.sum(var73);
    java.lang.String var75 = var73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var66.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var25);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = new demo.Poly();
    java.lang.String var37 = var36.toString();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    demo.Poly var41 = var36.multMono(var38);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = var41.mult(var50);
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var50.multMono(var52);
    demo.Poly var55 = var35.multMono(var52);
    demo.Poly var56 = var20.mult(var35);
    demo.Poly var57 = var35.clone();
    demo.Poly var58 = var14.mult(var57);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = var57.mult(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var2.multMono(var6);
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var9.clone();
    demo.Poly var12 = new demo.Poly();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = new demo.Mono();
    java.lang.String var15 = var14.toString();
    java.lang.String var16 = var14.toString();
    demo.Poly var17 = var12.multMono(var14);
    demo.Poly var18 = var9.multMono(var14);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = var32.multMono(var37);
    demo.Poly var42 = var25.mult(var32);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Poly var47 = var46.clone();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Mono var51 = var48.clone();
    demo.Poly var52 = var46.multMono(var51);
    var25.add(var51);
    demo.Poly var54 = var9.sum(var51);
    demo.Poly var55 = var54.clone();
    demo.Poly var56 = new demo.Poly();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = new demo.Mono();
    java.lang.String var59 = var58.toString();
    java.lang.String var60 = var58.toString();
    demo.Poly var61 = var56.multMono(var58);
    demo.Poly var62 = var56.clone();
    demo.Poly var63 = var55.mult(var62);
    demo.Poly var64 = var2.mult(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var13.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0"+ "'", var15.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Mono var68 = var65.clone();
    demo.Mono var69 = var65.clone();
    var64.add(var69);
    demo.Mono var71 = var69.clone();
    demo.Mono var72 = var69.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    java.lang.String var7 = var6.toString();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    java.lang.String var10 = var8.toString();
    demo.Poly var11 = var6.multMono(var8);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Poly var16 = var15.clone();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var15.sum(var19);
    demo.Poly var21 = var11.mult(var20);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    java.lang.String var26 = var25.toString();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var11.mult(var27);
    demo.Poly var30 = var11.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var11.multMono(var36);
    var5.add(var36);
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var48.sum(var52);
    demo.Poly var54 = var44.mult(var53);
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var53.multMono(var55);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var53.multMono(var63);
    demo.Poly var69 = new demo.Poly();
    demo.Poly var70 = var69.clone();
    demo.Poly var71 = var69.clone();
    demo.Mono var72 = new demo.Mono();
    demo.Poly var73 = var71.sum(var72);
    demo.Mono var74 = var72.clone();
    var68.add(var74);
    demo.Poly var76 = var68.clone();
    demo.Poly var77 = var5.mult(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var26.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = var19.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Poly var28 = var25.multMono(var26);
    demo.Poly var29 = var18.sum(var26);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.sum(var33);
    java.lang.String var37 = var30.toString();
    demo.Poly var38 = var30.clone();
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = new demo.Poly();
    demo.Poly var43 = var42.clone();
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Poly var50 = var44.mult(var48);
    demo.Poly var51 = new demo.Poly();
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var51.sum(var53);
    demo.Mono var55 = var53.clone();
    demo.Poly var56 = var50.multMono(var53);
    demo.Poly var57 = new demo.Poly();
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var57.clone();
    demo.Poly var60 = new demo.Poly();
    java.lang.String var61 = var60.toString();
    demo.Mono var62 = new demo.Mono();
    java.lang.String var63 = var62.toString();
    java.lang.String var64 = var62.toString();
    demo.Poly var65 = var60.multMono(var62);
    demo.Poly var66 = var57.multMono(var62);
    demo.Poly var67 = var50.mult(var57);
    demo.Poly var68 = var43.mult(var67);
    demo.Poly var69 = var40.mult(var43);
    demo.Poly var70 = var38.mult(var40);
    demo.Poly var71 = new demo.Poly();
    demo.Poly var72 = var71.clone();
    demo.Poly var73 = var71.clone();
    demo.Mono var74 = new demo.Mono();
    demo.Poly var75 = var73.sum(var74);
    demo.Mono var76 = new demo.Mono();
    demo.Mono var77 = var76.clone();
    demo.Mono var78 = var77.clone();
    demo.Poly var79 = var75.multMono(var78);
    demo.Poly var80 = new demo.Poly();
    demo.Mono var81 = new demo.Mono();
    demo.Mono var82 = var81.clone();
    demo.Poly var83 = var80.sum(var82);
    demo.Poly var84 = var83.clone();
    demo.Poly var85 = new demo.Poly();
    demo.Mono var86 = new demo.Mono();
    demo.Mono var87 = var86.clone();
    demo.Poly var88 = var85.sum(var87);
    demo.Mono var89 = var87.clone();
    demo.Poly var90 = var84.multMono(var89);
    demo.Poly var91 = var75.multMono(var89);
    demo.Poly var92 = var40.multMono(var89);
    demo.Poly var93 = var29.multMono(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var61.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    demo.Mono var3 = new demo.Mono(0, 10, 1);
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/10)x^1"+ "'", var4.equals("(0/10)x^1"));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    java.lang.String var42 = var41.toString();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var37.mult(var44);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Mono var54 = var51.clone();
    demo.Poly var55 = var49.multMono(var54);
    var37.add(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var0.sum(var40);
    java.lang.String var42 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Mono var19 = var16.clone();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var5.sum(var19);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Poly var26 = var25.clone();
    demo.Mono var27 = new demo.Mono();
    java.lang.String var28 = var27.toString();
    demo.Mono var29 = var27.clone();
    demo.Mono var30 = var27.clone();
    demo.Poly var31 = var25.multMono(var30);
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var31.sum(var34);
    demo.Poly var36 = new demo.Poly();
    java.lang.String var37 = var36.toString();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    demo.Poly var41 = var36.multMono(var38);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = var41.mult(var50);
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var50.multMono(var52);
    demo.Poly var55 = var35.sum(var52);
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Mono var58 = var57.clone();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var35.sum(var57);
    demo.Mono var61 = var57.clone();
    var21.add(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Poly var34 = var33.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var25);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = new demo.Poly();
    java.lang.String var37 = var36.toString();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    demo.Poly var41 = var36.multMono(var38);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = var41.mult(var50);
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var50.multMono(var52);
    demo.Poly var55 = var35.multMono(var52);
    demo.Poly var56 = var20.mult(var35);
    demo.Poly var57 = var35.clone();
    demo.Poly var58 = var14.mult(var57);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var59.clone();
    demo.Mono var62 = new demo.Mono();
    demo.Poly var63 = var61.sum(var62);
    demo.Mono var64 = var62.clone();
    var58.add(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    demo.Mono var3 = new demo.Mono(10, 1, 1);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    demo.Poly var6 = new demo.Poly();
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = new demo.Poly();
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var11.mult(var15);
    demo.Poly var18 = new demo.Poly();
    demo.Mono var19 = new demo.Mono();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var18.sum(var20);
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var17.multMono(var20);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = var24.clone();
    demo.Poly var26 = var24.clone();
    demo.Poly var27 = new demo.Poly();
    java.lang.String var28 = var27.toString();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    java.lang.String var31 = var29.toString();
    demo.Poly var32 = var27.multMono(var29);
    demo.Poly var33 = var24.multMono(var29);
    demo.Poly var34 = var17.mult(var24);
    demo.Poly var35 = var10.mult(var34);
    demo.Poly var36 = var7.mult(var10);
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = var37.clone();
    demo.Mono var40 = var37.clone();
    demo.Poly var41 = var10.multMono(var40);
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Mono var45 = var44.clone();
    java.lang.String var46 = var44.toString();
    demo.Mono var47 = var44.clone();
    var10.add(var44);
    demo.Poly var49 = var3.multMono(var44);
    demo.Mono var50 = new demo.Mono();
    demo.Mono var51 = var50.clone();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var3.multMono(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var5.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var28.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var4.multMono(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var18);
    demo.Poly var20 = var4.multMono(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Mono var29 = var26.clone();
    demo.Poly var30 = var24.multMono(var29);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var30.sum(var33);
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var40.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var49.multMono(var51);
    demo.Poly var54 = var34.sum(var51);
    demo.Poly var55 = var20.sum(var51);
    demo.Poly var56 = new demo.Poly();
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = var56.mult(var60);
    demo.Poly var63 = new demo.Poly();
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var63.sum(var65);
    demo.Mono var67 = var65.clone();
    demo.Poly var68 = var62.multMono(var65);
    demo.Poly var69 = new demo.Poly();
    demo.Poly var70 = var69.clone();
    demo.Poly var71 = var69.clone();
    demo.Poly var72 = new demo.Poly();
    java.lang.String var73 = var72.toString();
    demo.Mono var74 = new demo.Mono();
    java.lang.String var75 = var74.toString();
    java.lang.String var76 = var74.toString();
    demo.Poly var77 = var72.multMono(var74);
    demo.Poly var78 = var69.multMono(var74);
    demo.Poly var79 = var62.mult(var69);
    java.lang.String var80 = var79.toString();
    demo.Poly var81 = var79.clone();
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    demo.Poly var86 = var85.clone();
    demo.Mono var87 = new demo.Mono();
    java.lang.String var88 = var87.toString();
    demo.Mono var89 = var87.clone();
    demo.Poly var90 = var85.sum(var89);
    var79.add(var89);
    demo.Mono var92 = var89.clone();
    var55.add(var92);
    demo.Mono var94 = var92.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var73.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(0/1)x^0"+ "'", var76.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var80.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(0/1)x^0"+ "'", var88.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    java.lang.String var56 = var54.toString();
    demo.Poly var57 = var52.multMono(var54);
    demo.Poly var58 = var49.multMono(var54);
    demo.Poly var59 = var42.mult(var49);
    demo.Poly var60 = var35.mult(var59);
    demo.Poly var61 = var32.mult(var35);
    demo.Mono var62 = new demo.Mono();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = var62.clone();
    demo.Mono var65 = var62.clone();
    demo.Poly var66 = var35.multMono(var65);
    demo.Poly var67 = new demo.Poly();
    demo.Poly var68 = new demo.Poly();
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Poly var71 = var68.sum(var70);
    demo.Poly var72 = var71.clone();
    demo.Poly var73 = var67.mult(var71);
    demo.Poly var74 = new demo.Poly();
    demo.Mono var75 = new demo.Mono();
    demo.Mono var76 = var75.clone();
    demo.Poly var77 = var74.sum(var76);
    demo.Mono var78 = var76.clone();
    demo.Poly var79 = var73.multMono(var76);
    demo.Poly var80 = var35.mult(var73);
    demo.Poly var81 = new demo.Poly();
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var81.sum(var83);
    demo.Poly var85 = var84.clone();
    demo.Poly var86 = new demo.Poly();
    demo.Mono var87 = new demo.Mono();
    demo.Mono var88 = var87.clone();
    demo.Poly var89 = var86.sum(var88);
    demo.Mono var90 = var88.clone();
    demo.Poly var91 = var85.multMono(var90);
    demo.Mono var92 = new demo.Mono();
    demo.Mono var93 = var92.clone();
    demo.Mono var94 = var93.clone();
    demo.Mono var95 = var93.clone();
    demo.Poly var96 = var85.sum(var93);
    demo.Poly var97 = var35.sum(var93);
    demo.Poly var98 = var30.sum(var93);
    demo.Poly var99 = var30.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = var3.clone();
    demo.Mono var6 = var3.clone();
    demo.Mono var7 = var3.clone();
    demo.Poly var8 = var2.sum(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var14.mult(var18);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var27.clone();
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = var27.multMono(var32);
    demo.Poly var37 = var20.mult(var27);
    demo.Poly var38 = var13.mult(var37);
    demo.Poly var39 = var10.mult(var13);
    demo.Poly var40 = var13.clone();
    demo.Mono var44 = new demo.Mono(1, 1, 0);
    demo.Mono var45 = var44.clone();
    demo.Mono var46 = var44.clone();
    var13.add(var44);
    demo.Poly var48 = var2.multMono(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var38.multMono(var48);
    var0.add(var48);
    java.lang.String var52 = var0.toString();
    demo.Poly var53 = new demo.Poly();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    java.lang.String var57 = var55.toString();
    demo.Poly var58 = var53.multMono(var55);
    demo.Poly var59 = new demo.Poly();
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var59.sum(var61);
    demo.Poly var63 = var62.clone();
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var62.sum(var66);
    demo.Poly var68 = var58.mult(var67);
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Poly var71 = var67.multMono(var69);
    demo.Poly var72 = var0.sum(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var53.mult(var57);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.multMono(var62);
    demo.Poly var66 = new demo.Poly();
    demo.Poly var67 = var66.clone();
    demo.Poly var68 = var66.clone();
    demo.Poly var69 = new demo.Poly();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = new demo.Mono();
    java.lang.String var72 = var71.toString();
    java.lang.String var73 = var71.toString();
    demo.Poly var74 = var69.multMono(var71);
    demo.Poly var75 = var66.multMono(var71);
    demo.Poly var76 = var59.mult(var66);
    demo.Poly var77 = var52.mult(var76);
    demo.Mono var81 = new demo.Mono(1, 1, 0);
    demo.Mono var82 = var81.clone();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var52.multMono(var82);
    demo.Poly var85 = var50.sum(var82);
    java.lang.String var86 = var82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(1/1)x^0"+ "'", var86.equals("(1/1)x^0"));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Poly var51 = new demo.Poly();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = var51.multMono(var53);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Mono var61 = var59.clone();
    demo.Poly var62 = var56.sum(var59);
    demo.Mono var66 = new demo.Mono(1, 1, 0);
    demo.Mono var67 = var66.clone();
    java.lang.String var68 = var67.toString();
    demo.Poly var69 = var56.sum(var67);
    java.lang.String var70 = var56.toString();
    demo.Poly var71 = var50.mult(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(1/1)x^0"+ "'", var68.equals("(1/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var9.toString();
    demo.Poly var11 = new demo.Poly();
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var11.mult(var15);
    demo.Poly var18 = new demo.Poly();
    demo.Mono var19 = new demo.Mono();
    demo.Mono var20 = var19.clone();
    demo.Poly var21 = var18.sum(var20);
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var17.multMono(var20);
    demo.Poly var24 = new demo.Poly();
    demo.Poly var25 = var24.clone();
    demo.Poly var26 = var24.clone();
    demo.Poly var27 = new demo.Poly();
    java.lang.String var28 = var27.toString();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    java.lang.String var31 = var29.toString();
    demo.Poly var32 = var27.multMono(var29);
    demo.Poly var33 = var24.multMono(var29);
    demo.Poly var34 = var17.mult(var24);
    demo.Mono var38 = new demo.Mono(1, 1, 0);
    demo.Mono var39 = var38.clone();
    var17.add(var39);
    demo.Poly var41 = var17.clone();
    demo.Mono var45 = new demo.Mono(1, 1, 0);
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var17.multMono(var45);
    demo.Poly var48 = new demo.Poly();
    demo.Poly var49 = var17.mult(var48);
    demo.Mono var50 = new demo.Mono();
    demo.Mono var51 = var50.clone();
    demo.Mono var52 = var50.clone();
    var48.add(var50);
    var9.add(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var28.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    demo.Mono var0 = new demo.Mono();
    demo.Mono var1 = var0.clone();
    demo.Mono var2 = var1.clone();
    demo.Mono var3 = var2.clone();
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var51.clone();
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = var51.multMono(var56);
    demo.Poly var61 = var49.sum(var56);
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = new demo.Poly();
    demo.Poly var64 = new demo.Poly();
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.sum(var66);
    demo.Poly var68 = var67.clone();
    demo.Poly var69 = var63.mult(var67);
    demo.Poly var70 = new demo.Poly();
    demo.Poly var71 = var70.clone();
    demo.Poly var72 = var70.clone();
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Mono var75 = var73.clone();
    demo.Poly var76 = var70.sum(var73);
    var63.add(var73);
    demo.Poly var78 = var63.clone();
    demo.Mono var82 = new demo.Mono(1, 1, 0);
    demo.Mono var83 = var82.clone();
    demo.Mono var84 = var82.clone();
    demo.Poly var85 = var63.multMono(var84);
    demo.Poly var86 = var61.multMono(var84);
    java.lang.String var87 = var86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var87.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = var3.clone();
    demo.Mono var6 = var3.clone();
    demo.Mono var7 = var3.clone();
    demo.Poly var8 = var2.sum(var7);
    demo.Poly var9 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Mono var34 = var30.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = new demo.Poly();
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = var32.multMono(var37);
    demo.Poly var42 = var25.mult(var32);
    demo.Poly var43 = var18.mult(var42);
    demo.Poly var44 = var15.mult(var18);
    demo.Poly var45 = new demo.Poly();
    java.lang.String var46 = var45.toString();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    java.lang.String var49 = var47.toString();
    demo.Poly var50 = var45.multMono(var47);
    demo.Poly var51 = new demo.Poly();
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var51.sum(var53);
    demo.Poly var55 = var54.clone();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var54.sum(var58);
    demo.Poly var60 = var50.mult(var59);
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var59.multMono(var61);
    demo.Poly var64 = var18.mult(var63);
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.multMono(var66);
    demo.Poly var68 = var7.sum(var66);
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Mono var71 = var70.clone();
    demo.Mono var72 = var70.clone();
    demo.Mono var73 = var72.clone();
    var68.add(var72);
    demo.Poly var75 = var0.mult(var68);
    demo.Poly var76 = var68.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var46.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = new demo.Mono();
    java.lang.String var28 = var27.toString();
    java.lang.String var29 = var27.toString();
    demo.Poly var30 = var25.multMono(var27);
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Mono var41 = var39.clone();
    demo.Poly var42 = var36.multMono(var41);
    demo.Poly var43 = var31.sum(var41);
    demo.Poly var44 = var23.mult(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var26.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Mono var36 = var35.clone();
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var13.sum(var35);
    demo.Mono var39 = var35.clone();
    java.lang.String var40 = var35.toString();
    demo.Mono var41 = var35.clone();
    demo.Mono var42 = var41.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 1, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    java.lang.String var60 = var59.toString();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var45.mult(var61);
    demo.Poly var64 = var39.mult(var63);
    demo.Poly var65 = var39.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var2.multMono(var6);
    demo.Poly var9 = var2.clone();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var15.mult(var19);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Mono var26 = var24.clone();
    demo.Poly var27 = var21.multMono(var24);
    demo.Poly var28 = new demo.Poly();
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var28.clone();
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = var28.multMono(var33);
    demo.Poly var38 = var21.mult(var28);
    demo.Poly var39 = var14.mult(var38);
    demo.Poly var40 = var11.mult(var14);
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = new demo.Poly();
    demo.Mono var48 = new demo.Mono();
    demo.Mono var49 = var48.clone();
    demo.Poly var50 = var47.sum(var49);
    demo.Poly var51 = var50.clone();
    demo.Mono var52 = new demo.Mono();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = var52.clone();
    demo.Poly var55 = var50.sum(var54);
    demo.Poly var56 = var46.mult(var55);
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var55.multMono(var57);
    demo.Poly var60 = var14.mult(var59);
    demo.Poly var61 = new demo.Poly();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var61.clone();
    demo.Poly var64 = new demo.Poly();
    java.lang.String var65 = var64.toString();
    demo.Mono var66 = new demo.Mono();
    java.lang.String var67 = var66.toString();
    java.lang.String var68 = var66.toString();
    demo.Poly var69 = var64.multMono(var66);
    demo.Poly var70 = var61.multMono(var66);
    demo.Poly var71 = var59.sum(var66);
    demo.Poly var72 = var71.clone();
    demo.Poly var73 = new demo.Poly();
    demo.Poly var74 = new demo.Poly();
    demo.Mono var75 = new demo.Mono();
    demo.Mono var76 = var75.clone();
    demo.Poly var77 = var74.sum(var76);
    demo.Poly var78 = var77.clone();
    demo.Poly var79 = var73.mult(var77);
    demo.Poly var80 = new demo.Poly();
    demo.Poly var81 = var80.clone();
    demo.Poly var82 = var80.clone();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Mono var85 = var83.clone();
    demo.Poly var86 = var80.sum(var83);
    var73.add(var83);
    demo.Poly var88 = var73.clone();
    demo.Mono var92 = new demo.Mono(1, 1, 0);
    demo.Mono var93 = var92.clone();
    demo.Mono var94 = var92.clone();
    demo.Poly var95 = var73.multMono(var94);
    demo.Poly var96 = var71.multMono(var94);
    demo.Poly var97 = var71.clone();
    demo.Poly var98 = var9.mult(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0"+ "'", var53.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Poly var65 = var17.clone();
    demo.Poly var66 = new demo.Poly();
    java.lang.String var67 = var66.toString();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    java.lang.String var70 = var68.toString();
    demo.Poly var71 = var66.multMono(var68);
    demo.Poly var72 = new demo.Poly();
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var72.sum(var74);
    demo.Poly var76 = var75.clone();
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var75.sum(var79);
    demo.Poly var81 = var71.mult(var80);
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    demo.Mono var86 = var84.clone();
    demo.Poly var87 = var80.sum(var86);
    var65.add(var86);
    demo.Mono var89 = var86.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var67.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Mono var16 = new demo.Mono(1, 1, 0);
    var12.add(var16);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = new demo.Poly();
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = var30.mult(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Mono var41 = var39.clone();
    demo.Poly var42 = var36.multMono(var39);
    demo.Poly var43 = new demo.Poly();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var43.clone();
    demo.Poly var46 = new demo.Poly();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    java.lang.String var50 = var48.toString();
    demo.Poly var51 = var46.multMono(var48);
    demo.Poly var52 = var43.multMono(var48);
    demo.Poly var53 = var36.mult(var43);
    demo.Poly var54 = var29.mult(var53);
    demo.Poly var55 = var18.mult(var53);
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var18.sum(var58);
    demo.Poly var60 = var12.sum(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var6.mult(var37);
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Mono var41 = var39.clone();
    var37.add(var39);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    var37.add(var45);
    demo.Poly var48 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    java.lang.String var60 = var59.toString();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var45.mult(var61);
    demo.Poly var64 = var39.mult(var63);
    demo.Poly var65 = new demo.Poly();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    java.lang.String var69 = var67.toString();
    demo.Poly var70 = var65.multMono(var67);
    demo.Poly var71 = new demo.Poly();
    demo.Mono var72 = new demo.Mono();
    demo.Mono var73 = var72.clone();
    demo.Poly var74 = var71.sum(var73);
    demo.Poly var75 = var74.clone();
    demo.Mono var76 = new demo.Mono();
    java.lang.String var77 = var76.toString();
    demo.Mono var78 = var76.clone();
    demo.Poly var79 = var74.sum(var78);
    demo.Poly var80 = var70.mult(var79);
    demo.Poly var81 = new demo.Poly();
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var81.sum(var83);
    java.lang.String var85 = var84.toString();
    demo.Poly var86 = var84.clone();
    demo.Poly var87 = var86.clone();
    demo.Poly var88 = var70.mult(var86);
    demo.Poly var89 = var70.clone();
    demo.Mono var93 = new demo.Mono(1, 1, 0);
    demo.Mono var94 = var93.clone();
    demo.Mono var95 = var93.clone();
    demo.Poly var96 = var70.multMono(var95);
    demo.Poly var97 = var64.sum(var95);
    java.lang.String var98 = var64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var66.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var85.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var98.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(1, (-1), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    demo.Mono var3 = new demo.Mono(1, 100, 0);
    demo.Mono var4 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = new demo.Poly();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    java.lang.String var19 = var17.toString();
    demo.Poly var20 = var15.multMono(var17);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Poly var29 = var24.sum(var28);
    demo.Poly var30 = var20.mult(var29);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var29.sum(var35);
    demo.Poly var37 = var0.sum(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var37.mult(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var16.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, (-1), 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Mono var58 = new demo.Mono(1, 1, 0);
    demo.Mono var59 = var58.clone();
    var37.add(var59);
    demo.Poly var61 = var37.clone();
    demo.Mono var65 = new demo.Mono(1, 1, 0);
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var37.multMono(var65);
    demo.Poly var68 = var6.multMono(var65);
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Mono var71 = var70.clone();
    java.lang.String var72 = var71.toString();
    demo.Poly var73 = var6.multMono(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Poly var55 = var30.mult(var54);
    demo.Poly var56 = var8.mult(var54);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var61.multMono(var66);
    java.lang.String var68 = var66.toString();
    demo.Poly var69 = var54.multMono(var66);
    java.lang.String var70 = var69.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Mono var20 = var18.clone();
    demo.Poly var21 = var14.sum(var20);
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = new demo.Poly();
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var29.sum(var31);
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Mono var38 = var36.clone();
    demo.Poly var39 = var33.multMono(var38);
    demo.Poly var40 = var28.sum(var38);
    demo.Poly var41 = var14.mult(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var53.mult(var57);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.multMono(var62);
    demo.Poly var66 = new demo.Poly();
    demo.Poly var67 = var66.clone();
    demo.Poly var68 = var66.clone();
    demo.Poly var69 = new demo.Poly();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = new demo.Mono();
    java.lang.String var72 = var71.toString();
    java.lang.String var73 = var71.toString();
    demo.Poly var74 = var69.multMono(var71);
    demo.Poly var75 = var66.multMono(var71);
    demo.Poly var76 = var59.mult(var66);
    demo.Poly var77 = var52.mult(var76);
    demo.Mono var81 = new demo.Mono(1, 1, 0);
    demo.Mono var82 = var81.clone();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var52.multMono(var82);
    demo.Poly var85 = var50.sum(var82);
    demo.Poly var86 = var85.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = var4.mult(var42);
    java.lang.String var50 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var29.clone();
    demo.Poly var33 = var27.multMono(var32);
    var6.add(var32);
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var40.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var49.multMono(var51);
    demo.Poly var54 = new demo.Poly();
    demo.Poly var55 = var54.clone();
    demo.Poly var56 = var54.clone();
    demo.Poly var57 = new demo.Poly();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    demo.Poly var62 = var57.multMono(var59);
    demo.Poly var63 = var54.multMono(var59);
    demo.Poly var64 = var49.multMono(var59);
    demo.Mono var68 = new demo.Mono(1, 1, 0);
    demo.Poly var69 = var49.sum(var68);
    demo.Poly var70 = var6.mult(var49);
    demo.Poly var71 = new demo.Poly();
    demo.Poly var72 = new demo.Poly();
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var72.sum(var74);
    demo.Poly var76 = var75.clone();
    demo.Poly var77 = var71.mult(var75);
    demo.Poly var78 = new demo.Poly();
    demo.Mono var79 = new demo.Mono();
    demo.Mono var80 = var79.clone();
    demo.Poly var81 = var78.sum(var80);
    demo.Mono var82 = var80.clone();
    demo.Poly var83 = var77.multMono(var80);
    demo.Poly var84 = new demo.Poly();
    demo.Poly var85 = var84.clone();
    demo.Poly var86 = var84.clone();
    demo.Poly var87 = new demo.Poly();
    java.lang.String var88 = var87.toString();
    demo.Mono var89 = new demo.Mono();
    java.lang.String var90 = var89.toString();
    java.lang.String var91 = var89.toString();
    demo.Poly var92 = var87.multMono(var89);
    demo.Poly var93 = var84.multMono(var89);
    demo.Poly var94 = var77.mult(var84);
    demo.Poly var95 = var70.mult(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var58.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var88.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(0/1)x^0"+ "'", var90.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(0/1)x^0"+ "'", var91.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Poly var9 = var8.clone();
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var8.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.multMono(var30);
    demo.Poly var34 = var3.mult(var33);
    demo.Mono var38 = new demo.Mono(100, 100, 0);
    demo.Poly var39 = var33.multMono(var38);
    demo.Mono var40 = var38.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    java.lang.String var60 = var59.toString();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var45.mult(var61);
    demo.Poly var64 = var39.mult(var63);
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Mono var68 = var67.clone();
    demo.Poly var69 = var64.sum(var67);
    demo.Poly var70 = var69.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var5.sum(var8);
    demo.Poly var12 = var11.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = var3.clone();
    demo.Poly var6 = new demo.Poly();
    java.lang.String var7 = var6.toString();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    java.lang.String var10 = var8.toString();
    demo.Poly var11 = var6.multMono(var8);
    demo.Poly var12 = var3.multMono(var8);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var15.mult(var19);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Mono var26 = var24.clone();
    demo.Poly var27 = var21.multMono(var24);
    demo.Poly var28 = new demo.Poly();
    demo.Poly var29 = var28.clone();
    demo.Poly var30 = var28.clone();
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = var28.multMono(var33);
    demo.Poly var38 = var21.mult(var28);
    demo.Poly var39 = var14.mult(var38);
    demo.Poly var40 = var3.mult(var38);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    var38.add(var42);
    demo.Poly var46 = var1.multMono(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Mono var43 = new demo.Mono(10, 100, 0);
    demo.Poly var44 = var0.multMono(var43);
    demo.Mono var48 = new demo.Mono((-1), 100, 0);
    var0.add(var48);
    java.lang.String var50 = var48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(-1/100)x^0"+ "'", var50.equals("(-1/100)x^0"));

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    var4.add(var41);
    demo.Mono var47 = var41.clone();
    demo.Mono var48 = var41.clone();
    java.lang.String var49 = var41.toString();
    demo.Mono var50 = var41.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    java.lang.String var24 = var23.toString();
    demo.Poly var25 = var23.clone();
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var26.mult(var30);
    demo.Poly var33 = new demo.Poly();
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var33.sum(var35);
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var32.multMono(var35);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = new demo.Poly();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    java.lang.String var46 = var44.toString();
    demo.Poly var47 = var42.multMono(var44);
    demo.Poly var48 = var39.multMono(var44);
    demo.Poly var49 = var32.mult(var39);
    java.lang.String var50 = var49.toString();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = var57.clone();
    demo.Poly var60 = var55.sum(var59);
    var49.add(var59);
    java.lang.String var62 = var59.toString();
    demo.Poly var63 = var23.sum(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var16.clone();
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = var16.multMono(var21);
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var26.mult(var30);
    demo.Poly var33 = new demo.Poly();
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var33.sum(var35);
    demo.Mono var37 = var35.clone();
    demo.Poly var38 = var32.multMono(var35);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = new demo.Poly();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    java.lang.String var46 = var44.toString();
    demo.Poly var47 = var42.multMono(var44);
    demo.Poly var48 = var39.multMono(var44);
    demo.Poly var49 = var32.mult(var39);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Mono var58 = var55.clone();
    demo.Poly var59 = var53.multMono(var58);
    var32.add(var58);
    demo.Poly var61 = var16.sum(var58);
    demo.Mono var62 = var58.clone();
    demo.Mono var63 = var58.clone();
    var14.add(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    java.lang.String var7 = var0.toString();
    demo.Poly var8 = var0.clone();
    java.lang.String var9 = var8.toString();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = var10.clone();
    demo.Mono var13 = new demo.Mono();
    demo.Poly var14 = var12.sum(var13);
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var12.multMono(var16);
    demo.Poly var19 = var12.clone();
    demo.Poly var20 = var12.clone();
    demo.Poly var21 = var8.mult(var20);
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Mono var25 = var22.clone();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var20.sum(var26);
    demo.Poly var28 = var20.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var9.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 100, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.sum(var30);
    demo.Poly var34 = new demo.Poly();
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var34.sum(var36);
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Mono var43 = var41.clone();
    demo.Poly var44 = var38.multMono(var43);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var48.sum(var52);
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Poly var64 = var63.clone();
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = var65.clone();
    demo.Poly var68 = var63.sum(var67);
    demo.Poly var69 = var59.mult(var68);
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var68.multMono(var70);
    demo.Poly var73 = var53.multMono(var70);
    demo.Poly var74 = var38.mult(var53);
    demo.Poly var75 = var53.clone();
    demo.Poly var76 = var13.mult(var75);
    demo.Poly var77 = new demo.Poly();
    demo.Poly var78 = var77.clone();
    demo.Poly var79 = var77.clone();
    demo.Mono var80 = new demo.Mono();
    demo.Poly var81 = var79.sum(var80);
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var79.multMono(var83);
    demo.Mono var86 = var83.clone();
    var13.add(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    java.lang.String var10 = var9.toString();
    demo.Poly var11 = new demo.Poly();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = new demo.Mono();
    java.lang.String var14 = var13.toString();
    java.lang.String var15 = var13.toString();
    demo.Poly var16 = var11.multMono(var13);
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Poly var21 = var20.clone();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Poly var25 = var20.sum(var24);
    demo.Poly var26 = var16.mult(var25);
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var25.multMono(var27);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = var30.mult(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Mono var41 = var39.clone();
    demo.Poly var42 = var36.multMono(var39);
    var29.add(var39);
    demo.Mono var44 = var39.clone();
    demo.Poly var45 = var9.multMono(var39);
    java.lang.String var46 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var12.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0"+ "'", var15.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var46.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var8.clone();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var8.mult(var11);
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Poly var48 = var47.clone();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    demo.Mono var51 = var49.clone();
    demo.Poly var52 = var47.sum(var51);
    demo.Poly var53 = var43.mult(var52);
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var52.multMono(var54);
    demo.Poly var57 = var11.mult(var56);
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.multMono(var59);
    demo.Poly var61 = var0.sum(var59);
    demo.Mono var62 = new demo.Mono();
    demo.Mono var63 = var62.clone();
    demo.Mono var64 = var63.clone();
    demo.Mono var65 = var63.clone();
    demo.Mono var66 = var65.clone();
    var61.add(var65);
    demo.Poly var68 = new demo.Poly();
    java.lang.String var69 = var68.toString();
    demo.Mono var70 = new demo.Mono();
    java.lang.String var71 = var70.toString();
    java.lang.String var72 = var70.toString();
    demo.Poly var73 = var68.multMono(var70);
    demo.Poly var74 = new demo.Poly();
    demo.Mono var75 = new demo.Mono();
    demo.Mono var76 = var75.clone();
    demo.Poly var77 = var74.sum(var76);
    demo.Mono var78 = var76.clone();
    demo.Poly var79 = var73.sum(var76);
    demo.Poly var80 = var61.sum(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var69.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var35.multMono(var40);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = new demo.Poly();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = var51.multMono(var53);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Mono var62 = new demo.Mono();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var60.sum(var64);
    demo.Poly var66 = var56.mult(var65);
    demo.Mono var67 = new demo.Mono();
    demo.Mono var68 = var67.clone();
    demo.Poly var69 = var65.multMono(var67);
    demo.Poly var70 = var50.multMono(var67);
    demo.Poly var71 = var35.mult(var50);
    demo.Poly var72 = var1.mult(var71);
    demo.Poly var73 = var72.clone();
    demo.Mono var74 = new demo.Mono();
    demo.Mono var75 = var74.clone();
    demo.Mono var76 = var75.clone();
    demo.Mono var77 = var75.clone();
    demo.Poly var78 = var73.sum(var75);
    java.lang.String var79 = var73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var79.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Poly var10 = new demo.Poly();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    java.lang.String var14 = var12.toString();
    demo.Poly var15 = var10.multMono(var12);
    demo.Poly var16 = var7.multMono(var12);
    demo.Poly var17 = var4.multMono(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var11.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = var29.mult(var43);
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Mono var54 = var53.clone();
    java.lang.String var55 = var53.toString();
    demo.Mono var56 = var53.clone();
    demo.Poly var57 = var50.multMono(var53);
    java.lang.String var58 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var2.multMono(var6);
    demo.Poly var9 = var2.clone();
    java.lang.String var10 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Mono var66 = var64.clone();
    demo.Poly var67 = var63.sum(var64);
    demo.Poly var68 = var0.sum(var64);
    java.lang.String var69 = var64.toString();
    demo.Mono var70 = var64.clone();
    java.lang.String var71 = var64.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    demo.Poly var10 = new demo.Poly();
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Poly var13 = var10.sum(var12);
    demo.Poly var14 = var13.clone();
    demo.Mono var15 = new demo.Mono();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = var15.clone();
    demo.Poly var18 = var13.sum(var17);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    demo.Poly var38 = var18.multMono(var35);
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    var38.add(var39);
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = var43.clone();
    demo.Mono var46 = var43.clone();
    demo.Mono var47 = var46.clone();
    var38.add(var47);
    demo.Poly var49 = var9.mult(var38);
    demo.Poly var50 = var49.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    demo.Mono var32 = var29.clone();
    demo.Poly var33 = var27.multMono(var32);
    var6.add(var32);
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var44.sum(var48);
    demo.Poly var50 = var40.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var49.multMono(var51);
    demo.Poly var54 = new demo.Poly();
    demo.Poly var55 = var54.clone();
    demo.Poly var56 = var54.clone();
    demo.Poly var57 = new demo.Poly();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    demo.Poly var62 = var57.multMono(var59);
    demo.Poly var63 = var54.multMono(var59);
    demo.Poly var64 = var49.multMono(var59);
    demo.Mono var68 = new demo.Mono(1, 1, 0);
    demo.Poly var69 = var49.sum(var68);
    demo.Poly var70 = var6.mult(var49);
    demo.Poly var71 = new demo.Poly();
    java.lang.String var72 = var71.toString();
    demo.Mono var73 = new demo.Mono();
    java.lang.String var74 = var73.toString();
    java.lang.String var75 = var73.toString();
    demo.Poly var76 = var71.multMono(var73);
    demo.Poly var77 = var71.clone();
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Mono var80 = var79.clone();
    demo.Poly var81 = var77.sum(var80);
    demo.Poly var82 = var6.sum(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var58.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var72.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 0, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var51.clone();
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = var51.multMono(var56);
    demo.Poly var61 = var49.sum(var56);
    demo.Poly var62 = var61.clone();
    demo.Mono var66 = new demo.Mono(0, 100, 0);
    demo.Poly var67 = var61.multMono(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    demo.Mono var3 = new demo.Mono(100, 1, 1);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var36 = new demo.Mono((-1), 100, 0);
    demo.Poly var37 = var18.sum(var36);
    demo.Mono var41 = new demo.Mono(1, 1, 1);
    demo.Poly var42 = var37.sum(var41);
    demo.Poly var43 = var42.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Mono var36 = var34.clone();
    demo.Mono var37 = var36.clone();
    demo.Mono var38 = var37.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    var28.add(var29);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Mono var37 = var36.clone();
    var28.add(var37);
    java.lang.String var39 = var37.toString();
    java.lang.String var40 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Mono var4 = var2.clone();
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0/1)x^0"+ "'", var5.equals("(0/1)x^0"));

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    java.lang.String var7 = var0.toString();
    demo.Poly var8 = var0.clone();
    demo.Poly var9 = var8.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var19.sum(var23);
    demo.Poly var25 = var13.multMono(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = var26.clone();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Poly var55 = var30.mult(var54);
    demo.Poly var56 = var27.mult(var30);
    demo.Poly var57 = new demo.Poly();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    demo.Poly var62 = var57.multMono(var59);
    demo.Poly var63 = new demo.Poly();
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var63.sum(var65);
    demo.Poly var67 = var66.clone();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    demo.Mono var70 = var68.clone();
    demo.Poly var71 = var66.sum(var70);
    demo.Poly var72 = var62.mult(var71);
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var71.multMono(var73);
    demo.Poly var76 = var30.mult(var75);
    demo.Mono var77 = new demo.Mono();
    demo.Mono var78 = var77.clone();
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var76.sum(var77);
    demo.Poly var81 = var13.sum(var77);
    demo.Poly var82 = var12.sum(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var58.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.multMono(var52);
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = new demo.Poly();
    demo.Poly var57 = var56.clone();
    demo.Poly var58 = var56.clone();
    demo.Mono var59 = new demo.Mono();
    demo.Poly var60 = var58.sum(var59);
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Mono var63 = var62.clone();
    demo.Poly var64 = var58.multMono(var62);
    demo.Poly var65 = var58.clone();
    demo.Poly var66 = var58.clone();
    demo.Poly var67 = new demo.Poly();
    demo.Poly var68 = var67.clone();
    demo.Poly var69 = var67.clone();
    demo.Mono var70 = new demo.Mono();
    demo.Poly var71 = var69.sum(var70);
    demo.Mono var72 = var70.clone();
    demo.Mono var73 = var70.clone();
    java.lang.String var74 = var73.toString();
    var58.add(var73);
    demo.Poly var76 = var53.sum(var73);
    demo.Poly var77 = var53.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Mono var8 = var5.clone();
    demo.Poly var9 = var3.multMono(var8);
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var9.sum(var12);
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = new demo.Poly();
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = var32.multMono(var37);
    demo.Poly var42 = var25.mult(var32);
    demo.Poly var43 = var18.mult(var42);
    demo.Poly var44 = var15.mult(var18);
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    demo.Mono var47 = var45.clone();
    demo.Mono var48 = var45.clone();
    demo.Poly var49 = var18.multMono(var48);
    demo.Poly var50 = var9.mult(var18);
    demo.Poly var51 = var9.clone();
    demo.Poly var52 = var9.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var6.mult(var37);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = new demo.Poly();
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Poly var43 = var40.sum(var42);
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var39.mult(var43);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var45.multMono(var48);
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = var52.clone();
    demo.Poly var54 = var52.clone();
    demo.Poly var55 = new demo.Poly();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = new demo.Mono();
    java.lang.String var58 = var57.toString();
    java.lang.String var59 = var57.toString();
    demo.Poly var60 = var55.multMono(var57);
    demo.Poly var61 = var52.multMono(var57);
    demo.Poly var62 = var45.mult(var52);
    demo.Mono var66 = new demo.Mono(1, 1, 0);
    demo.Mono var67 = var66.clone();
    var45.add(var67);
    demo.Poly var69 = var45.clone();
    demo.Mono var73 = new demo.Mono(1, 1, 0);
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var45.multMono(var73);
    demo.Poly var76 = new demo.Poly();
    demo.Poly var77 = var45.mult(var76);
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Mono var80 = var78.clone();
    var76.add(var78);
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    var76.add(var84);
    demo.Poly var87 = var38.multMono(var84);
    java.lang.String var88 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var88.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var8.sum(var13);
    var6.add(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    java.lang.String var7 = var0.toString();
    demo.Poly var8 = var0.clone();
    java.lang.String var9 = var8.toString();
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = var10.clone();
    demo.Mono var13 = new demo.Mono();
    demo.Poly var14 = var12.sum(var13);
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var12.multMono(var16);
    demo.Poly var19 = var12.clone();
    demo.Poly var20 = var12.clone();
    demo.Poly var21 = var8.mult(var20);
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = var22.clone();
    demo.Mono var25 = var22.clone();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var20.sum(var26);
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var28.clone();
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var38.sum(var42);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var43.multMono(var60);
    demo.Mono var64 = var60.clone();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var28.multMono(var65);
    demo.Mono var67 = new demo.Mono();
    demo.Mono var68 = var67.clone();
    demo.Mono var69 = var67.clone();
    demo.Poly var70 = var66.multMono(var67);
    demo.Poly var71 = var27.multMono(var67);
    demo.Mono var75 = new demo.Mono(10, 100, 0);
    demo.Poly var76 = var71.multMono(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var9.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    java.lang.String var51 = var4.toString();
    demo.Mono var52 = new demo.Mono();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = var52.clone();
    demo.Mono var55 = var52.clone();
    demo.Mono var56 = var52.clone();
    demo.Mono var57 = var52.clone();
    demo.Poly var58 = var4.multMono(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0"+ "'", var53.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    java.lang.String var60 = var59.toString();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = var61.clone();
    demo.Poly var63 = var45.mult(var61);
    demo.Poly var64 = var39.mult(var63);
    demo.Poly var65 = var63.clone();
    demo.Poly var66 = new demo.Poly();
    java.lang.String var67 = var66.toString();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    java.lang.String var70 = var68.toString();
    demo.Poly var71 = var66.multMono(var68);
    demo.Poly var72 = new demo.Poly();
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var72.sum(var74);
    demo.Poly var76 = var75.clone();
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var75.sum(var79);
    demo.Poly var81 = var71.mult(var80);
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var80.multMono(var82);
    java.lang.String var85 = var84.toString();
    demo.Poly var86 = new demo.Poly();
    demo.Poly var87 = var86.clone();
    demo.Poly var88 = var86.clone();
    demo.Mono var89 = new demo.Mono();
    demo.Poly var90 = var88.sum(var89);
    demo.Poly var91 = var84.sum(var89);
    java.lang.String var92 = var89.toString();
    demo.Poly var93 = var63.sum(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var67.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var85.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(0/1)x^0"+ "'", var92.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(100, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    java.lang.String var52 = var50.toString();
    demo.Mono var56 = new demo.Mono(1, 1, 0);
    var50.add(var56);
    demo.Poly var58 = new demo.Poly();
    java.lang.String var59 = var58.toString();
    demo.Mono var60 = new demo.Mono();
    java.lang.String var61 = var60.toString();
    java.lang.String var62 = var60.toString();
    demo.Poly var63 = var58.multMono(var60);
    demo.Poly var64 = var58.clone();
    demo.Poly var65 = new demo.Poly();
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Poly var68 = var65.sum(var67);
    demo.Poly var69 = var68.clone();
    demo.Mono var70 = new demo.Mono();
    java.lang.String var71 = var70.toString();
    demo.Mono var72 = var70.clone();
    demo.Poly var73 = var68.sum(var72);
    demo.Poly var74 = new demo.Poly();
    java.lang.String var75 = var74.toString();
    demo.Mono var76 = new demo.Mono();
    java.lang.String var77 = var76.toString();
    java.lang.String var78 = var76.toString();
    demo.Poly var79 = var74.multMono(var76);
    demo.Poly var80 = new demo.Poly();
    demo.Mono var81 = new demo.Mono();
    demo.Mono var82 = var81.clone();
    demo.Poly var83 = var80.sum(var82);
    demo.Poly var84 = var83.clone();
    demo.Mono var85 = new demo.Mono();
    java.lang.String var86 = var85.toString();
    demo.Mono var87 = var85.clone();
    demo.Poly var88 = var83.sum(var87);
    demo.Poly var89 = var79.mult(var88);
    demo.Mono var90 = new demo.Mono();
    demo.Mono var91 = var90.clone();
    demo.Poly var92 = var88.multMono(var90);
    demo.Poly var93 = var73.multMono(var90);
    demo.Mono var94 = var90.clone();
    demo.Mono var95 = var94.clone();
    demo.Poly var96 = var58.multMono(var95);
    var50.add(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var59.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var75.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(0/1)x^0"+ "'", var86.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Poly var65 = var17.clone();
    demo.Poly var66 = new demo.Poly();
    java.lang.String var67 = var66.toString();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    java.lang.String var70 = var68.toString();
    demo.Poly var71 = var66.multMono(var68);
    demo.Poly var72 = new demo.Poly();
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var72.sum(var74);
    demo.Poly var76 = var75.clone();
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var75.sum(var79);
    demo.Poly var81 = var71.mult(var80);
    demo.Poly var82 = new demo.Poly();
    demo.Mono var83 = new demo.Mono();
    demo.Mono var84 = var83.clone();
    demo.Poly var85 = var82.sum(var84);
    demo.Mono var86 = var84.clone();
    demo.Poly var87 = var80.sum(var86);
    var65.add(var86);
    demo.Poly var89 = var65.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var67.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    demo.Mono var3 = new demo.Mono(10, 10, 1);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    java.lang.String var13 = var6.toString();
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var34.multMono(var36);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = new demo.Poly();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    java.lang.String var46 = var44.toString();
    demo.Poly var47 = var42.multMono(var44);
    demo.Poly var48 = var39.multMono(var44);
    demo.Poly var49 = var34.multMono(var44);
    demo.Mono var53 = new demo.Mono(1, 1, 0);
    demo.Poly var54 = var34.sum(var53);
    demo.Poly var55 = var14.sum(var53);
    demo.Poly var56 = var6.multMono(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var13.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Mono var4 = var3.clone();
    demo.Mono var5 = var3.clone();
    demo.Poly var6 = var0.sum(var3);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = new demo.Poly();
    demo.Poly var18 = var17.clone();
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = var32.clone();
    demo.Poly var35 = new demo.Poly();
    java.lang.String var36 = var35.toString();
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    java.lang.String var39 = var37.toString();
    demo.Poly var40 = var35.multMono(var37);
    demo.Poly var41 = var32.multMono(var37);
    demo.Poly var42 = var25.mult(var32);
    demo.Poly var43 = var18.mult(var42);
    demo.Poly var44 = var15.mult(var18);
    demo.Poly var45 = new demo.Poly();
    java.lang.String var46 = var45.toString();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    java.lang.String var49 = var47.toString();
    demo.Poly var50 = var45.multMono(var47);
    demo.Poly var51 = new demo.Poly();
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var51.sum(var53);
    demo.Poly var55 = var54.clone();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var54.sum(var58);
    demo.Poly var60 = var50.mult(var59);
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var59.multMono(var61);
    demo.Poly var64 = var18.mult(var63);
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var64.multMono(var66);
    demo.Poly var68 = var7.sum(var66);
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Mono var71 = var70.clone();
    demo.Mono var72 = var70.clone();
    demo.Mono var73 = var72.clone();
    var68.add(var72);
    demo.Poly var75 = var0.mult(var68);
    demo.Mono var76 = new demo.Mono();
    java.lang.String var77 = var76.toString();
    var75.add(var76);
    demo.Mono var79 = var76.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var46.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var50.sum(var51);
    java.lang.String var55 = var51.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var4.multMono(var7);
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var8.sum(var9);
    demo.Poly var13 = var8.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Poly var5 = var2.clone();
    demo.Poly var6 = new demo.Poly();
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var6.clone();
    demo.Mono var9 = new demo.Mono();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = var9.clone();
    demo.Mono var12 = var9.clone();
    demo.Mono var13 = var9.clone();
    demo.Poly var14 = var8.sum(var13);
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Poly var26 = var20.mult(var24);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Mono var31 = var29.clone();
    demo.Poly var32 = var26.multMono(var29);
    demo.Poly var33 = new demo.Poly();
    demo.Poly var34 = var33.clone();
    demo.Poly var35 = var33.clone();
    demo.Poly var36 = new demo.Poly();
    java.lang.String var37 = var36.toString();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    demo.Poly var41 = var36.multMono(var38);
    demo.Poly var42 = var33.multMono(var38);
    demo.Poly var43 = var26.mult(var33);
    demo.Poly var44 = var19.mult(var43);
    demo.Poly var45 = var16.mult(var19);
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = var46.clone();
    demo.Mono var49 = var46.clone();
    demo.Poly var50 = var19.multMono(var49);
    demo.Mono var51 = var49.clone();
    var8.add(var49);
    demo.Poly var53 = var5.sum(var49);
    java.lang.String var54 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Poly var34 = var32.sum(var33);
    demo.Mono var35 = var33.clone();
    var29.add(var35);
    demo.Poly var37 = new demo.Poly();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    java.lang.String var41 = var39.toString();
    demo.Poly var42 = var37.multMono(var39);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Poly var47 = var46.clone();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var46.sum(var50);
    demo.Poly var52 = var42.mult(var51);
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var51.multMono(var53);
    java.lang.String var56 = var55.toString();
    demo.Poly var57 = new demo.Poly();
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var57.clone();
    demo.Mono var60 = new demo.Mono();
    demo.Poly var61 = var59.sum(var60);
    demo.Poly var62 = var55.sum(var60);
    java.lang.String var63 = var55.toString();
    demo.Poly var64 = var29.mult(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.multMono(var52);
    demo.Poly var54 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var31.sum(var33);
    demo.Poly var35 = var34.clone();
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var35.multMono(var40);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = new demo.Poly();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = var51.multMono(var53);
    demo.Poly var57 = new demo.Poly();
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var57.sum(var59);
    demo.Poly var61 = var60.clone();
    demo.Mono var62 = new demo.Mono();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var60.sum(var64);
    demo.Poly var66 = var56.mult(var65);
    demo.Mono var67 = new demo.Mono();
    demo.Mono var68 = var67.clone();
    demo.Poly var69 = var65.multMono(var67);
    demo.Poly var70 = var50.multMono(var67);
    demo.Poly var71 = var35.mult(var50);
    demo.Poly var72 = var1.mult(var71);
    demo.Poly var73 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0"+ "'", var63.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    java.lang.String var37 = var34.toString();
    demo.Mono var38 = var34.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(1/1)x^0"+ "'", var37.equals("(1/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = var0.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Poly var26 = var25.clone();
    demo.Mono var27 = new demo.Mono();
    java.lang.String var28 = var27.toString();
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var25.sum(var29);
    demo.Poly var31 = var21.mult(var30);
    demo.Mono var32 = new demo.Mono();
    demo.Mono var33 = var32.clone();
    demo.Poly var34 = var30.multMono(var32);
    java.lang.String var35 = var34.toString();
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Mono var39 = new demo.Mono();
    demo.Poly var40 = var38.sum(var39);
    demo.Poly var41 = var34.sum(var39);
    demo.Mono var45 = new demo.Mono(1, 1, 0);
    var41.add(var45);
    demo.Poly var47 = var15.sum(var45);
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Mono var51 = var50.clone();
    java.lang.String var52 = var50.toString();
    demo.Mono var53 = var50.clone();
    var15.add(var50);
    demo.Poly var55 = var15.clone();
    java.lang.String var56 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var56.equals("(1/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    java.lang.String var42 = var41.toString();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var37.mult(var44);
    demo.Poly var46 = new demo.Poly();
    demo.Poly var47 = var46.clone();
    demo.Poly var48 = var47.clone();
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Poly var56 = var55.clone();
    demo.Poly var57 = var51.mult(var55);
    demo.Poly var58 = new demo.Poly();
    demo.Mono var59 = new demo.Mono();
    demo.Mono var60 = var59.clone();
    demo.Poly var61 = var58.sum(var60);
    demo.Mono var62 = var60.clone();
    demo.Poly var63 = var57.multMono(var60);
    demo.Poly var64 = new demo.Poly();
    demo.Poly var65 = var64.clone();
    demo.Poly var66 = var64.clone();
    demo.Poly var67 = new demo.Poly();
    java.lang.String var68 = var67.toString();
    demo.Mono var69 = new demo.Mono();
    java.lang.String var70 = var69.toString();
    java.lang.String var71 = var69.toString();
    demo.Poly var72 = var67.multMono(var69);
    demo.Poly var73 = var64.multMono(var69);
    demo.Poly var74 = var57.mult(var64);
    demo.Poly var75 = var50.mult(var74);
    demo.Poly var76 = var47.mult(var50);
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = var77.clone();
    demo.Mono var80 = var77.clone();
    demo.Poly var81 = var50.multMono(var80);
    demo.Mono var82 = new demo.Mono();
    java.lang.String var83 = var82.toString();
    demo.Mono var84 = var82.clone();
    demo.Mono var85 = var84.clone();
    java.lang.String var86 = var84.toString();
    demo.Mono var87 = var84.clone();
    var50.add(var84);
    demo.Mono var89 = var84.clone();
    var45.add(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var68.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0"+ "'", var71.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "(0/1)x^0"+ "'", var83.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(0/1)x^0"+ "'", var86.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    var18.add(var35);
    demo.Poly var39 = var18.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = var0.clone();
    demo.Mono var19 = new demo.Mono(1, 1, 0);
    demo.Mono var20 = var19.clone();
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var0.multMono(var21);
    demo.Poly var23 = var0.clone();
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    java.lang.String var28 = var27.toString();
    java.lang.String var29 = var27.toString();
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = new demo.Poly();
    demo.Poly var34 = var33.clone();
    demo.Poly var35 = new demo.Poly();
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var35.mult(var39);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Mono var46 = var44.clone();
    demo.Poly var47 = var41.multMono(var44);
    demo.Poly var48 = new demo.Poly();
    demo.Poly var49 = var48.clone();
    demo.Poly var50 = var48.clone();
    demo.Poly var51 = new demo.Poly();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    java.lang.String var55 = var53.toString();
    demo.Poly var56 = var51.multMono(var53);
    demo.Poly var57 = var48.multMono(var53);
    demo.Poly var58 = var41.mult(var48);
    demo.Poly var59 = var34.mult(var58);
    demo.Poly var60 = var31.mult(var34);
    demo.Mono var61 = new demo.Mono();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = var61.clone();
    demo.Mono var64 = var61.clone();
    demo.Poly var65 = var34.multMono(var64);
    demo.Mono var66 = new demo.Mono();
    java.lang.String var67 = var66.toString();
    demo.Mono var68 = var66.clone();
    demo.Mono var69 = var68.clone();
    java.lang.String var70 = var68.toString();
    demo.Mono var71 = var68.clone();
    var34.add(var68);
    demo.Poly var73 = var27.multMono(var68);
    demo.Poly var74 = var23.mult(var73);
    java.lang.String var75 = var73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var28.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0"+ "'", var62.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0"+ "'", var70.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var75.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    demo.Poly var52 = var50.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Poly var59 = var53.mult(var57);
    demo.Poly var60 = new demo.Poly();
    demo.Mono var61 = new demo.Mono();
    demo.Mono var62 = var61.clone();
    demo.Poly var63 = var60.sum(var62);
    demo.Mono var64 = var62.clone();
    demo.Poly var65 = var59.multMono(var62);
    demo.Poly var66 = new demo.Poly();
    demo.Poly var67 = var66.clone();
    demo.Poly var68 = var66.clone();
    demo.Poly var69 = new demo.Poly();
    java.lang.String var70 = var69.toString();
    demo.Mono var71 = new demo.Mono();
    java.lang.String var72 = var71.toString();
    java.lang.String var73 = var71.toString();
    demo.Poly var74 = var69.multMono(var71);
    demo.Poly var75 = var66.multMono(var71);
    demo.Poly var76 = var59.mult(var66);
    demo.Mono var80 = new demo.Mono(1, 1, 0);
    demo.Mono var81 = var80.clone();
    var59.add(var81);
    demo.Poly var83 = var59.clone();
    demo.Mono var87 = new demo.Mono(1, 1, 0);
    demo.Mono var88 = var87.clone();
    demo.Poly var89 = var59.multMono(var87);
    demo.Poly var90 = var52.sum(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var70.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "(0/1)x^0"+ "'", var72.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = var12.clone();
    demo.Mono var15 = var12.clone();
    demo.Poly var16 = var10.multMono(var15);
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var16.sum(var19);
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = var26.mult(var35);
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var35.multMono(var37);
    demo.Poly var40 = var20.sum(var37);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var20.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Poly var47 = var0.multMono(var42);
    demo.Poly var48 = new demo.Poly();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    java.lang.String var52 = var50.toString();
    demo.Poly var53 = var48.multMono(var50);
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Poly var58 = var57.clone();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    demo.Mono var61 = var59.clone();
    demo.Poly var62 = var57.sum(var61);
    demo.Poly var63 = var53.mult(var62);
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    demo.Mono var66 = var64.clone();
    demo.Mono var67 = var64.clone();
    demo.Mono var68 = var67.clone();
    demo.Poly var69 = var53.sum(var67);
    demo.Poly var70 = var47.sum(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var49.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = var4.clone();
    demo.Mono var35 = new demo.Mono(1, 1, 0);
    demo.Mono var36 = var35.clone();
    demo.Mono var37 = var35.clone();
    var4.add(var35);
    demo.Poly var39 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var36 = new demo.Mono((-1), 100, 0);
    demo.Poly var37 = var18.sum(var36);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Mono var41 = new demo.Mono();
    demo.Poly var42 = var40.sum(var41);
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var40.multMono(var44);
    demo.Mono var47 = var44.clone();
    demo.Poly var48 = var37.sum(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = new demo.Poly();
    demo.Mono var23 = new demo.Mono();
    demo.Mono var24 = var23.clone();
    demo.Poly var25 = var22.sum(var24);
    demo.Poly var26 = var25.clone();
    demo.Mono var27 = new demo.Mono();
    java.lang.String var28 = var27.toString();
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var25.sum(var29);
    demo.Poly var31 = var21.mult(var30);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    java.lang.String var36 = var35.toString();
    demo.Poly var37 = var35.clone();
    demo.Poly var38 = var37.clone();
    demo.Poly var39 = var21.mult(var37);
    demo.Poly var40 = var21.clone();
    demo.Poly var41 = var21.clone();
    demo.Poly var42 = new demo.Poly();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    java.lang.String var46 = var44.toString();
    demo.Poly var47 = var42.multMono(var44);
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Poly var52 = var51.clone();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = var53.clone();
    demo.Poly var56 = var51.sum(var55);
    demo.Poly var57 = var47.mult(var56);
    demo.Mono var58 = new demo.Mono();
    demo.Mono var59 = var58.clone();
    demo.Poly var60 = var56.multMono(var58);
    demo.Poly var61 = new demo.Poly();
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Poly var66 = var65.clone();
    demo.Poly var67 = var61.mult(var65);
    demo.Poly var68 = new demo.Poly();
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Poly var71 = var68.sum(var70);
    demo.Mono var72 = var70.clone();
    demo.Poly var73 = var67.multMono(var70);
    var60.add(var70);
    demo.Mono var78 = new demo.Mono((-1), 100, 0);
    demo.Poly var79 = var60.sum(var78);
    demo.Mono var83 = new demo.Mono(1, 1, 1);
    demo.Poly var84 = var79.sum(var83);
    demo.Poly var85 = var41.sum(var83);
    demo.Poly var86 = var5.multMono(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var36.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Poly var33 = new demo.Poly();
    demo.Mono var34 = new demo.Mono();
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var33.sum(var35);
    demo.Poly var37 = var36.clone();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = var38.clone();
    demo.Poly var41 = var36.sum(var40);
    demo.Poly var42 = var30.multMono(var40);
    demo.Poly var43 = var29.sum(var40);
    java.lang.String var44 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Mono var9 = var7.clone();
    demo.Poly var10 = var4.multMono(var9);
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Mono var13 = var12.clone();
    demo.Mono var14 = var12.clone();
    demo.Poly var15 = var4.sum(var12);
    java.lang.String var16 = var15.toString();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = var17.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var16.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = var12.clone();
    demo.Mono var15 = var12.clone();
    demo.Poly var16 = var10.multMono(var15);
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var16.sum(var19);
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = var26.mult(var35);
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var35.multMono(var37);
    demo.Poly var40 = var20.sum(var37);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var20.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Poly var47 = var0.multMono(var42);
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Mono var51 = var48.clone();
    var0.add(var48);
    demo.Poly var53 = new demo.Poly();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    java.lang.String var57 = var55.toString();
    demo.Poly var58 = var53.multMono(var55);
    demo.Poly var59 = var53.clone();
    demo.Mono var60 = new demo.Mono();
    java.lang.String var61 = var60.toString();
    demo.Poly var62 = var59.multMono(var60);
    demo.Poly var63 = var0.mult(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Mono var25 = var23.clone();
    demo.Poly var26 = var20.multMono(var25);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = new demo.Poly();
    java.lang.String var37 = var36.toString();
    demo.Mono var38 = new demo.Mono();
    java.lang.String var39 = var38.toString();
    java.lang.String var40 = var38.toString();
    demo.Poly var41 = var36.multMono(var38);
    demo.Poly var42 = new demo.Poly();
    demo.Mono var43 = new demo.Mono();
    demo.Mono var44 = var43.clone();
    demo.Poly var45 = var42.sum(var44);
    demo.Poly var46 = var45.clone();
    demo.Mono var47 = new demo.Mono();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var45.sum(var49);
    demo.Poly var51 = var41.mult(var50);
    demo.Mono var52 = new demo.Mono();
    demo.Mono var53 = var52.clone();
    demo.Poly var54 = var50.multMono(var52);
    demo.Poly var55 = var35.multMono(var52);
    demo.Poly var56 = var20.mult(var35);
    demo.Poly var57 = var35.clone();
    demo.Poly var58 = var14.mult(var57);
    java.lang.String var59 = var14.toString();
    java.lang.String var60 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var37.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0"+ "'", var39.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var59.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var60.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = new demo.Poly();
    java.lang.String var23 = var22.toString();
    demo.Mono var24 = new demo.Mono();
    java.lang.String var25 = var24.toString();
    java.lang.String var26 = var24.toString();
    demo.Poly var27 = var22.multMono(var24);
    demo.Poly var28 = var19.multMono(var24);
    demo.Poly var29 = var14.multMono(var24);
    demo.Poly var30 = new demo.Poly();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    demo.Poly var35 = var30.multMono(var32);
    demo.Poly var36 = new demo.Poly();
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var36.sum(var38);
    demo.Poly var40 = var39.clone();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = var41.clone();
    demo.Poly var44 = var39.sum(var43);
    demo.Poly var45 = var35.mult(var44);
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var44.multMono(var46);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = var49.mult(var53);
    demo.Poly var56 = new demo.Poly();
    demo.Mono var57 = new demo.Mono();
    demo.Mono var58 = var57.clone();
    demo.Poly var59 = var56.sum(var58);
    demo.Mono var60 = var58.clone();
    demo.Poly var61 = var55.multMono(var58);
    var48.add(var58);
    demo.Mono var66 = new demo.Mono((-1), 100, 0);
    demo.Poly var67 = var48.sum(var66);
    demo.Mono var71 = new demo.Mono(1, 1, 1);
    demo.Poly var72 = var67.sum(var71);
    demo.Poly var73 = var14.multMono(var71);
    demo.Mono var74 = var71.clone();
    demo.Mono var75 = var74.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var23.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var31.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    demo.Mono var3 = new demo.Mono(0, 1, 0);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = var5.clone();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Mono var13 = new demo.Mono();
    java.lang.String var14 = var13.toString();
    demo.Mono var15 = var13.clone();
    demo.Poly var16 = var11.sum(var15);
    demo.Poly var17 = var5.multMono(var15);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var19.clone();
    demo.Poly var21 = new demo.Poly();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var23.mult(var27);
    demo.Poly var30 = new demo.Poly();
    demo.Mono var31 = new demo.Mono();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var30.sum(var32);
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var29.multMono(var32);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    demo.Poly var46 = var29.mult(var36);
    demo.Poly var47 = var22.mult(var46);
    demo.Poly var48 = var19.mult(var22);
    demo.Poly var49 = new demo.Poly();
    java.lang.String var50 = var49.toString();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    java.lang.String var53 = var51.toString();
    demo.Poly var54 = var49.multMono(var51);
    demo.Poly var55 = new demo.Poly();
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var55.sum(var57);
    demo.Poly var59 = var58.clone();
    demo.Mono var60 = new demo.Mono();
    java.lang.String var61 = var60.toString();
    demo.Mono var62 = var60.clone();
    demo.Poly var63 = var58.sum(var62);
    demo.Poly var64 = var54.mult(var63);
    demo.Mono var65 = new demo.Mono();
    demo.Mono var66 = var65.clone();
    demo.Poly var67 = var63.multMono(var65);
    demo.Poly var68 = var22.mult(var67);
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Mono var71 = var69.clone();
    demo.Poly var72 = var68.sum(var69);
    demo.Poly var73 = var5.sum(var69);
    demo.Mono var74 = var69.clone();
    demo.Poly var75 = var4.sum(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0"+ "'", var53.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    java.lang.String var42 = var41.toString();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var37.mult(var44);
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = var46.clone();
    demo.Poly var48 = var46.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = var6.mult(var37);
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Poly var49 = var48.clone();
    demo.Mono var50 = new demo.Mono();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var48.sum(var52);
    demo.Poly var54 = var44.mult(var53);
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var53.multMono(var55);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var53.multMono(var63);
    demo.Mono var72 = new demo.Mono(1, 1, 0);
    demo.Poly var73 = var53.sum(var72);
    demo.Poly var74 = var6.sum(var72);
    demo.Poly var75 = var74.clone();
    demo.Mono var76 = new demo.Mono();
    demo.Mono var77 = var76.clone();
    demo.Mono var78 = var77.clone();
    demo.Mono var79 = var77.clone();
    var75.add(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Mono var12 = new demo.Mono();
    java.lang.String var13 = var12.toString();
    demo.Mono var14 = var12.clone();
    demo.Mono var15 = var12.clone();
    demo.Poly var16 = var10.multMono(var15);
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var16.sum(var19);
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = new demo.Poly();
    demo.Mono var28 = new demo.Mono();
    demo.Mono var29 = var28.clone();
    demo.Poly var30 = var27.sum(var29);
    demo.Poly var31 = var30.clone();
    demo.Mono var32 = new demo.Mono();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = var32.clone();
    demo.Poly var35 = var30.sum(var34);
    demo.Poly var36 = var26.mult(var35);
    demo.Mono var37 = new demo.Mono();
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var35.multMono(var37);
    demo.Poly var40 = var20.sum(var37);
    demo.Mono var41 = new demo.Mono();
    demo.Mono var42 = var41.clone();
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var20.sum(var42);
    demo.Mono var46 = var42.clone();
    demo.Poly var47 = var0.multMono(var42);
    demo.Mono var48 = var42.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    java.lang.String var10 = var9.toString();
    demo.Poly var11 = new demo.Poly();
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var12.clone();
    demo.Poly var14 = new demo.Poly();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = new demo.Poly();
    demo.Mono var18 = new demo.Mono();
    demo.Mono var19 = var18.clone();
    demo.Poly var20 = var17.sum(var19);
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var16.mult(var20);
    demo.Poly var23 = new demo.Poly();
    demo.Mono var24 = new demo.Mono();
    demo.Mono var25 = var24.clone();
    demo.Poly var26 = var23.sum(var25);
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var22.multMono(var25);
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var29.clone();
    demo.Poly var32 = new demo.Poly();
    java.lang.String var33 = var32.toString();
    demo.Mono var34 = new demo.Mono();
    java.lang.String var35 = var34.toString();
    java.lang.String var36 = var34.toString();
    demo.Poly var37 = var32.multMono(var34);
    demo.Poly var38 = var29.multMono(var34);
    demo.Poly var39 = var22.mult(var29);
    demo.Poly var40 = var15.mult(var39);
    demo.Poly var41 = var12.mult(var15);
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Mono var45 = var42.clone();
    demo.Poly var46 = var15.multMono(var45);
    demo.Poly var47 = new demo.Poly();
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var47.mult(var51);
    demo.Poly var54 = new demo.Poly();
    demo.Mono var55 = new demo.Mono();
    demo.Mono var56 = var55.clone();
    demo.Poly var57 = var54.sum(var56);
    demo.Mono var58 = var56.clone();
    demo.Poly var59 = var53.multMono(var56);
    demo.Poly var60 = new demo.Poly();
    demo.Poly var61 = var60.clone();
    demo.Poly var62 = var60.clone();
    demo.Poly var63 = new demo.Poly();
    java.lang.String var64 = var63.toString();
    demo.Mono var65 = new demo.Mono();
    java.lang.String var66 = var65.toString();
    java.lang.String var67 = var65.toString();
    demo.Poly var68 = var63.multMono(var65);
    demo.Poly var69 = var60.multMono(var65);
    demo.Poly var70 = var53.mult(var60);
    demo.Mono var74 = new demo.Mono(1, 1, 0);
    demo.Mono var75 = var74.clone();
    var53.add(var75);
    demo.Poly var77 = var53.clone();
    demo.Mono var81 = new demo.Mono(1, 1, 0);
    demo.Mono var82 = var81.clone();
    demo.Poly var83 = var53.multMono(var81);
    demo.Poly var84 = var46.mult(var83);
    demo.Poly var85 = var9.mult(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var33.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var64.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "(0/1)x^0"+ "'", var67.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Poly var25 = var24.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = var0.clone();
    demo.Mono var7 = new demo.Mono();
    java.lang.String var8 = var7.toString();
    demo.Poly var9 = var6.multMono(var7);
    demo.Poly var10 = new demo.Poly();
    demo.Mono var11 = new demo.Mono();
    demo.Mono var12 = var11.clone();
    demo.Poly var13 = var10.sum(var12);
    demo.Poly var14 = var13.clone();
    demo.Mono var15 = new demo.Mono();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = var15.clone();
    demo.Poly var18 = var13.sum(var17);
    demo.Poly var19 = new demo.Poly();
    java.lang.String var20 = var19.toString();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    java.lang.String var23 = var21.toString();
    demo.Poly var24 = var19.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Poly var29 = var28.clone();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    demo.Mono var32 = var30.clone();
    demo.Poly var33 = var28.sum(var32);
    demo.Poly var34 = var24.mult(var33);
    demo.Mono var35 = new demo.Mono();
    demo.Mono var36 = var35.clone();
    demo.Poly var37 = var33.multMono(var35);
    demo.Poly var38 = var18.multMono(var35);
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = var39.clone();
    var38.add(var39);
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    demo.Mono var45 = var43.clone();
    demo.Mono var46 = var43.clone();
    demo.Mono var47 = var46.clone();
    var38.add(var47);
    demo.Poly var49 = var9.mult(var38);
    java.lang.String var50 = var38.toString();
    java.lang.String var51 = var38.toString();
    java.lang.String var52 = var38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "(0/1)x^0"+ "'", var8.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0"+ "'", var16.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var50.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    java.lang.String var7 = var6.toString();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    java.lang.String var10 = var8.toString();
    demo.Poly var11 = var6.multMono(var8);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Poly var16 = var15.clone();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var15.sum(var19);
    demo.Poly var21 = var11.mult(var20);
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var20.multMono(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var20.multMono(var30);
    demo.Mono var39 = new demo.Mono(1, 1, 0);
    demo.Poly var40 = var20.sum(var39);
    demo.Poly var41 = var0.sum(var39);
    java.lang.String var42 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var7.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0"+ "'", var10.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(1/1)x^0"+ "'", var42.equals("(1/1)x^0"));

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var38.clone();
    java.lang.String var40 = var39.toString();
    demo.Poly var41 = var39.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var19.sum(var23);
    demo.Poly var25 = var13.multMono(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = var26.clone();
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = new demo.Poly();
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var31.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Mono var42 = var40.clone();
    demo.Poly var43 = var37.multMono(var40);
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var44.clone();
    demo.Poly var47 = new demo.Poly();
    java.lang.String var48 = var47.toString();
    demo.Mono var49 = new demo.Mono();
    java.lang.String var50 = var49.toString();
    java.lang.String var51 = var49.toString();
    demo.Poly var52 = var47.multMono(var49);
    demo.Poly var53 = var44.multMono(var49);
    demo.Poly var54 = var37.mult(var44);
    demo.Poly var55 = var30.mult(var54);
    demo.Poly var56 = var27.mult(var30);
    demo.Poly var57 = new demo.Poly();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    demo.Poly var62 = var57.multMono(var59);
    demo.Poly var63 = new demo.Poly();
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var63.sum(var65);
    demo.Poly var67 = var66.clone();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    demo.Mono var70 = var68.clone();
    demo.Poly var71 = var66.sum(var70);
    demo.Poly var72 = var62.mult(var71);
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var71.multMono(var73);
    demo.Poly var76 = var30.mult(var75);
    demo.Mono var77 = new demo.Mono();
    demo.Mono var78 = var77.clone();
    demo.Mono var79 = var77.clone();
    demo.Poly var80 = var76.sum(var77);
    demo.Poly var81 = var13.sum(var77);
    var12.add(var77);
    demo.Poly var83 = var12.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var48.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0"+ "'", var51.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var58.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(0, 10, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    java.lang.String var52 = var50.toString();
    demo.Mono var56 = new demo.Mono(1, 1, 0);
    var50.add(var56);
    java.lang.String var58 = var56.toString();
    demo.Mono var59 = var56.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(1/1)x^0"+ "'", var58.equals("(1/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono((-1), 0, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Mono var30 = var28.clone();
    demo.Mono var31 = var28.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    demo.Mono var3 = new demo.Mono(1, 10, 1);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 10, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Mono var9 = var7.clone();
    demo.Poly var10 = var4.multMono(var9);
    demo.Poly var11 = new demo.Poly();
    demo.Mono var12 = new demo.Mono();
    demo.Mono var13 = var12.clone();
    demo.Poly var14 = var11.sum(var13);
    demo.Poly var15 = var14.clone();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var14.sum(var18);
    demo.Poly var20 = new demo.Poly();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = new demo.Mono();
    java.lang.String var23 = var22.toString();
    java.lang.String var24 = var22.toString();
    demo.Poly var25 = var20.multMono(var22);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Poly var34 = var29.sum(var33);
    demo.Poly var35 = var25.mult(var34);
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var34.multMono(var36);
    demo.Poly var39 = var19.multMono(var36);
    demo.Poly var40 = var4.mult(var19);
    demo.Poly var41 = var19.clone();
    java.lang.String var42 = var19.toString();
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Poly var47 = var46.clone();
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Mono var52 = var50.clone();
    demo.Poly var53 = var47.multMono(var52);
    demo.Poly var54 = var19.sum(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var21.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(0/1)x^0"+ "'", var23.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Poly var9 = var8.clone();
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var8.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.multMono(var30);
    demo.Poly var34 = var3.mult(var33);
    demo.Poly var35 = new demo.Poly();
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var35.clone();
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = var35.multMono(var40);
    demo.Poly var45 = new demo.Poly();
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var45.mult(var49);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Mono var56 = var54.clone();
    demo.Poly var57 = var51.multMono(var54);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var51.mult(var58);
    demo.Poly var69 = new demo.Poly();
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var69.sum(var71);
    demo.Poly var73 = var72.clone();
    demo.Mono var74 = new demo.Mono();
    java.lang.String var75 = var74.toString();
    demo.Mono var76 = var74.clone();
    demo.Mono var77 = var74.clone();
    demo.Poly var78 = var72.multMono(var77);
    var51.add(var77);
    demo.Poly var80 = var35.sum(var77);
    demo.Mono var81 = var77.clone();
    demo.Mono var82 = var77.clone();
    demo.Poly var83 = var3.sum(var77);
    java.lang.String var84 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var84.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var14.multMono(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = var19.mult(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var25.multMono(var28);
    var18.add(var28);
    demo.Mono var36 = new demo.Mono((-1), 100, 0);
    demo.Poly var37 = var18.sum(var36);
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = var38.clone();
    demo.Mono var45 = new demo.Mono();
    java.lang.String var46 = var45.toString();
    demo.Poly var47 = var44.multMono(var45);
    demo.Poly var48 = new demo.Poly();
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var48.sum(var50);
    demo.Poly var52 = var51.clone();
    demo.Mono var53 = new demo.Mono();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = var53.clone();
    demo.Poly var56 = var51.sum(var55);
    demo.Poly var57 = new demo.Poly();
    java.lang.String var58 = var57.toString();
    demo.Mono var59 = new demo.Mono();
    java.lang.String var60 = var59.toString();
    java.lang.String var61 = var59.toString();
    demo.Poly var62 = var57.multMono(var59);
    demo.Poly var63 = new demo.Poly();
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var63.sum(var65);
    demo.Poly var67 = var66.clone();
    demo.Mono var68 = new demo.Mono();
    java.lang.String var69 = var68.toString();
    demo.Mono var70 = var68.clone();
    demo.Poly var71 = var66.sum(var70);
    demo.Poly var72 = var62.mult(var71);
    demo.Mono var73 = new demo.Mono();
    demo.Mono var74 = var73.clone();
    demo.Poly var75 = var71.multMono(var73);
    demo.Poly var76 = var56.multMono(var73);
    demo.Mono var77 = new demo.Mono();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = var77.clone();
    var76.add(var77);
    demo.Mono var81 = new demo.Mono();
    java.lang.String var82 = var81.toString();
    demo.Mono var83 = var81.clone();
    demo.Mono var84 = var81.clone();
    demo.Mono var85 = var84.clone();
    var76.add(var85);
    demo.Poly var87 = var47.mult(var76);
    java.lang.String var88 = var76.toString();
    demo.Poly var89 = var18.mult(var76);
    demo.Poly var90 = new demo.Poly();
    demo.Poly var91 = var90.clone();
    demo.Poly var92 = var90.clone();
    demo.Mono var93 = new demo.Mono();
    demo.Poly var94 = var92.sum(var93);
    demo.Mono var95 = var93.clone();
    demo.Mono var96 = var93.clone();
    var76.add(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var58.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "(0/1)x^0"+ "'", var60.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0"+ "'", var61.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(0/1)x^0"+ "'", var82.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var88.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      demo.Mono var3 = new demo.Mono(10, 1, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = var3.clone();
    demo.Mono var6 = new demo.Mono();
    demo.Poly var7 = var5.sum(var6);
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var5.multMono(var9);
    demo.Poly var12 = var0.mult(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = var0.clone();
    demo.Mono var19 = new demo.Mono(1, 1, 0);
    demo.Mono var20 = var19.clone();
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var0.multMono(var21);
    demo.Poly var23 = var0.clone();
    java.lang.String var24 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var2.mult(var6);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var8.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = new demo.Poly();
    java.lang.String var19 = var18.toString();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    java.lang.String var22 = var20.toString();
    demo.Poly var23 = var18.multMono(var20);
    demo.Poly var24 = var15.multMono(var20);
    demo.Poly var25 = var8.mult(var15);
    demo.Poly var26 = var1.mult(var25);
    java.lang.String var27 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var27.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Poly var31 = new demo.Poly();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    java.lang.String var35 = var33.toString();
    demo.Poly var36 = var31.multMono(var33);
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var40.sum(var44);
    demo.Poly var46 = var36.mult(var45);
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var45.multMono(var47);
    demo.Poly var50 = var4.mult(var49);
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.multMono(var52);
    java.lang.String var54 = var50.toString();
    demo.Poly var55 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var32.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0"+ "'", var35.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Mono var3 = new demo.Mono();
    demo.Poly var4 = var2.sum(var3);
    demo.Mono var5 = new demo.Mono();
    demo.Mono var6 = var5.clone();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var4.multMono(var7);
    demo.Poly var9 = new demo.Poly();
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var9.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Poly var16 = var15.clone();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = var17.clone();
    demo.Poly var20 = var15.sum(var19);
    demo.Poly var21 = var9.multMono(var19);
    demo.Poly var22 = new demo.Poly();
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var22.clone();
    demo.Poly var25 = new demo.Poly();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = new demo.Mono();
    java.lang.String var28 = var27.toString();
    java.lang.String var29 = var27.toString();
    demo.Poly var30 = var25.multMono(var27);
    demo.Poly var31 = var22.multMono(var27);
    demo.Poly var32 = new demo.Poly();
    demo.Poly var33 = var32.clone();
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var34.mult(var38);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Mono var45 = var43.clone();
    demo.Poly var46 = var40.multMono(var43);
    demo.Poly var47 = new demo.Poly();
    demo.Poly var48 = var47.clone();
    demo.Poly var49 = var47.clone();
    demo.Poly var50 = new demo.Poly();
    java.lang.String var51 = var50.toString();
    demo.Mono var52 = new demo.Mono();
    java.lang.String var53 = var52.toString();
    java.lang.String var54 = var52.toString();
    demo.Poly var55 = var50.multMono(var52);
    demo.Poly var56 = var47.multMono(var52);
    demo.Poly var57 = var40.mult(var47);
    demo.Poly var58 = var33.mult(var57);
    demo.Poly var59 = var22.mult(var57);
    demo.Poly var60 = var9.mult(var59);
    java.lang.String var61 = var59.toString();
    demo.Mono var65 = new demo.Mono(1, 1, 0);
    var59.add(var65);
    demo.Poly var67 = var8.multMono(var65);
    demo.Mono var68 = var65.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var26.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "(0/1)x^0"+ "'", var28.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0"+ "'", var53.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0"+ "'", var54.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var61.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = new demo.Poly();
    java.lang.String var16 = var15.toString();
    demo.Mono var17 = new demo.Mono();
    java.lang.String var18 = var17.toString();
    java.lang.String var19 = var17.toString();
    demo.Poly var20 = var15.multMono(var17);
    demo.Poly var21 = new demo.Poly();
    demo.Mono var22 = new demo.Mono();
    demo.Mono var23 = var22.clone();
    demo.Poly var24 = var21.sum(var23);
    demo.Poly var25 = var24.clone();
    demo.Mono var26 = new demo.Mono();
    java.lang.String var27 = var26.toString();
    demo.Mono var28 = var26.clone();
    demo.Poly var29 = var24.sum(var28);
    demo.Poly var30 = var20.mult(var29);
    demo.Mono var31 = new demo.Mono();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var29.multMono(var31);
    demo.Poly var34 = new demo.Poly();
    demo.Poly var35 = new demo.Poly();
    demo.Mono var36 = new demo.Mono();
    demo.Mono var37 = var36.clone();
    demo.Poly var38 = var35.sum(var37);
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var34.mult(var38);
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Mono var45 = var43.clone();
    demo.Poly var46 = var40.multMono(var43);
    var33.add(var43);
    demo.Poly var48 = var33.clone();
    demo.Poly var49 = var0.mult(var33);
    demo.Poly var50 = var33.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var16.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = new demo.Poly();
    demo.Poly var40 = var39.clone();
    demo.Poly var41 = var39.clone();
    demo.Poly var42 = new demo.Poly();
    java.lang.String var43 = var42.toString();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    java.lang.String var46 = var44.toString();
    demo.Poly var47 = var42.multMono(var44);
    demo.Poly var48 = var39.multMono(var44);
    demo.Poly var49 = var38.sum(var44);
    demo.Poly var50 = var49.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var43.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(0/1)x^0"+ "'", var46.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    demo.Poly var5 = new demo.Poly();
    demo.Mono var6 = new demo.Mono();
    demo.Mono var7 = var6.clone();
    demo.Poly var8 = var5.sum(var7);
    demo.Poly var9 = var8.clone();
    demo.Mono var10 = new demo.Mono();
    java.lang.String var11 = var10.toString();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var8.sum(var12);
    demo.Poly var14 = new demo.Poly();
    java.lang.String var15 = var14.toString();
    demo.Mono var16 = new demo.Mono();
    java.lang.String var17 = var16.toString();
    java.lang.String var18 = var16.toString();
    demo.Poly var19 = var14.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Mono var21 = new demo.Mono();
    demo.Mono var22 = var21.clone();
    demo.Poly var23 = var20.sum(var22);
    demo.Poly var24 = var23.clone();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    demo.Mono var27 = var25.clone();
    demo.Poly var28 = var23.sum(var27);
    demo.Poly var29 = var19.mult(var28);
    demo.Mono var30 = new demo.Mono();
    demo.Mono var31 = var30.clone();
    demo.Poly var32 = var28.multMono(var30);
    demo.Poly var33 = var13.multMono(var30);
    demo.Poly var34 = var3.mult(var33);
    demo.Poly var35 = new demo.Poly();
    demo.Poly var36 = var35.clone();
    demo.Poly var37 = var35.clone();
    demo.Poly var38 = new demo.Poly();
    java.lang.String var39 = var38.toString();
    demo.Mono var40 = new demo.Mono();
    java.lang.String var41 = var40.toString();
    java.lang.String var42 = var40.toString();
    demo.Poly var43 = var38.multMono(var40);
    demo.Poly var44 = var35.multMono(var40);
    demo.Poly var45 = new demo.Poly();
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var45.mult(var49);
    demo.Poly var52 = new demo.Poly();
    demo.Mono var53 = new demo.Mono();
    demo.Mono var54 = var53.clone();
    demo.Poly var55 = var52.sum(var54);
    demo.Mono var56 = var54.clone();
    demo.Poly var57 = var51.multMono(var54);
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var58.clone();
    demo.Poly var61 = new demo.Poly();
    java.lang.String var62 = var61.toString();
    demo.Mono var63 = new demo.Mono();
    java.lang.String var64 = var63.toString();
    java.lang.String var65 = var63.toString();
    demo.Poly var66 = var61.multMono(var63);
    demo.Poly var67 = var58.multMono(var63);
    demo.Poly var68 = var51.mult(var58);
    demo.Poly var69 = new demo.Poly();
    demo.Mono var70 = new demo.Mono();
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var69.sum(var71);
    demo.Poly var73 = var72.clone();
    demo.Mono var74 = new demo.Mono();
    java.lang.String var75 = var74.toString();
    demo.Mono var76 = var74.clone();
    demo.Mono var77 = var74.clone();
    demo.Poly var78 = var72.multMono(var77);
    var51.add(var77);
    demo.Poly var80 = var35.sum(var77);
    demo.Mono var81 = var77.clone();
    demo.Mono var82 = var77.clone();
    demo.Poly var83 = var3.sum(var77);
    demo.Poly var84 = var83.clone();
    java.lang.String var85 = var84.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "(0/1)x^0"+ "'", var11.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var15.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0"+ "'", var17.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0"+ "'", var18.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var39.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var62.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(0/1)x^0"+ "'", var64.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0"+ "'", var75.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var85.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Poly var41 = new demo.Poly();
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var42.clone();
    demo.Poly var44 = new demo.Poly();
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = new demo.Poly();
    demo.Poly var47 = new demo.Poly();
    demo.Mono var48 = new demo.Mono();
    demo.Mono var49 = var48.clone();
    demo.Poly var50 = var47.sum(var49);
    demo.Poly var51 = var50.clone();
    demo.Poly var52 = var46.mult(var50);
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var52.multMono(var55);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = new demo.Poly();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    java.lang.String var66 = var64.toString();
    demo.Poly var67 = var62.multMono(var64);
    demo.Poly var68 = var59.multMono(var64);
    demo.Poly var69 = var52.mult(var59);
    demo.Poly var70 = var45.mult(var69);
    demo.Poly var71 = var42.mult(var45);
    demo.Mono var72 = new demo.Mono();
    java.lang.String var73 = var72.toString();
    demo.Mono var74 = var72.clone();
    demo.Mono var75 = var72.clone();
    demo.Poly var76 = var45.multMono(var75);
    demo.Poly var77 = var39.multMono(var75);
    demo.Poly var78 = var39.clone();
    demo.Mono var82 = new demo.Mono(10, 100, 0);
    demo.Poly var83 = var39.multMono(var82);
    demo.Mono var87 = new demo.Mono((-1), 100, 0);
    var39.add(var87);
    demo.Mono var89 = var87.clone();
    demo.Poly var90 = var0.multMono(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(0/1)x^0"+ "'", var73.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var2.mult(var6);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var8.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = new demo.Poly();
    java.lang.String var19 = var18.toString();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    java.lang.String var22 = var20.toString();
    demo.Poly var23 = var18.multMono(var20);
    demo.Poly var24 = var15.multMono(var20);
    demo.Poly var25 = var8.mult(var15);
    demo.Poly var26 = var1.mult(var25);
    demo.Mono var30 = new demo.Mono(1, 1, 0);
    demo.Mono var31 = var30.clone();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var1.multMono(var31);
    demo.Poly var34 = var33.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    demo.Poly var6 = new demo.Poly();
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = var6.mult(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Mono var64 = new demo.Mono();
    demo.Mono var65 = var64.clone();
    demo.Poly var66 = var63.multMono(var65);
    demo.Poly var67 = var6.sum(var65);
    demo.Mono var68 = new demo.Mono();
    demo.Mono var69 = var68.clone();
    demo.Mono var70 = var69.clone();
    demo.Mono var71 = var69.clone();
    demo.Mono var72 = var71.clone();
    var67.add(var71);
    demo.Poly var74 = var3.multMono(var71);
    demo.Poly var75 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var5.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    demo.Poly var4 = var3.clone();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    demo.Mono var7 = var5.clone();
    demo.Poly var8 = var3.sum(var7);
    demo.Poly var9 = new demo.Poly();
    java.lang.String var10 = var9.toString();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.toString();
    demo.Poly var14 = var9.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Mono var16 = new demo.Mono();
    demo.Mono var17 = var16.clone();
    demo.Poly var18 = var15.sum(var17);
    demo.Poly var19 = var18.clone();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    demo.Mono var22 = var20.clone();
    demo.Poly var23 = var18.sum(var22);
    demo.Poly var24 = var14.mult(var23);
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var23.multMono(var25);
    demo.Poly var28 = var8.multMono(var25);
    demo.Mono var29 = new demo.Mono();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = var29.clone();
    var28.add(var29);
    demo.Poly var33 = new demo.Poly();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = new demo.Mono();
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    demo.Poly var38 = var33.multMono(var35);
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Poly var43 = var42.clone();
    demo.Mono var44 = new demo.Mono();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = var44.clone();
    demo.Poly var47 = var42.sum(var46);
    demo.Poly var48 = var38.mult(var47);
    demo.Mono var49 = new demo.Mono();
    demo.Mono var50 = var49.clone();
    demo.Poly var51 = var47.multMono(var49);
    demo.Poly var52 = new demo.Poly();
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    demo.Poly var57 = var56.clone();
    demo.Poly var58 = var52.mult(var56);
    demo.Poly var59 = new demo.Poly();
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var59.sum(var61);
    demo.Mono var63 = var61.clone();
    demo.Poly var64 = var58.multMono(var61);
    var51.add(var61);
    demo.Mono var69 = new demo.Mono((-1), 100, 0);
    demo.Poly var70 = var51.sum(var69);
    demo.Mono var71 = var69.clone();
    demo.Poly var72 = var28.multMono(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var10.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "(0/1)x^0"+ "'", var13.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0"+ "'", var30.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var34.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "(0/1)x^0"+ "'", var36.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = new demo.Mono();
    java.lang.String var40 = var39.toString();
    java.lang.String var41 = var39.toString();
    demo.Poly var42 = var37.multMono(var39);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Poly var47 = var46.clone();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    demo.Mono var50 = var48.clone();
    demo.Poly var51 = var46.sum(var50);
    demo.Poly var52 = var42.mult(var51);
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    java.lang.String var57 = var56.toString();
    demo.Poly var58 = var56.clone();
    demo.Poly var59 = var58.clone();
    demo.Poly var60 = var42.mult(var58);
    demo.Poly var61 = new demo.Poly();
    demo.Poly var62 = new demo.Poly();
    demo.Mono var63 = new demo.Mono();
    demo.Mono var64 = var63.clone();
    demo.Poly var65 = var62.sum(var64);
    demo.Poly var66 = var65.clone();
    demo.Poly var67 = var61.mult(var65);
    demo.Poly var68 = new demo.Poly();
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Poly var71 = var68.sum(var70);
    demo.Mono var72 = var70.clone();
    demo.Poly var73 = var67.multMono(var70);
    demo.Poly var74 = new demo.Poly();
    demo.Poly var75 = var74.clone();
    demo.Poly var76 = var74.clone();
    demo.Poly var77 = new demo.Poly();
    java.lang.String var78 = var77.toString();
    demo.Mono var79 = new demo.Mono();
    java.lang.String var80 = var79.toString();
    java.lang.String var81 = var79.toString();
    demo.Poly var82 = var77.multMono(var79);
    demo.Poly var83 = var74.multMono(var79);
    demo.Poly var84 = var67.mult(var74);
    demo.Mono var88 = new demo.Mono(1, 1, 0);
    demo.Mono var89 = var88.clone();
    var67.add(var89);
    demo.Poly var91 = var67.clone();
    demo.Poly var92 = var42.mult(var91);
    demo.Mono var93 = new demo.Mono();
    java.lang.String var94 = var93.toString();
    demo.Mono var95 = var93.clone();
    demo.Mono var96 = var93.clone();
    demo.Mono var97 = var96.clone();
    demo.Poly var98 = var42.sum(var97);
    demo.Poly var99 = var6.mult(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var38.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0"+ "'", var40.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0"+ "'", var41.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var57.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var78.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "(0/1)x^0"+ "'", var80.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(0/1)x^0"+ "'", var81.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "(0/1)x^0"+ "'", var94.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Mono var11 = new demo.Mono();
    java.lang.String var12 = var11.toString();
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var9.sum(var13);
    demo.Poly var15 = var5.mult(var14);
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    java.lang.String var20 = var19.toString();
    demo.Poly var21 = var19.clone();
    demo.Poly var22 = var21.clone();
    demo.Poly var23 = var5.mult(var21);
    demo.Poly var24 = var5.clone();
    demo.Mono var28 = new demo.Mono(1, 1, 0);
    demo.Mono var29 = var28.clone();
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var5.multMono(var30);
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = var33.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "(0/1)x^0"+ "'", var12.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var20.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = var6.mult(var13);
    demo.Mono var27 = new demo.Mono(1, 1, 0);
    demo.Mono var28 = var27.clone();
    var6.add(var28);
    demo.Poly var30 = var6.clone();
    demo.Mono var34 = new demo.Mono(1, 1, 0);
    demo.Mono var35 = var34.clone();
    demo.Poly var36 = var6.multMono(var34);
    demo.Poly var37 = new demo.Poly();
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    demo.Poly var42 = var41.clone();
    demo.Poly var43 = var37.mult(var41);
    demo.Poly var44 = new demo.Poly();
    demo.Mono var45 = new demo.Mono();
    demo.Mono var46 = var45.clone();
    demo.Poly var47 = var44.sum(var46);
    demo.Mono var48 = var46.clone();
    demo.Poly var49 = var43.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Poly var51 = var50.clone();
    demo.Poly var52 = var50.clone();
    demo.Poly var53 = new demo.Poly();
    java.lang.String var54 = var53.toString();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    java.lang.String var57 = var55.toString();
    demo.Poly var58 = var53.multMono(var55);
    demo.Poly var59 = var50.multMono(var55);
    demo.Poly var60 = var43.mult(var50);
    demo.Mono var64 = new demo.Mono(1, 1, 0);
    demo.Mono var65 = var64.clone();
    var43.add(var65);
    demo.Poly var67 = var43.clone();
    demo.Mono var71 = new demo.Mono(1, 1, 0);
    demo.Mono var72 = var71.clone();
    demo.Poly var73 = var43.multMono(var71);
    demo.Mono var74 = var71.clone();
    demo.Poly var75 = var36.sum(var71);
    java.lang.String var76 = var71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var54.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(1/1)x^0"+ "'", var76.equals("(1/1)x^0"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = var2.clone();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Poly var13 = var7.mult(var11);
    demo.Poly var14 = new demo.Poly();
    demo.Mono var15 = new demo.Mono();
    demo.Mono var16 = var15.clone();
    demo.Poly var17 = var14.sum(var16);
    demo.Mono var18 = var16.clone();
    demo.Poly var19 = var13.multMono(var16);
    demo.Poly var20 = new demo.Poly();
    demo.Poly var21 = var20.clone();
    demo.Poly var22 = var20.clone();
    demo.Poly var23 = new demo.Poly();
    java.lang.String var24 = var23.toString();
    demo.Mono var25 = new demo.Mono();
    java.lang.String var26 = var25.toString();
    java.lang.String var27 = var25.toString();
    demo.Poly var28 = var23.multMono(var25);
    demo.Poly var29 = var20.multMono(var25);
    demo.Poly var30 = var13.mult(var20);
    demo.Poly var31 = var6.mult(var30);
    demo.Poly var32 = var3.mult(var6);
    demo.Mono var33 = new demo.Mono();
    java.lang.String var34 = var33.toString();
    demo.Mono var35 = var33.clone();
    demo.Mono var36 = var33.clone();
    demo.Poly var37 = var6.multMono(var36);
    demo.Poly var38 = var0.multMono(var36);
    demo.Poly var39 = var0.clone();
    demo.Poly var40 = new demo.Poly();
    java.lang.String var41 = var40.toString();
    demo.Mono var42 = new demo.Mono();
    java.lang.String var43 = var42.toString();
    java.lang.String var44 = var42.toString();
    demo.Poly var45 = var40.multMono(var42);
    demo.Poly var46 = new demo.Poly();
    demo.Mono var47 = new demo.Mono();
    demo.Mono var48 = var47.clone();
    demo.Poly var49 = var46.sum(var48);
    demo.Poly var50 = var49.clone();
    demo.Mono var51 = new demo.Mono();
    java.lang.String var52 = var51.toString();
    demo.Mono var53 = var51.clone();
    demo.Poly var54 = var49.sum(var53);
    demo.Poly var55 = var45.mult(var54);
    demo.Mono var56 = new demo.Mono();
    demo.Mono var57 = var56.clone();
    demo.Poly var58 = var54.multMono(var56);
    demo.Poly var59 = new demo.Poly();
    demo.Poly var60 = var59.clone();
    demo.Poly var61 = var59.clone();
    demo.Poly var62 = new demo.Poly();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    java.lang.String var66 = var64.toString();
    demo.Poly var67 = var62.multMono(var64);
    demo.Poly var68 = var59.multMono(var64);
    demo.Poly var69 = var54.multMono(var64);
    demo.Poly var70 = new demo.Poly();
    demo.Poly var71 = var70.clone();
    demo.Poly var72 = var70.clone();
    demo.Mono var73 = new demo.Mono();
    demo.Poly var74 = var72.sum(var73);
    demo.Mono var75 = var73.clone();
    var69.add(var75);
    demo.Poly var77 = var0.multMono(var75);
    demo.Poly var78 = new demo.Poly();
    demo.Poly var79 = var78.clone();
    demo.Poly var80 = var78.clone();
    demo.Mono var81 = new demo.Mono();
    java.lang.String var82 = var81.toString();
    demo.Mono var83 = var81.clone();
    demo.Mono var84 = var81.clone();
    demo.Mono var85 = var81.clone();
    demo.Poly var86 = var80.sum(var85);
    java.lang.String var87 = var85.toString();
    demo.Poly var88 = var77.multMono(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var24.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(0/1)x^0"+ "'", var26.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "(0/1)x^0"+ "'", var27.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "(0/1)x^0"+ "'", var34.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var41.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0"+ "'", var52.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "(0/1)x^0"+ "'", var82.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(0/1)x^0"+ "'", var87.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = var36.clone();
    demo.Poly var39 = new demo.Poly();
    java.lang.String var40 = var39.toString();
    demo.Mono var41 = new demo.Mono();
    java.lang.String var42 = var41.toString();
    java.lang.String var43 = var41.toString();
    demo.Poly var44 = var39.multMono(var41);
    demo.Poly var45 = var36.multMono(var41);
    var4.add(var41);
    demo.Mono var47 = var41.clone();
    demo.Mono var48 = var41.clone();
    demo.Mono var49 = var41.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var40.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0"+ "'", var42.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "(0/1)x^0"+ "'", var43.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    demo.Poly var0 = new demo.Poly();
    demo.Mono var1 = new demo.Mono();
    demo.Mono var2 = var1.clone();
    demo.Poly var3 = var0.sum(var2);
    java.lang.String var4 = var3.toString();
    demo.Poly var5 = var3.clone();
    demo.Poly var6 = var5.clone();
    demo.Poly var7 = var5.clone();
    demo.Poly var8 = new demo.Poly();
    demo.Mono var9 = new demo.Mono();
    demo.Mono var10 = var9.clone();
    demo.Poly var11 = var8.sum(var10);
    demo.Poly var12 = var11.clone();
    demo.Mono var13 = new demo.Mono();
    java.lang.String var14 = var13.toString();
    demo.Mono var15 = var13.clone();
    demo.Poly var16 = var11.sum(var15);
    demo.Poly var17 = new demo.Poly();
    java.lang.String var18 = var17.toString();
    demo.Mono var19 = new demo.Mono();
    java.lang.String var20 = var19.toString();
    java.lang.String var21 = var19.toString();
    demo.Poly var22 = var17.multMono(var19);
    demo.Poly var23 = new demo.Poly();
    demo.Mono var24 = new demo.Mono();
    demo.Mono var25 = var24.clone();
    demo.Poly var26 = var23.sum(var25);
    demo.Poly var27 = var26.clone();
    demo.Mono var28 = new demo.Mono();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = var28.clone();
    demo.Poly var31 = var26.sum(var30);
    demo.Poly var32 = var22.mult(var31);
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var31.multMono(var33);
    demo.Poly var36 = var16.multMono(var33);
    demo.Mono var37 = new demo.Mono();
    java.lang.String var38 = var37.toString();
    demo.Mono var39 = var37.clone();
    var36.add(var37);
    demo.Mono var41 = var37.clone();
    var7.add(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(0/1)x^0"+ "'", var14.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var18.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0"+ "'", var29.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Mono var17 = new demo.Mono();
    demo.Mono var18 = var17.clone();
    demo.Poly var19 = var16.sum(var18);
    demo.Poly var20 = var19.clone();
    demo.Mono var21 = new demo.Mono();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var19.sum(var23);
    demo.Poly var25 = var13.multMono(var23);
    demo.Poly var26 = new demo.Poly();
    demo.Poly var27 = var26.clone();
    demo.Poly var28 = var26.clone();
    demo.Poly var29 = new demo.Poly();
    java.lang.String var30 = var29.toString();
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    java.lang.String var33 = var31.toString();
    demo.Poly var34 = var29.multMono(var31);
    demo.Poly var35 = var26.multMono(var31);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = var36.clone();
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = new demo.Poly();
    demo.Mono var40 = new demo.Mono();
    demo.Mono var41 = var40.clone();
    demo.Poly var42 = var39.sum(var41);
    demo.Poly var43 = var42.clone();
    demo.Poly var44 = var38.mult(var42);
    demo.Poly var45 = new demo.Poly();
    demo.Mono var46 = new demo.Mono();
    demo.Mono var47 = var46.clone();
    demo.Poly var48 = var45.sum(var47);
    demo.Mono var49 = var47.clone();
    demo.Poly var50 = var44.multMono(var47);
    demo.Poly var51 = new demo.Poly();
    demo.Poly var52 = var51.clone();
    demo.Poly var53 = var51.clone();
    demo.Poly var54 = new demo.Poly();
    java.lang.String var55 = var54.toString();
    demo.Mono var56 = new demo.Mono();
    java.lang.String var57 = var56.toString();
    java.lang.String var58 = var56.toString();
    demo.Poly var59 = var54.multMono(var56);
    demo.Poly var60 = var51.multMono(var56);
    demo.Poly var61 = var44.mult(var51);
    demo.Poly var62 = var37.mult(var61);
    demo.Poly var63 = var26.mult(var61);
    demo.Poly var64 = var13.mult(var63);
    java.lang.String var65 = var63.toString();
    demo.Mono var69 = new demo.Mono(1, 1, 0);
    var63.add(var69);
    java.lang.String var71 = var69.toString();
    demo.Poly var72 = var6.multMono(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var30.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "(0/1)x^0"+ "'", var33.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var55.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "(0/1)x^0"+ "'", var57.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "(0/1)x^0"+ "'", var58.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var65.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(1/1)x^0"+ "'", var71.equals("(1/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var1.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Poly var4 = var3.clone();
    demo.Poly var5 = new demo.Poly();
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Poly var10 = var9.clone();
    demo.Poly var11 = var5.mult(var9);
    demo.Poly var12 = new demo.Poly();
    demo.Mono var13 = new demo.Mono();
    demo.Mono var14 = var13.clone();
    demo.Poly var15 = var12.sum(var14);
    demo.Mono var16 = var14.clone();
    demo.Poly var17 = var11.multMono(var14);
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = var18.clone();
    demo.Poly var20 = var18.clone();
    demo.Poly var21 = new demo.Poly();
    java.lang.String var22 = var21.toString();
    demo.Mono var23 = new demo.Mono();
    java.lang.String var24 = var23.toString();
    java.lang.String var25 = var23.toString();
    demo.Poly var26 = var21.multMono(var23);
    demo.Poly var27 = var18.multMono(var23);
    demo.Poly var28 = var11.mult(var18);
    demo.Poly var29 = var4.mult(var28);
    demo.Poly var30 = var1.mult(var4);
    demo.Mono var31 = new demo.Mono();
    java.lang.String var32 = var31.toString();
    demo.Mono var33 = var31.clone();
    demo.Mono var34 = var31.clone();
    demo.Poly var35 = var4.multMono(var34);
    demo.Poly var36 = new demo.Poly();
    demo.Poly var37 = new demo.Poly();
    demo.Mono var38 = new demo.Mono();
    demo.Mono var39 = var38.clone();
    demo.Poly var40 = var37.sum(var39);
    demo.Poly var41 = var40.clone();
    demo.Poly var42 = var36.mult(var40);
    demo.Poly var43 = new demo.Poly();
    demo.Mono var44 = new demo.Mono();
    demo.Mono var45 = var44.clone();
    demo.Poly var46 = var43.sum(var45);
    demo.Mono var47 = var45.clone();
    demo.Poly var48 = var42.multMono(var45);
    demo.Poly var49 = new demo.Poly();
    demo.Poly var50 = var49.clone();
    demo.Poly var51 = var49.clone();
    demo.Poly var52 = new demo.Poly();
    java.lang.String var53 = var52.toString();
    demo.Mono var54 = new demo.Mono();
    java.lang.String var55 = var54.toString();
    java.lang.String var56 = var54.toString();
    demo.Poly var57 = var52.multMono(var54);
    demo.Poly var58 = var49.multMono(var54);
    demo.Poly var59 = var42.mult(var49);
    demo.Mono var63 = new demo.Mono(1, 1, 0);
    demo.Mono var64 = var63.clone();
    var42.add(var64);
    demo.Poly var66 = var42.clone();
    demo.Mono var70 = new demo.Mono(1, 1, 0);
    demo.Mono var71 = var70.clone();
    demo.Poly var72 = var42.multMono(var70);
    demo.Poly var73 = var35.mult(var72);
    java.lang.String var74 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var22.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(0/1)x^0"+ "'", var24.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(0/1)x^0"+ "'", var25.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var53.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "(0/1)x^0"+ "'", var55.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var74.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Poly var65 = new demo.Poly();
    java.lang.String var66 = var65.toString();
    demo.Mono var67 = new demo.Mono();
    java.lang.String var68 = var67.toString();
    java.lang.String var69 = var67.toString();
    demo.Poly var70 = var65.multMono(var67);
    demo.Poly var71 = new demo.Poly();
    demo.Mono var72 = new demo.Mono();
    demo.Mono var73 = var72.clone();
    demo.Poly var74 = var71.sum(var73);
    demo.Poly var75 = var74.clone();
    demo.Mono var76 = new demo.Mono();
    java.lang.String var77 = var76.toString();
    demo.Mono var78 = var76.clone();
    demo.Poly var79 = var74.sum(var78);
    demo.Poly var80 = var70.mult(var79);
    demo.Poly var81 = new demo.Poly();
    demo.Mono var82 = new demo.Mono();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var81.sum(var83);
    java.lang.String var85 = var84.toString();
    demo.Poly var86 = var84.clone();
    demo.Poly var87 = var86.clone();
    demo.Poly var88 = var70.mult(var86);
    demo.Poly var89 = var70.clone();
    demo.Mono var93 = new demo.Mono(1, 1, 0);
    demo.Mono var94 = var93.clone();
    demo.Mono var95 = var93.clone();
    demo.Poly var96 = var70.multMono(var95);
    var12.add(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var66.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0"+ "'", var68.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0"+ "'", var69.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var85.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Mono var8 = new demo.Mono();
    demo.Mono var9 = var8.clone();
    demo.Poly var10 = var7.sum(var9);
    demo.Mono var11 = var9.clone();
    demo.Poly var12 = var6.multMono(var9);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var14.clone();
    demo.Poly var16 = new demo.Poly();
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = new demo.Poly();
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Poly var23 = var22.clone();
    demo.Poly var24 = var18.mult(var22);
    demo.Poly var25 = new demo.Poly();
    demo.Mono var26 = new demo.Mono();
    demo.Mono var27 = var26.clone();
    demo.Poly var28 = var25.sum(var27);
    demo.Mono var29 = var27.clone();
    demo.Poly var30 = var24.multMono(var27);
    demo.Poly var31 = new demo.Poly();
    demo.Poly var32 = var31.clone();
    demo.Poly var33 = var31.clone();
    demo.Poly var34 = new demo.Poly();
    java.lang.String var35 = var34.toString();
    demo.Mono var36 = new demo.Mono();
    java.lang.String var37 = var36.toString();
    java.lang.String var38 = var36.toString();
    demo.Poly var39 = var34.multMono(var36);
    demo.Poly var40 = var31.multMono(var36);
    demo.Poly var41 = var24.mult(var31);
    demo.Poly var42 = var17.mult(var41);
    demo.Poly var43 = var14.mult(var17);
    demo.Poly var44 = new demo.Poly();
    java.lang.String var45 = var44.toString();
    demo.Mono var46 = new demo.Mono();
    java.lang.String var47 = var46.toString();
    java.lang.String var48 = var46.toString();
    demo.Poly var49 = var44.multMono(var46);
    demo.Poly var50 = new demo.Poly();
    demo.Mono var51 = new demo.Mono();
    demo.Mono var52 = var51.clone();
    demo.Poly var53 = var50.sum(var52);
    demo.Poly var54 = var53.clone();
    demo.Mono var55 = new demo.Mono();
    java.lang.String var56 = var55.toString();
    demo.Mono var57 = var55.clone();
    demo.Poly var58 = var53.sum(var57);
    demo.Poly var59 = var49.mult(var58);
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var58.multMono(var60);
    demo.Poly var63 = var17.mult(var62);
    demo.Poly var64 = var12.mult(var17);
    demo.Poly var65 = var17.clone();
    java.lang.String var66 = var65.toString();
    demo.Poly var67 = new demo.Poly();
    java.lang.String var68 = var67.toString();
    java.lang.String var69 = var67.toString();
    demo.Poly var70 = var65.mult(var67);
    java.lang.String var71 = var70.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var35.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "(0/1)x^0"+ "'", var37.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "(0/1)x^0"+ "'", var38.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var45.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0"+ "'", var47.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "(0/1)x^0"+ "'", var48.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "(0/1)x^0"+ "'", var56.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var66.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var68.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var69.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var71.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Mono var8 = new demo.Mono();
    java.lang.String var9 = var8.toString();
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var6.sum(var10);
    demo.Poly var12 = var0.multMono(var10);
    demo.Poly var13 = new demo.Poly();
    demo.Poly var14 = var13.clone();
    demo.Poly var15 = var13.clone();
    demo.Poly var16 = new demo.Poly();
    java.lang.String var17 = var16.toString();
    demo.Mono var18 = new demo.Mono();
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.toString();
    demo.Poly var21 = var16.multMono(var18);
    demo.Poly var22 = var13.multMono(var18);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = var23.clone();
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = new demo.Poly();
    demo.Mono var27 = new demo.Mono();
    demo.Mono var28 = var27.clone();
    demo.Poly var29 = var26.sum(var28);
    demo.Poly var30 = var29.clone();
    demo.Poly var31 = var25.mult(var29);
    demo.Poly var32 = new demo.Poly();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Poly var35 = var32.sum(var34);
    demo.Mono var36 = var34.clone();
    demo.Poly var37 = var31.multMono(var34);
    demo.Poly var38 = new demo.Poly();
    demo.Poly var39 = var38.clone();
    demo.Poly var40 = var38.clone();
    demo.Poly var41 = new demo.Poly();
    java.lang.String var42 = var41.toString();
    demo.Mono var43 = new demo.Mono();
    java.lang.String var44 = var43.toString();
    java.lang.String var45 = var43.toString();
    demo.Poly var46 = var41.multMono(var43);
    demo.Poly var47 = var38.multMono(var43);
    demo.Poly var48 = var31.mult(var38);
    demo.Poly var49 = var24.mult(var48);
    demo.Poly var50 = var13.mult(var48);
    demo.Poly var51 = var0.mult(var50);
    java.lang.String var52 = var50.toString();
    demo.Mono var56 = new demo.Mono(1, 1, 0);
    var50.add(var56);
    demo.Poly var58 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "(0/1)x^0"+ "'", var9.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var17.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0"+ "'", var19.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "(0/1)x^0"+ "'", var20.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "(0/1)x^0"+ "'", var44.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "(0/1)x^0"+ "'", var45.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = new demo.Poly();
    demo.Poly var3 = new demo.Poly();
    demo.Mono var4 = new demo.Mono();
    demo.Mono var5 = var4.clone();
    demo.Poly var6 = var3.sum(var5);
    demo.Poly var7 = var6.clone();
    demo.Poly var8 = var2.mult(var6);
    demo.Poly var9 = new demo.Poly();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Poly var12 = var9.sum(var11);
    demo.Mono var13 = var11.clone();
    demo.Poly var14 = var8.multMono(var11);
    demo.Poly var15 = new demo.Poly();
    demo.Poly var16 = var15.clone();
    demo.Poly var17 = var15.clone();
    demo.Poly var18 = new demo.Poly();
    java.lang.String var19 = var18.toString();
    demo.Mono var20 = new demo.Mono();
    java.lang.String var21 = var20.toString();
    java.lang.String var22 = var20.toString();
    demo.Poly var23 = var18.multMono(var20);
    demo.Poly var24 = var15.multMono(var20);
    demo.Poly var25 = var8.mult(var15);
    demo.Poly var26 = var1.mult(var25);
    demo.Mono var30 = new demo.Mono(1, 1, 0);
    demo.Mono var31 = var30.clone();
    demo.Mono var32 = var31.clone();
    demo.Poly var33 = var1.multMono(var31);
    demo.Mono var37 = new demo.Mono(0, 100, 0);
    demo.Mono var38 = var37.clone();
    demo.Poly var39 = var1.sum(var38);
    demo.Poly var40 = new demo.Poly();
    demo.Poly var41 = new demo.Poly();
    demo.Mono var42 = new demo.Mono();
    demo.Mono var43 = var42.clone();
    demo.Poly var44 = var41.sum(var43);
    demo.Poly var45 = var44.clone();
    demo.Poly var46 = var40.mult(var44);
    java.lang.String var47 = var40.toString();
    demo.Poly var48 = var40.clone();
    demo.Poly var49 = var39.mult(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var19.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "(0/1)x^0"+ "'", var21.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "(0/1)x^0"+ "'", var22.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    demo.Poly var0 = new demo.Poly();
    java.lang.String var1 = var0.toString();
    demo.Mono var2 = new demo.Mono();
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    demo.Poly var5 = var0.multMono(var2);
    demo.Poly var6 = new demo.Poly();
    demo.Mono var7 = new demo.Mono();
    demo.Mono var8 = var7.clone();
    demo.Poly var9 = var6.sum(var8);
    demo.Mono var10 = var8.clone();
    demo.Poly var11 = var5.sum(var8);
    demo.Poly var12 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var1.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "(0/1)x^0"+ "'", var3.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0"+ "'", var4.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = var0.clone();
    demo.Poly var2 = var0.clone();
    demo.Poly var3 = new demo.Poly();
    java.lang.String var4 = var3.toString();
    demo.Mono var5 = new demo.Mono();
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    demo.Poly var8 = var3.multMono(var5);
    demo.Poly var9 = var0.multMono(var5);
    demo.Poly var10 = new demo.Poly();
    demo.Poly var11 = var10.clone();
    demo.Poly var12 = new demo.Poly();
    demo.Poly var13 = new demo.Poly();
    demo.Mono var14 = new demo.Mono();
    demo.Mono var15 = var14.clone();
    demo.Poly var16 = var13.sum(var15);
    demo.Poly var17 = var16.clone();
    demo.Poly var18 = var12.mult(var16);
    demo.Poly var19 = new demo.Poly();
    demo.Mono var20 = new demo.Mono();
    demo.Mono var21 = var20.clone();
    demo.Poly var22 = var19.sum(var21);
    demo.Mono var23 = var21.clone();
    demo.Poly var24 = var18.multMono(var21);
    demo.Poly var25 = new demo.Poly();
    demo.Poly var26 = var25.clone();
    demo.Poly var27 = var25.clone();
    demo.Poly var28 = new demo.Poly();
    java.lang.String var29 = var28.toString();
    demo.Mono var30 = new demo.Mono();
    java.lang.String var31 = var30.toString();
    java.lang.String var32 = var30.toString();
    demo.Poly var33 = var28.multMono(var30);
    demo.Poly var34 = var25.multMono(var30);
    demo.Poly var35 = var18.mult(var25);
    demo.Poly var36 = var11.mult(var35);
    demo.Poly var37 = var0.mult(var35);
    demo.Poly var38 = new demo.Poly();
    demo.Mono var39 = new demo.Mono();
    demo.Mono var40 = var39.clone();
    demo.Poly var41 = var38.sum(var40);
    java.lang.String var42 = var41.toString();
    demo.Poly var43 = var41.clone();
    demo.Poly var44 = var43.clone();
    demo.Poly var45 = var37.mult(var44);
    demo.Poly var46 = new demo.Poly();
    java.lang.String var47 = var46.toString();
    demo.Mono var48 = new demo.Mono();
    java.lang.String var49 = var48.toString();
    java.lang.String var50 = var48.toString();
    demo.Poly var51 = var46.multMono(var48);
    demo.Poly var52 = var46.clone();
    demo.Poly var53 = new demo.Poly();
    demo.Mono var54 = new demo.Mono();
    demo.Mono var55 = var54.clone();
    demo.Poly var56 = var53.sum(var55);
    demo.Poly var57 = var56.clone();
    demo.Mono var58 = new demo.Mono();
    java.lang.String var59 = var58.toString();
    demo.Mono var60 = var58.clone();
    demo.Poly var61 = var56.sum(var60);
    demo.Poly var62 = new demo.Poly();
    java.lang.String var63 = var62.toString();
    demo.Mono var64 = new demo.Mono();
    java.lang.String var65 = var64.toString();
    java.lang.String var66 = var64.toString();
    demo.Poly var67 = var62.multMono(var64);
    demo.Poly var68 = new demo.Poly();
    demo.Mono var69 = new demo.Mono();
    demo.Mono var70 = var69.clone();
    demo.Poly var71 = var68.sum(var70);
    demo.Poly var72 = var71.clone();
    demo.Mono var73 = new demo.Mono();
    java.lang.String var74 = var73.toString();
    demo.Mono var75 = var73.clone();
    demo.Poly var76 = var71.sum(var75);
    demo.Poly var77 = var67.mult(var76);
    demo.Mono var78 = new demo.Mono();
    demo.Mono var79 = var78.clone();
    demo.Poly var80 = var76.multMono(var78);
    demo.Poly var81 = var61.multMono(var78);
    demo.Mono var82 = var78.clone();
    demo.Mono var83 = var82.clone();
    demo.Poly var84 = var46.multMono(var83);
    demo.Mono var85 = new demo.Mono();
    demo.Mono var86 = var85.clone();
    demo.Mono var87 = var85.clone();
    demo.Poly var88 = var84.multMono(var85);
    demo.Poly var89 = var45.mult(var84);
    demo.Poly var90 = var89.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var4.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(0/1)x^0"+ "'", var6.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "(0/1)x^0"+ "'", var7.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var29.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(0/1)x^0"+ "'", var31.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "(0/1)x^0"+ "'", var32.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var42.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var47.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(0/1)x^0"+ "'", var49.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(0/1)x^0"+ "'", var50.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(0/1)x^0"+ "'", var59.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var63.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "(0/1)x^0"+ "'", var65.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "(0/1)x^0"+ "'", var66.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "(0/1)x^0"+ "'", var74.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    demo.Poly var0 = new demo.Poly();
    demo.Poly var1 = new demo.Poly();
    demo.Mono var2 = new demo.Mono();
    demo.Mono var3 = var2.clone();
    demo.Poly var4 = var1.sum(var3);
    demo.Poly var5 = var4.clone();
    demo.Poly var6 = var0.mult(var4);
    demo.Poly var7 = new demo.Poly();
    demo.Poly var8 = var7.clone();
    demo.Poly var9 = var7.clone();
    demo.Mono var10 = new demo.Mono();
    demo.Mono var11 = var10.clone();
    demo.Mono var12 = var10.clone();
    demo.Poly var13 = var7.sum(var10);
    var0.add(var10);
    demo.Poly var15 = var0.clone();
    demo.Mono var19 = new demo.Mono(1, 1, 0);
    demo.Mono var20 = var19.clone();
    demo.Mono var21 = var19.clone();
    demo.Poly var22 = var0.multMono(var21);
    demo.Poly var23 = new demo.Poly();
    demo.Poly var24 = new demo.Poly();
    demo.Mono var25 = new demo.Mono();
    demo.Mono var26 = var25.clone();
    demo.Poly var27 = var24.sum(var26);
    demo.Poly var28 = var27.clone();
    demo.Poly var29 = var23.mult(var27);
    demo.Poly var30 = new demo.Poly();
    demo.Poly var31 = var30.clone();
    demo.Poly var32 = var30.clone();
    demo.Mono var33 = new demo.Mono();
    demo.Mono var34 = var33.clone();
    demo.Mono var35 = var33.clone();
    demo.Poly var36 = var30.sum(var33);
    var23.add(var33);
    demo.Poly var38 = var23.clone();
    demo.Mono var42 = new demo.Mono(1, 1, 0);
    demo.Mono var43 = var42.clone();
    demo.Mono var44 = var42.clone();
    demo.Poly var45 = var23.multMono(var44);
    demo.Poly var46 = var23.clone();
    demo.Poly var47 = new demo.Poly();
    demo.Mono var48 = new demo.Mono();
    demo.Mono var49 = var48.clone();
    demo.Poly var50 = var47.sum(var49);
    java.lang.String var51 = var50.toString();
    java.lang.String var52 = var50.toString();
    demo.Poly var53 = new demo.Poly();
    demo.Poly var54 = var53.clone();
    demo.Poly var55 = var54.clone();
    demo.Poly var56 = new demo.Poly();
    demo.Poly var57 = var56.clone();
    demo.Poly var58 = new demo.Poly();
    demo.Poly var59 = new demo.Poly();
    demo.Mono var60 = new demo.Mono();
    demo.Mono var61 = var60.clone();
    demo.Poly var62 = var59.sum(var61);
    demo.Poly var63 = var62.clone();
    demo.Poly var64 = var58.mult(var62);
    demo.Poly var65 = new demo.Poly();
    demo.Mono var66 = new demo.Mono();
    demo.Mono var67 = var66.clone();
    demo.Poly var68 = var65.sum(var67);
    demo.Mono var69 = var67.clone();
    demo.Poly var70 = var64.multMono(var67);
    demo.Poly var71 = new demo.Poly();
    demo.Poly var72 = var71.clone();
    demo.Poly var73 = var71.clone();
    demo.Poly var74 = new demo.Poly();
    java.lang.String var75 = var74.toString();
    demo.Mono var76 = new demo.Mono();
    java.lang.String var77 = var76.toString();
    java.lang.String var78 = var76.toString();
    demo.Poly var79 = var74.multMono(var76);
    demo.Poly var80 = var71.multMono(var76);
    demo.Poly var81 = var64.mult(var71);
    demo.Poly var82 = var57.mult(var81);
    demo.Poly var83 = var54.mult(var57);
    demo.Mono var84 = new demo.Mono();
    java.lang.String var85 = var84.toString();
    demo.Mono var86 = var84.clone();
    demo.Mono var87 = var84.clone();
    demo.Poly var88 = var57.multMono(var87);
    demo.Mono var89 = new demo.Mono();
    java.lang.String var90 = var89.toString();
    demo.Mono var91 = var89.clone();
    demo.Mono var92 = var91.clone();
    java.lang.String var93 = var91.toString();
    demo.Mono var94 = var91.clone();
    var57.add(var91);
    demo.Poly var96 = var50.multMono(var91);
    demo.Poly var97 = var46.mult(var96);
    demo.Poly var98 = var22.mult(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var51.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var52.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"+ "'", var75.equals("(0/1)x^0 + (0/1)x^1 + (0/1)x^2 + (0/1)x^3 + (0/1)x^4 + (0/1)x^5 + (0/1)x^6 + (0/1)x^7 + (0/1)x^8 + (0/1)x^9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(0/1)x^0"+ "'", var77.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "(0/1)x^0"+ "'", var78.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(0/1)x^0"+ "'", var85.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(0/1)x^0"+ "'", var90.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "(0/1)x^0"+ "'", var93.equals("(0/1)x^0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

}
